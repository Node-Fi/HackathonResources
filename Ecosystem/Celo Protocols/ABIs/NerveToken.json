{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/AccessControl.sol",
    "1": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/Ownable.sol",
    "15": "contracts/NerveToken.sol",
    "2": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol",
    "3": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol",
    "4": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20Burnable.sol",
    "5": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol",
    "7": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Address.sol",
    "8": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Context.sol",
    "9": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/EnumerableSet.sol"
  },
  "ast": {
    "absolutePath": "contracts/NerveToken.sol",
    "exportedSymbols": {
      "NerveToken": [1644]
    },
    "id": 1645,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 977,
        "literals": ["solidity", "0.6", ".12"],
        "nodeType": "PragmaDirective",
        "src": "33:23:15"
      },
      {
        "absolutePath": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol",
        "id": 978,
        "nodeType": "ImportDirective",
        "scope": 1645,
        "sourceUnit": 8408,
        "src": "58:83:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 979,
        "nodeType": "ImportDirective",
        "scope": 1645,
        "sourceUnit": 6829,
        "src": "142:91:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/Ownable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/Ownable.sol",
        "id": 980,
        "nodeType": "ImportDirective",
        "scope": 1645,
        "sourceUnit": 6415,
        "src": "234:80:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/dylma/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/AccessControl.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/AccessControl.sol",
        "id": 981,
        "nodeType": "ImportDirective",
        "scope": 1645,
        "sourceUnit": 7905,
        "src": "315:86:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 982,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8407,
              "src": "458:5:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$8407",
                "typeString": "contract ERC20"
              }
            },
            "id": 983,
            "nodeType": "InheritanceSpecifier",
            "src": "458:5:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 984,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6828,
              "src": "465:13:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$6828",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 985,
            "nodeType": "InheritanceSpecifier",
            "src": "465:13:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 986,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6414,
              "src": "480:7:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$6414",
                "typeString": "contract Ownable"
              }
            },
            "id": 987,
            "nodeType": "InheritanceSpecifier",
            "src": "480:7:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 988,
              "name": "AccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7904,
              "src": "489:13:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControl_$7904",
                "typeString": "contract AccessControl"
              }
            },
            "id": 989,
            "nodeType": "InheritanceSpecifier",
            "src": "489:13:15"
          }
        ],
        "contractDependencies": [6414, 6828, 6916, 7904, 8407, 8562],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1644,
        "linearizedBaseContracts": [1644, 7904, 6414, 6828, 8407, 6916, 8562],
        "name": "NerveToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "functionSelector": "d5391393",
            "id": 994,
            "mutability": "constant",
            "name": "MINTER_ROLE",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "509:62:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 990,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "509:7:15",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "4d494e5445525f524f4c45",
                  "id": 992,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "557:13:15",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
                    "typeString": "literal_string \"MINTER_ROLE\""
                  },
                  "value": "MINTER_ROLE"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
                    "typeString": "literal_string \"MINTER_ROLE\""
                  }
                ],
                "id": 991,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "547:9:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 993,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "547:24:15",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1007,
              "nodeType": "Block",
              "src": "621:59:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1002,
                        "name": "DEFAULT_ADMIN_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7647,
                        "src": "642:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1003,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "662:3:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1004,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "662:10:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 1001,
                      "name": "_setupRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7830,
                      "src": "631:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 1005,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "631:42:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1006,
                  "nodeType": "ExpressionStatement",
                  "src": "631:42:15"
                }
              ]
            },
            "documentation": null,
            "id": 1008,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "4e65727665",
                    "id": 997,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "605:7:15",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_a34d254f75257988926bd865d4b6bb87d8e6be79a6a10227ba63ac89edfc554e",
                      "typeString": "literal_string \"Nerve\""
                    },
                    "value": "Nerve"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "4e5256",
                    "id": 998,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "614:5:15",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_38c441551b79f7d4f108a3e1aae5fe005c36458224b8fe19328de58bbca6a21b",
                      "typeString": "literal_string \"NRV\""
                    },
                    "value": "NRV"
                  }
                ],
                "id": 999,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 996,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 8407,
                  "src": "599:5:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$8407_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "599:21:15"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 995,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "589:2:15"
            },
            "returnParameters": {
              "id": 1000,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "621:0:15"
            },
            "scope": 1644,
            "src": "578:102:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1041,
              "nodeType": "Block",
              "src": "833:238:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1018,
                            "name": "MINTER_ROLE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 994,
                            "src": "922:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1019,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "935:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1020,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "935:10:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1017,
                          "name": "hasRole",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7693,
                          "src": "914:7:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (bytes32,address) view returns (bool)"
                          }
                        },
                        "id": 1021,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "914:32:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "43616c6c6572206973206e6f742061206d696e746572",
                        "id": 1022,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "948:24:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_71abfcf6e817aaed3ce6663958bac2a3a82999ed0036c98a95b29f350f04cedf",
                          "typeString": "literal_string \"Caller is not a minter\""
                        },
                        "value": "Caller is not a minter"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_71abfcf6e817aaed3ce6663958bac2a3a82999ed0036c98a95b29f350f04cedf",
                          "typeString": "literal_string \"Caller is not a minter\""
                        }
                      ],
                      "id": 1016,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "906:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "906:67:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1024,
                  "nodeType": "ExpressionStatement",
                  "src": "906:67:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1026,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1011,
                        "src": "989:3:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1027,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1013,
                        "src": "994:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1025,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8283,
                      "src": "983:5:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1028,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "983:19:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1029,
                  "nodeType": "ExpressionStatement",
                  "src": "983:19:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1033,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1035:1:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1027:7:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1031,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1027:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 1034,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1027:10:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 1035,
                          "name": "_delegates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1047,
                          "src": "1039:10:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                            "typeString": "mapping(address => address)"
                          }
                        },
                        "id": 1037,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 1036,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1011,
                          "src": "1050:3:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1039:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1038,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1013,
                        "src": "1056:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1030,
                      "name": "_moveDelegates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1534,
                      "src": "1012:14:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1039,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1012:52:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1040,
                  "nodeType": "ExpressionStatement",
                  "src": "1012:52:15"
                }
              ]
            },
            "documentation": {
              "id": 1009,
              "nodeType": "StructuredDocumentation",
              "src": "687:91:15",
              "text": "@notice Creates `_amount` token to `_to`. Must only be called by MINTER_ROLE addresses."
            },
            "functionSelector": "40c10f19",
            "id": 1042,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1014,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1011,
                  "mutability": "mutable",
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1042,
                  "src": "797:11:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1010,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1013,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1042,
                  "src": "810:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1012,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "810:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "796:30:15"
            },
            "returnParameters": {
              "id": 1015,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "833:0:15"
            },
            "scope": 1644,
            "src": "783:288:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1043,
              "nodeType": "StructuredDocumentation",
              "src": "1475:43:15",
              "text": "@dev A record of each accounts delegate"
            },
            "id": 1047,
            "mutability": "mutable",
            "name": "_delegates",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "1523:48:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 1046,
              "keyType": {
                "id": 1044,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1532:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1523:28:15",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 1045,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1543:7:15",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "canonicalName": "NerveToken.Checkpoint",
            "id": 1052,
            "members": [
              {
                "constant": false,
                "id": 1049,
                "mutability": "mutable",
                "name": "fromBlock",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 1052,
                "src": "1682:16:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 1048,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1682:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1051,
                "mutability": "mutable",
                "name": "votes",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 1052,
                "src": "1708:13:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1050,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1708:7:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Checkpoint",
            "nodeType": "StructDefinition",
            "scope": 1644,
            "src": "1654:74:15",
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1053,
              "nodeType": "StructuredDocumentation",
              "src": "1734:68:15",
              "text": "@notice A record of votes checkpoints for each account, by index"
            },
            "functionSelector": "f1127ed8",
            "id": 1059,
            "mutability": "mutable",
            "name": "checkpoints",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "1807:70:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
              "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint))"
            },
            "typeName": {
              "id": 1058,
              "keyType": {
                "id": 1054,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1816:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1807:51:15",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint))"
              },
              "valueType": {
                "id": 1057,
                "keyType": {
                  "id": 1055,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1836:6:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "nodeType": "Mapping",
                "src": "1827:30:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                  "typeString": "mapping(uint32 => struct NerveToken.Checkpoint)"
                },
                "valueType": {
                  "contractScope": null,
                  "id": 1056,
                  "name": "Checkpoint",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1052,
                  "src": "1846:10:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Checkpoint_$1052_storage_ptr",
                    "typeString": "struct NerveToken.Checkpoint"
                  }
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1060,
              "nodeType": "StructuredDocumentation",
              "src": "1884:54:15",
              "text": "@notice The number of checkpoints for each account"
            },
            "functionSelector": "6fcfff45",
            "id": 1064,
            "mutability": "mutable",
            "name": "numCheckpoints",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "1943:49:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
              "typeString": "mapping(address => uint32)"
            },
            "typeName": {
              "id": 1063,
              "keyType": {
                "id": 1061,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1952:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1943:27:15",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                "typeString": "mapping(address => uint32)"
              },
              "valueType": {
                "id": 1062,
                "name": "uint32",
                "nodeType": "ElementaryTypeName",
                "src": "1963:6:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": true,
            "documentation": {
              "id": 1065,
              "nodeType": "StructuredDocumentation",
              "src": "1999:58:15",
              "text": "@notice The EIP-712 typehash for the contract's domain"
            },
            "functionSelector": "20606b70",
            "id": 1070,
            "mutability": "constant",
            "name": "DOMAIN_TYPEHASH",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "2062:122:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 1066,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2062:7:15",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "454950373132446f6d61696e28737472696e67206e616d652c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
                  "id": 1068,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2114:69:15",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866",
                    "typeString": "literal_string \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\""
                  },
                  "value": "EIP712Domain(string name,uint256 chainId,address verifyingContract)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866",
                    "typeString": "literal_string \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\""
                  }
                ],
                "id": 1067,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "2104:9:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 1069,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2104:80:15",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "documentation": {
              "id": 1071,
              "nodeType": "StructuredDocumentation",
              "src": "2191:79:15",
              "text": "@notice The EIP-712 typehash for the delegation struct used by the contract"
            },
            "functionSelector": "e7a324dc",
            "id": 1076,
            "mutability": "constant",
            "name": "DELEGATION_TYPEHASH",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "2275:117:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 1072,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2275:7:15",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "44656c65676174696f6e28616464726573732064656c6567617465652c75696e74323536206e6f6e63652c75696e743235362065787069727929",
                  "id": 1074,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2331:60:15",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_e48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf",
                    "typeString": "literal_string \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\""
                  },
                  "value": "Delegation(address delegatee,uint256 nonce,uint256 expiry)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_e48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf",
                    "typeString": "literal_string \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\""
                  }
                ],
                "id": 1073,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "2321:9:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 1075,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2321:71:15",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1077,
              "nodeType": "StructuredDocumentation",
              "src": "2399:66:15",
              "text": "@notice A record of states for signing / validating signatures"
            },
            "functionSelector": "7ecebe00",
            "id": 1081,
            "mutability": "mutable",
            "name": "nonces",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1644,
            "src": "2470:39:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1080,
              "keyType": {
                "id": 1078,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2479:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2470:25:15",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1079,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "2490:4:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1082,
              "nodeType": "StructuredDocumentation",
              "src": "2518:71:15",
              "text": "@notice An event thats emitted when an account changes its delegate"
            },
            "id": 1090,
            "name": "DelegateChanged",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1084,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "delegator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1090,
                  "src": "2616:25:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1083,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2616:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1086,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "fromDelegate",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1090,
                  "src": "2643:28:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1085,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2643:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1088,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "toDelegate",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1090,
                  "src": "2673:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1087,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2673:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2615:85:15"
            },
            "src": "2594:107:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1091,
              "nodeType": "StructuredDocumentation",
              "src": "2707:81:15",
              "text": "@notice An event thats emitted when a delegate account's vote balance changes"
            },
            "id": 1099,
            "name": "DelegateVotesChanged",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1098,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1093,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "delegate",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1099,
                  "src": "2820:24:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1092,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2820:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1095,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "previousBalance",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1099,
                  "src": "2846:20:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1094,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2846:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1097,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newBalance",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1099,
                  "src": "2868:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1096,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2868:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2819:65:15"
            },
            "src": "2793:92:15"
          },
          {
            "body": {
              "id": 1111,
              "nodeType": "Block",
              "src": "3125:45:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1107,
                      "name": "_delegates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1047,
                      "src": "3142:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                        "typeString": "mapping(address => address)"
                      }
                    },
                    "id": 1109,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1108,
                      "name": "delegator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1102,
                      "src": "3153:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3142:21:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1106,
                  "id": 1110,
                  "nodeType": "Return",
                  "src": "3135:28:15"
                }
              ]
            },
            "documentation": {
              "id": 1100,
              "nodeType": "StructuredDocumentation",
              "src": "2891:131:15",
              "text": " @notice Delegate votes from `msg.sender` to `delegatee`\n @param delegator The address to get delegatee for"
            },
            "functionSelector": "587cde1e",
            "id": 1112,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delegates",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1102,
                  "mutability": "mutable",
                  "name": "delegator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1112,
                  "src": "3046:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1101,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3046:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3045:19:15"
            },
            "returnParameters": {
              "id": 1106,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1105,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1112,
                  "src": "3112:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1104,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3112:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3111:9:15"
            },
            "scope": 1644,
            "src": "3027:143:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1124,
              "nodeType": "Block",
              "src": "3354:56:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1119,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3381:3:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3381:10:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1121,
                        "name": "delegatee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1115,
                        "src": "3393:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1118,
                      "name": "_delegate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1427,
                      "src": "3371:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 1122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3371:32:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "functionReturnParameters": 1117,
                  "id": 1123,
                  "nodeType": "Return",
                  "src": "3364:39:15"
                }
              ]
            },
            "documentation": {
              "id": 1113,
              "nodeType": "StructuredDocumentation",
              "src": "3175:128:15",
              "text": " @notice Delegate votes from `msg.sender` to `delegatee`\n @param delegatee The address to delegate votes to"
            },
            "functionSelector": "5c19a95c",
            "id": 1125,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delegate",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1115,
                  "mutability": "mutable",
                  "name": "delegatee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1125,
                  "src": "3326:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1114,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3326:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3325:19:15"
            },
            "returnParameters": {
              "id": 1117,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3354:0:15"
            },
            "scope": 1644,
            "src": "3308:102:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1227,
              "nodeType": "Block",
              "src": "4006:961:15",
              "statements": [
                {
                  "assignments": [1142],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1142,
                      "mutability": "mutable",
                      "name": "domainSeparator",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1227,
                      "src": "4016:23:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1141,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4016:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1162,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1146,
                            "name": "DOMAIN_TYPEHASH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "4093:15:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 1150,
                                      "name": "name",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7965,
                                      "src": "4142:4:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                                        "typeString": "function () view returns (string memory)"
                                      }
                                    },
                                    "id": 1151,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4142:6:15",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 1149,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4136:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 1148,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4136:5:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": null,
                                      "typeString": null
                                    }
                                  }
                                },
                                "id": 1152,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4136:13:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 1147,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4126:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 1153,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4126:24:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1154,
                              "name": "getChainId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1643,
                              "src": "4168:10:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
                                "typeString": "function () pure returns (uint256)"
                              }
                            },
                            "id": 1155,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4168:12:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1158,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4206:4:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_NerveToken_$1644",
                                  "typeString": "contract NerveToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_NerveToken_$1644",
                                  "typeString": "contract NerveToken"
                                }
                              ],
                              "id": 1157,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4198:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1156,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4198:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4198:13:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1144,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4065:3:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1145,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4065:10:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1160,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4065:160:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1143,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4042:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4042:193:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4016:219:15"
                },
                {
                  "assignments": [1164],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1164,
                      "mutability": "mutable",
                      "name": "structHash",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1227,
                      "src": "4246:18:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1163,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4246:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1174,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1168,
                            "name": "DELEGATION_TYPEHASH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1076,
                            "src": "4318:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1169,
                            "name": "delegatee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1128,
                            "src": "4355:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1170,
                            "name": "nonce",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1130,
                            "src": "4382:5:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1171,
                            "name": "expiry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1132,
                            "src": "4405:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1166,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4290:3:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4290:10:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4290:135:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1165,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4267:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4267:168:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4246:189:15"
                },
                {
                  "assignments": [1176],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1176,
                      "mutability": "mutable",
                      "name": "digest",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1227,
                      "src": "4446:14:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1175,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4446:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1185,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "1901",
                            "id": 1180,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4520:10:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                              "typeString": "literal_string \"\u0019\u0001\""
                            },
                            "value": "\u0019\u0001"
                          },
                          {
                            "argumentTypes": null,
                            "id": 1181,
                            "name": "domainSeparator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1142,
                            "src": "4548:15:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1182,
                            "name": "structHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1164,
                            "src": "4581:10:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                              "typeString": "literal_string \"\u0019\u0001\""
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1178,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4486:3:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1179,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4486:16:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1183,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4486:119:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1177,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4463:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4463:152:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4446:169:15"
                },
                {
                  "assignments": [1187],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1187,
                      "mutability": "mutable",
                      "name": "signatory",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1227,
                      "src": "4626:17:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1186,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4626:7:15",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1194,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1189,
                        "name": "digest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1176,
                        "src": "4656:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1190,
                        "name": "v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1134,
                        "src": "4664:1:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1191,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1136,
                        "src": "4667:1:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1192,
                        "name": "s",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1138,
                        "src": "4670:1:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 1188,
                      "name": "ecrecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -6,
                      "src": "4646:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                      }
                    },
                    "id": 1193,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4646:26:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4626:46:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1196,
                          "name": "signatory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1187,
                          "src": "4690:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1199,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4711:1:15",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1198,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4703:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1197,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4703:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 1200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4703:10:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "4690:23:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e52563a3a64656c656761746542795369673a20696e76616c6964207369676e6174757265",
                        "id": 1202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4715:39:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1630ff94450d0f67ad0eec2a8272c38e86c541c61a722a8a60535e1df059a65",
                          "typeString": "literal_string \"NRV::delegateBySig: invalid signature\""
                        },
                        "value": "NRV::delegateBySig: invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1630ff94450d0f67ad0eec2a8272c38e86c541c61a722a8a60535e1df059a65",
                          "typeString": "literal_string \"NRV::delegateBySig: invalid signature\""
                        }
                      ],
                      "id": 1195,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "4682:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1203,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4682:73:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1204,
                  "nodeType": "ExpressionStatement",
                  "src": "4682:73:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1211,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1206,
                          "name": "nonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1130,
                          "src": "4773:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "4782:19:15",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1207,
                              "name": "nonces",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1081,
                              "src": "4782:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1209,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1208,
                              "name": "signatory",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1187,
                              "src": "4789:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4782:17:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4773:28:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e52563a3a64656c656761746542795369673a20696e76616c6964206e6f6e6365",
                        "id": 1212,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4803:35:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4b7966f67489ee5416609e287955804aeb8b70283114daf4475c87464274ac71",
                          "typeString": "literal_string \"NRV::delegateBySig: invalid nonce\""
                        },
                        "value": "NRV::delegateBySig: invalid nonce"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4b7966f67489ee5416609e287955804aeb8b70283114daf4475c87464274ac71",
                          "typeString": "literal_string \"NRV::delegateBySig: invalid nonce\""
                        }
                      ],
                      "id": 1205,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "4765:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1213,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4765:74:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1214,
                  "nodeType": "ExpressionStatement",
                  "src": "4765:74:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1218,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1216,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -17,
                          "src": "4857:3:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1217,
                          "name": "expiry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1132,
                          "src": "4864:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4857:13:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e52563a3a64656c656761746542795369673a207369676e61747572652065787069726564",
                        "id": 1219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4872:39:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_709bd3483faa58e69352bf4792e1ce4ff25b90fbc742f8fb957a7a91450f941d",
                          "typeString": "literal_string \"NRV::delegateBySig: signature expired\""
                        },
                        "value": "NRV::delegateBySig: signature expired"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_709bd3483faa58e69352bf4792e1ce4ff25b90fbc742f8fb957a7a91450f941d",
                          "typeString": "literal_string \"NRV::delegateBySig: signature expired\""
                        }
                      ],
                      "id": 1215,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "4849:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4849:63:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1221,
                  "nodeType": "ExpressionStatement",
                  "src": "4849:63:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1223,
                        "name": "signatory",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1187,
                        "src": "4939:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1224,
                        "name": "delegatee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1128,
                        "src": "4950:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1222,
                      "name": "_delegate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1427,
                      "src": "4929:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 1225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4929:31:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "functionReturnParameters": 1140,
                  "id": 1226,
                  "nodeType": "Return",
                  "src": "4922:38:15"
                }
              ]
            },
            "documentation": {
              "id": 1126,
              "nodeType": "StructuredDocumentation",
              "src": "3416:412:15",
              "text": " @notice Delegates votes from signatory to `delegatee`\n @param delegatee The address to delegate votes to\n @param nonce The contract state required to match the signature\n @param expiry The time at which to expire the signature\n @param v The recovery byte of the signature\n @param r Half of the ECDSA signature pair\n @param s Half of the ECDSA signature pair"
            },
            "functionSelector": "c3cda520",
            "id": 1228,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delegateBySig",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1128,
                  "mutability": "mutable",
                  "name": "delegatee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1228,
                  "src": "3865:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1127,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3865:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1130,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1228,
                  "src": "3892:10:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1129,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3892:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1132,
                  "mutability": "mutable",
                  "name": "expiry",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1228,
                  "src": "3912:11:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1131,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3912:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1134,
                  "mutability": "mutable",
                  "name": "v",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1228,
                  "src": "3933:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 1133,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "3933:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1136,
                  "mutability": "mutable",
                  "name": "r",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1228,
                  "src": "3950:9:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1135,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3950:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1138,
                  "mutability": "mutable",
                  "name": "s",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1228,
                  "src": "3969:9:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1137,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3969:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3855:129:15"
            },
            "returnParameters": {
              "id": 1140,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4006:0:15"
            },
            "scope": 1644,
            "src": "3833:1134:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1256,
              "nodeType": "Block",
              "src": "5263:146:15",
              "statements": [
                {
                  "assignments": [1237],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1237,
                      "mutability": "mutable",
                      "name": "nCheckpoints",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1256,
                      "src": "5273:19:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1236,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5273:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1241,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1238,
                      "name": "numCheckpoints",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1064,
                      "src": "5295:14:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                        "typeString": "mapping(address => uint32)"
                      }
                    },
                    "id": 1240,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1239,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1231,
                      "src": "5310:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5295:23:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5273:45:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "condition": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "id": 1244,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 1242,
                        "name": "nCheckpoints",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1237,
                        "src": "5335:12:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5350:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "5335:16:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1253,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5401:1:15",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "id": 1254,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "5335:67:15",
                    "trueExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1245,
                            "name": "checkpoints",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1059,
                            "src": "5354:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                              "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                            }
                          },
                          "id": 1247,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1246,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1231,
                            "src": "5366:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5354:20:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                            "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                          }
                        },
                        "id": 1251,
                        "indexExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 1250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1248,
                            "name": "nCheckpoints",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1237,
                            "src": "5375:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 1249,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5390:1:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5375:16:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5354:38:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                          "typeString": "struct NerveToken.Checkpoint storage ref"
                        }
                      },
                      "id": 1252,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "votes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1051,
                      "src": "5354:44:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1235,
                  "id": 1255,
                  "nodeType": "Return",
                  "src": "5328:74:15"
                }
              ]
            },
            "documentation": {
              "id": 1229,
              "nodeType": "StructuredDocumentation",
              "src": "4973:183:15",
              "text": " @notice Gets the current votes balance for `account`\n @param account The address to get votes balance\n @return The number of current votes for `account`"
            },
            "functionSelector": "b4b5ea57",
            "id": 1257,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCurrentVotes",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1232,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1231,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1257,
                  "src": "5186:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1230,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5186:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5185:17:15"
            },
            "returnParameters": {
              "id": 1235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1234,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1257,
                  "src": "5250:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1233,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5250:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5249:9:15"
            },
            "scope": 1644,
            "src": "5161:248:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1388,
              "nodeType": "Block",
              "src": "5949:1098:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1271,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1268,
                          "name": "blockNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1262,
                          "src": "5967:11:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1269,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "5981:5:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5981:12:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5967:26:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e52563a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e6564",
                        "id": 1272,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5995:40:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_12832bfa31fc14eaaca7148a8049fb9ce2d756b784b46fc8e6575fb86e7103f7",
                          "typeString": "literal_string \"NRV::getPriorVotes: not yet determined\""
                        },
                        "value": "NRV::getPriorVotes: not yet determined"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_12832bfa31fc14eaaca7148a8049fb9ce2d756b784b46fc8e6575fb86e7103f7",
                          "typeString": "literal_string \"NRV::getPriorVotes: not yet determined\""
                        }
                      ],
                      "id": 1267,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "5959:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5959:77:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1274,
                  "nodeType": "ExpressionStatement",
                  "src": "5959:77:15"
                },
                {
                  "assignments": [1276],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1276,
                      "mutability": "mutable",
                      "name": "nCheckpoints",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1388,
                      "src": "6047:19:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1275,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6047:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1280,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1277,
                      "name": "numCheckpoints",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1064,
                      "src": "6069:14:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                        "typeString": "mapping(address => uint32)"
                      }
                    },
                    "id": 1279,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1278,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1260,
                      "src": "6084:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6069:23:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6047:45:15"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    },
                    "id": 1283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1281,
                      "name": "nCheckpoints",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1276,
                      "src": "6106:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1282,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6122:1:15",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "6106:17:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1287,
                  "nodeType": "IfStatement",
                  "src": "6102:56:15",
                  "trueBody": {
                    "id": 1286,
                    "nodeType": "Block",
                    "src": "6125:33:15",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1284,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6146:1:15",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 1266,
                        "id": 1285,
                        "nodeType": "Return",
                        "src": "6139:8:15"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1288,
                            "name": "checkpoints",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1059,
                            "src": "6215:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                              "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                            }
                          },
                          "id": 1290,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1289,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1260,
                            "src": "6227:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6215:20:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                            "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                          }
                        },
                        "id": 1294,
                        "indexExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 1293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1291,
                            "name": "nCheckpoints",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1276,
                            "src": "6236:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 1292,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6251:1:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "6236:16:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6215:38:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                          "typeString": "struct NerveToken.Checkpoint storage ref"
                        }
                      },
                      "id": 1295,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "fromBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1049,
                      "src": "6215:48:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 1296,
                      "name": "blockNumber",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1262,
                      "src": "6267:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6215:63:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1308,
                  "nodeType": "IfStatement",
                  "src": "6211:145:15",
                  "trueBody": {
                    "id": 1307,
                    "nodeType": "Block",
                    "src": "6280:76:15",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 1298,
                                "name": "checkpoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1059,
                                "src": "6301:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                                }
                              },
                              "id": 1300,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1299,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1260,
                                "src": "6313:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6301:20:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                                "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                              }
                            },
                            "id": 1304,
                            "indexExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "id": 1303,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1301,
                                "name": "nCheckpoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1276,
                                "src": "6322:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 1302,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6337:1:15",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "6322:16:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6301:38:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                              "typeString": "struct NerveToken.Checkpoint storage ref"
                            }
                          },
                          "id": 1305,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "votes",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1051,
                          "src": "6301:44:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1266,
                        "id": 1306,
                        "nodeType": "Return",
                        "src": "6294:51:15"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1309,
                            "name": "checkpoints",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1059,
                            "src": "6414:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                              "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                            }
                          },
                          "id": 1311,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1310,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1260,
                            "src": "6426:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6414:20:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                            "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                          }
                        },
                        "id": 1313,
                        "indexExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6435:1:15",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6414:23:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                          "typeString": "struct NerveToken.Checkpoint storage ref"
                        }
                      },
                      "id": 1314,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "fromBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1049,
                      "src": "6414:33:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 1315,
                      "name": "blockNumber",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1262,
                      "src": "6450:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6414:47:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1320,
                  "nodeType": "IfStatement",
                  "src": "6410:86:15",
                  "trueBody": {
                    "id": 1319,
                    "nodeType": "Block",
                    "src": "6463:33:15",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6484:1:15",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 1266,
                        "id": 1318,
                        "nodeType": "Return",
                        "src": "6477:8:15"
                      }
                    ]
                  }
                },
                {
                  "assignments": [1322],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1322,
                      "mutability": "mutable",
                      "name": "lower",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1388,
                      "src": "6506:12:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1321,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6506:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1324,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 1323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6521:1:15",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6506:16:15"
                },
                {
                  "assignments": [1326],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1326,
                      "mutability": "mutable",
                      "name": "upper",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1388,
                      "src": "6532:12:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1325,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6532:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1330,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    },
                    "id": 1329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1327,
                      "name": "nCheckpoints",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1276,
                      "src": "6547:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 1328,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6562:1:15",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "6547:16:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6532:31:15"
                },
                {
                  "body": {
                    "id": 1379,
                    "nodeType": "Block",
                    "src": "6595:396:15",
                    "statements": [
                      {
                        "assignments": [1335],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1335,
                            "mutability": "mutable",
                            "name": "center",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 1379,
                            "src": "6609:13:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "typeName": {
                              "id": 1334,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6609:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1344,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          "id": 1343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1336,
                            "name": "upper",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1326,
                            "src": "6625:5:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1342,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "id": 1339,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1337,
                                    "name": "upper",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1326,
                                    "src": "6634:5:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 1338,
                                    "name": "lower",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1322,
                                    "src": "6642:5:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "src": "6634:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                }
                              ],
                              "id": 1340,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "6633:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "32",
                              "id": 1341,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6651:1:15",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "6633:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "6625:27:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6609:43:15"
                      },
                      {
                        "assignments": [1346],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1346,
                            "mutability": "mutable",
                            "name": "cp",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 1379,
                            "src": "6693:20:15",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$1052_memory_ptr",
                              "typeString": "struct NerveToken.Checkpoint"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 1345,
                              "name": "Checkpoint",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1052,
                              "src": "6693:10:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Checkpoint_$1052_storage_ptr",
                                "typeString": "struct NerveToken.Checkpoint"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1352,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1347,
                              "name": "checkpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1059,
                              "src": "6716:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                              }
                            },
                            "id": 1349,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1348,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1260,
                              "src": "6728:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6716:20:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                              "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                            }
                          },
                          "id": 1351,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1350,
                            "name": "center",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1335,
                            "src": "6737:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6716:28:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                            "typeString": "struct NerveToken.Checkpoint storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6693:51:15"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1353,
                              "name": "cp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1346,
                              "src": "6762:2:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Checkpoint_$1052_memory_ptr",
                                "typeString": "struct NerveToken.Checkpoint memory"
                              }
                            },
                            "id": 1354,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "fromBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1049,
                            "src": "6762:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1355,
                            "name": "blockNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1262,
                            "src": "6778:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6762:27:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1364,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1361,
                                "name": "cp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1346,
                                "src": "6849:2:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Checkpoint_$1052_memory_ptr",
                                  "typeString": "struct NerveToken.Checkpoint memory"
                                }
                              },
                              "id": 1362,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "fromBlock",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1049,
                              "src": "6849:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1363,
                              "name": "blockNumber",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1262,
                              "src": "6864:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6849:26:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "id": 1376,
                            "nodeType": "Block",
                            "src": "6930:51:15",
                            "statements": [
                              {
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1374,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "argumentTypes": null,
                                    "id": 1370,
                                    "name": "upper",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1326,
                                    "src": "6948:5:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    "id": 1373,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1371,
                                      "name": "center",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1335,
                                      "src": "6956:6:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "31",
                                      "id": 1372,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6965:1:15",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "6956:10:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "src": "6948:18:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "id": 1375,
                                "nodeType": "ExpressionStatement",
                                "src": "6948:18:15"
                              }
                            ]
                          },
                          "id": 1377,
                          "nodeType": "IfStatement",
                          "src": "6845:136:15",
                          "trueBody": {
                            "id": 1369,
                            "nodeType": "Block",
                            "src": "6877:47:15",
                            "statements": [
                              {
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1367,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "argumentTypes": null,
                                    "id": 1365,
                                    "name": "lower",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1322,
                                    "src": "6895:5:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "argumentTypes": null,
                                    "id": 1366,
                                    "name": "center",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1335,
                                    "src": "6903:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "src": "6895:14:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "id": 1368,
                                "nodeType": "ExpressionStatement",
                                "src": "6895:14:15"
                              }
                            ]
                          }
                        },
                        "id": 1378,
                        "nodeType": "IfStatement",
                        "src": "6758:223:15",
                        "trueBody": {
                          "id": 1360,
                          "nodeType": "Block",
                          "src": "6791:48:15",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1357,
                                  "name": "cp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1346,
                                  "src": "6816:2:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Checkpoint_$1052_memory_ptr",
                                    "typeString": "struct NerveToken.Checkpoint memory"
                                  }
                                },
                                "id": 1358,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "votes",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1051,
                                "src": "6816:8:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "functionReturnParameters": 1266,
                              "id": 1359,
                              "nodeType": "Return",
                              "src": "6809:15:15"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    },
                    "id": 1333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1331,
                      "name": "upper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1326,
                      "src": "6580:5:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 1332,
                      "name": "lower",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1322,
                      "src": "6588:5:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "src": "6580:13:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1380,
                  "nodeType": "WhileStatement",
                  "src": "6573:418:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 1381,
                          "name": "checkpoints",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1059,
                          "src": "7007:11:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                          }
                        },
                        "id": 1383,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 1382,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1260,
                          "src": "7019:7:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7007:20:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                          "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                        }
                      },
                      "id": 1385,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 1384,
                        "name": "lower",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1322,
                        "src": "7028:5:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "7007:27:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                        "typeString": "struct NerveToken.Checkpoint storage ref"
                      }
                    },
                    "id": 1386,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "votes",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 1051,
                    "src": "7007:33:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1266,
                  "id": 1387,
                  "nodeType": "Return",
                  "src": "7000:40:15"
                }
              ]
            },
            "documentation": {
              "id": 1258,
              "nodeType": "StructuredDocumentation",
              "src": "5415:411:15",
              "text": " @notice Determine the prior number of votes for an account as of a block number\n @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n @param account The address of the account to check\n @param blockNumber The block number to get the vote balance at\n @return The number of votes the account had as of the given block"
            },
            "functionSelector": "782d6fe1",
            "id": 1389,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getPriorVotes",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1260,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1389,
                  "src": "5854:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1259,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5854:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1262,
                  "mutability": "mutable",
                  "name": "blockNumber",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1389,
                  "src": "5871:16:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1261,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5871:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5853:35:15"
            },
            "returnParameters": {
              "id": 1266,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1265,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1389,
                  "src": "5936:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1264,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5936:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5935:9:15"
            },
            "scope": 1644,
            "src": "5831:1216:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1426,
              "nodeType": "Block",
              "src": "7131:349:15",
              "statements": [
                {
                  "assignments": [1397],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1397,
                      "mutability": "mutable",
                      "name": "currentDelegate",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1426,
                      "src": "7141:23:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1396,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7141:7:15",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1401,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1398,
                      "name": "_delegates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1047,
                      "src": "7167:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                        "typeString": "mapping(address => address)"
                      }
                    },
                    "id": 1400,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1399,
                      "name": "delegator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1391,
                      "src": "7178:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7167:21:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7141:47:15"
                },
                {
                  "assignments": [1403],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1403,
                      "mutability": "mutable",
                      "name": "delegatorBalance",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1426,
                      "src": "7198:24:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1402,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7198:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1407,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1405,
                        "name": "delegator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1391,
                        "src": "7235:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1404,
                      "name": "balanceOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8007,
                      "src": "7225:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view returns (uint256)"
                      }
                    },
                    "id": 1406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7225:20:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7198:47:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1412,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1408,
                        "name": "_delegates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1047,
                        "src": "7299:10:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                          "typeString": "mapping(address => address)"
                        }
                      },
                      "id": 1410,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 1409,
                        "name": "delegator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1391,
                        "src": "7310:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7299:21:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1411,
                      "name": "delegatee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1393,
                      "src": "7323:9:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7299:33:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1413,
                  "nodeType": "ExpressionStatement",
                  "src": "7299:33:15"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1415,
                        "name": "delegator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1391,
                        "src": "7364:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1416,
                        "name": "currentDelegate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1397,
                        "src": "7375:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1417,
                        "name": "delegatee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1393,
                        "src": "7392:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1414,
                      "name": "DelegateChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1090,
                      "src": "7348:15:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address)"
                      }
                    },
                    "id": 1418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7348:54:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1419,
                  "nodeType": "EmitStatement",
                  "src": "7343:59:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1421,
                        "name": "currentDelegate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1397,
                        "src": "7428:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1422,
                        "name": "delegatee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1393,
                        "src": "7445:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1423,
                        "name": "delegatorBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1403,
                        "src": "7456:16:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1420,
                      "name": "_moveDelegates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1534,
                      "src": "7413:14:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7413:60:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1425,
                  "nodeType": "ExpressionStatement",
                  "src": "7413:60:15"
                }
              ]
            },
            "documentation": null,
            "id": 1427,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_delegate",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1394,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1391,
                  "mutability": "mutable",
                  "name": "delegator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1427,
                  "src": "7072:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1390,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7072:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1393,
                  "mutability": "mutable",
                  "name": "delegatee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1427,
                  "src": "7091:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1392,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7091:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7071:38:15"
            },
            "returnParameters": {
              "id": 1395,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7131:0:15"
            },
            "scope": 1644,
            "src": "7053:427:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1533,
              "nodeType": "Block",
              "src": "7567:848:15",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1442,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 1438,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 1436,
                        "name": "srcRep",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1429,
                        "src": "7581:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "argumentTypes": null,
                        "id": 1437,
                        "name": "dstRep",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1431,
                        "src": "7591:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "7581:16:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1441,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 1439,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1433,
                        "src": "7601:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1440,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7610:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "7601:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "7581:30:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1532,
                  "nodeType": "IfStatement",
                  "src": "7577:832:15",
                  "trueBody": {
                    "id": 1531,
                    "nodeType": "Block",
                    "src": "7613:796:15",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1443,
                            "name": "srcRep",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1429,
                            "src": "7631:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1446,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7649:1:15",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1445,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7641:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1444,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7641:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1447,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7641:10:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "7631:20:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1486,
                        "nodeType": "IfStatement",
                        "src": "7627:379:15",
                        "trueBody": {
                          "id": 1485,
                          "nodeType": "Block",
                          "src": "7653:353:15",
                          "statements": [
                            {
                              "assignments": [1450],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1450,
                                  "mutability": "mutable",
                                  "name": "srcRepNum",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1485,
                                  "src": "7718:16:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "typeName": {
                                    "id": 1449,
                                    "name": "uint32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7718:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1454,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1451,
                                  "name": "numCheckpoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1064,
                                  "src": "7737:14:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                                    "typeString": "mapping(address => uint32)"
                                  }
                                },
                                "id": 1453,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1452,
                                  "name": "srcRep",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1429,
                                  "src": "7752:6:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7737:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "7718:41:15"
                            },
                            {
                              "assignments": [1456],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1456,
                                  "mutability": "mutable",
                                  "name": "srcRepOld",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1485,
                                  "src": "7777:17:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1455,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7777:7:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1470,
                              "initialValue": {
                                "argumentTypes": null,
                                "condition": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "id": 1459,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1457,
                                    "name": "srcRepNum",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1450,
                                    "src": "7797:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 1458,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7809:1:15",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "7797:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1468,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7856:1:15",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "id": 1469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "Conditional",
                                "src": "7797:60:15",
                                "trueExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 1460,
                                        "name": "checkpoints",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1059,
                                        "src": "7813:11:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                          "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                                        }
                                      },
                                      "id": 1462,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 1461,
                                        "name": "srcRep",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1429,
                                        "src": "7825:6:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "7813:19:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                                        "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                                      }
                                    },
                                    "id": 1466,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      },
                                      "id": 1465,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 1463,
                                        "name": "srcRepNum",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1450,
                                        "src": "7833:9:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint32",
                                          "typeString": "uint32"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "31",
                                        "id": 1464,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7845:1:15",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "7833:13:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "7813:34:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                                      "typeString": "struct NerveToken.Checkpoint storage ref"
                                    }
                                  },
                                  "id": 1467,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "votes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1051,
                                  "src": "7813:40:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "7777:80:15"
                            },
                            {
                              "assignments": [1472],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1472,
                                  "mutability": "mutable",
                                  "name": "srcRepNew",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1485,
                                  "src": "7875:17:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1471,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7875:7:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1477,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1475,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1433,
                                    "src": "7909:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1473,
                                    "name": "srcRepOld",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1456,
                                    "src": "7895:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1474,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 6618,
                                  "src": "7895:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1476,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7895:21:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "7875:41:15"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1479,
                                    "name": "srcRep",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1429,
                                    "src": "7951:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 1480,
                                    "name": "srcRepNum",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1450,
                                    "src": "7959:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 1481,
                                    "name": "srcRepOld",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1456,
                                    "src": "7970:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 1482,
                                    "name": "srcRepNew",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1472,
                                    "src": "7981:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1478,
                                  "name": "_writeCheckpoint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1607,
                                  "src": "7934:16:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint32_$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint256,uint256)"
                                  }
                                },
                                "id": 1483,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7934:57:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1484,
                              "nodeType": "ExpressionStatement",
                              "src": "7934:57:15"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1492,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1487,
                            "name": "dstRep",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1431,
                            "src": "8024:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1490,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8042:1:15",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1489,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8034:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1488,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8034:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1491,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8034:10:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "8024:20:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1530,
                        "nodeType": "IfStatement",
                        "src": "8020:379:15",
                        "trueBody": {
                          "id": 1529,
                          "nodeType": "Block",
                          "src": "8046:353:15",
                          "statements": [
                            {
                              "assignments": [1494],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1494,
                                  "mutability": "mutable",
                                  "name": "dstRepNum",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1529,
                                  "src": "8111:16:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "typeName": {
                                    "id": 1493,
                                    "name": "uint32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8111:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1498,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1495,
                                  "name": "numCheckpoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1064,
                                  "src": "8130:14:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                                    "typeString": "mapping(address => uint32)"
                                  }
                                },
                                "id": 1497,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1496,
                                  "name": "dstRep",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1431,
                                  "src": "8145:6:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8130:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8111:41:15"
                            },
                            {
                              "assignments": [1500],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1500,
                                  "mutability": "mutable",
                                  "name": "dstRepOld",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1529,
                                  "src": "8170:17:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1499,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8170:7:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1514,
                              "initialValue": {
                                "argumentTypes": null,
                                "condition": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  },
                                  "id": 1503,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1501,
                                    "name": "dstRepNum",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1494,
                                    "src": "8190:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 1502,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "8202:1:15",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "8190:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1512,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8249:1:15",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "id": 1513,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "Conditional",
                                "src": "8190:60:15",
                                "trueExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 1504,
                                        "name": "checkpoints",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1059,
                                        "src": "8206:11:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                          "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                                        }
                                      },
                                      "id": 1506,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 1505,
                                        "name": "dstRep",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1431,
                                        "src": "8218:6:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "8206:19:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                                        "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                                      }
                                    },
                                    "id": 1510,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      },
                                      "id": 1509,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 1507,
                                        "name": "dstRepNum",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1494,
                                        "src": "8226:9:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint32",
                                          "typeString": "uint32"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "31",
                                        "id": 1508,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8238:1:15",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "8226:13:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint32",
                                        "typeString": "uint32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "8206:34:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                                      "typeString": "struct NerveToken.Checkpoint storage ref"
                                    }
                                  },
                                  "id": 1511,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "votes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1051,
                                  "src": "8206:40:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8170:80:15"
                            },
                            {
                              "assignments": [1516],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1516,
                                  "mutability": "mutable",
                                  "name": "dstRepNew",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1529,
                                  "src": "8268:17:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1515,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8268:7:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1521,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1519,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1433,
                                    "src": "8302:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1517,
                                    "name": "dstRepOld",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1500,
                                    "src": "8288:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1518,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "add",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 6596,
                                  "src": "8288:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1520,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8288:21:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8268:41:15"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1523,
                                    "name": "dstRep",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1431,
                                    "src": "8344:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 1524,
                                    "name": "dstRepNum",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1494,
                                    "src": "8352:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 1525,
                                    "name": "dstRepOld",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1500,
                                    "src": "8363:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 1526,
                                    "name": "dstRepNew",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1516,
                                    "src": "8374:9:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint32",
                                      "typeString": "uint32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1522,
                                  "name": "_writeCheckpoint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1607,
                                  "src": "8327:16:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint32_$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint32,uint256,uint256)"
                                  }
                                },
                                "id": 1527,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8327:57:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1528,
                              "nodeType": "ExpressionStatement",
                              "src": "8327:57:15"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 1534,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_moveDelegates",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1434,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1429,
                  "mutability": "mutable",
                  "name": "srcRep",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1534,
                  "src": "7510:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1428,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7510:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1431,
                  "mutability": "mutable",
                  "name": "dstRep",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1534,
                  "src": "7526:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7526:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1433,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1534,
                  "src": "7542:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1432,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7542:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7509:48:15"
            },
            "returnParameters": {
              "id": 1435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7567:0:15"
            },
            "scope": 1644,
            "src": "7486:929:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1606,
              "nodeType": "Block",
              "src": "8582:524:15",
              "statements": [
                {
                  "assignments": [1546],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1546,
                      "mutability": "mutable",
                      "name": "blockNumber",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1606,
                      "src": "8592:18:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1545,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "8592:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1552,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1548,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "8620:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 1549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "8620:12:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e52563a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473",
                        "id": 1550,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8634:53:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1fa7aa876323ee1261c6c257f6a05875ce6f3a9d8f02018b62b9c11592f11efc",
                          "typeString": "literal_string \"NRV::_writeCheckpoint: block number exceeds 32 bits\""
                        },
                        "value": "NRV::_writeCheckpoint: block number exceeds 32 bits"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1fa7aa876323ee1261c6c257f6a05875ce6f3a9d8f02018b62b9c11592f11efc",
                          "typeString": "literal_string \"NRV::_writeCheckpoint: block number exceeds 32 bits\""
                        }
                      ],
                      "id": 1547,
                      "name": "safe32",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1631,
                      "src": "8613:6:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint32_$",
                        "typeString": "function (uint256,string memory) pure returns (uint32)"
                      }
                    },
                    "id": 1551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8613:75:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8592:96:15"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "id": 1555,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 1553,
                        "name": "nCheckpoints",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1538,
                        "src": "8703:12:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8718:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "8703:16:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "id": 1565,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1556,
                              "name": "checkpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1059,
                              "src": "8723:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                              }
                            },
                            "id": 1558,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1557,
                              "name": "delegatee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1536,
                              "src": "8735:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8723:22:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                              "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                            }
                          },
                          "id": 1562,
                          "indexExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1561,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1559,
                              "name": "nCheckpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1538,
                              "src": "8746:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 1560,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8761:1:15",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "8746:16:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8723:40:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                            "typeString": "struct NerveToken.Checkpoint storage ref"
                          }
                        },
                        "id": 1563,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "fromBlock",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1049,
                        "src": "8723:50:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "argumentTypes": null,
                        "id": 1564,
                        "name": "blockNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1546,
                        "src": "8777:11:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "src": "8723:65:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "8703:85:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1598,
                    "nodeType": "Block",
                    "src": "8878:155:15",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 1579,
                                "name": "checkpoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1059,
                                "src": "8892:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                                }
                              },
                              "id": 1582,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1580,
                                "name": "delegatee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1536,
                                "src": "8904:9:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8892:22:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                                "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                              }
                            },
                            "id": 1583,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1581,
                              "name": "nCheckpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1538,
                              "src": "8915:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "8892:36:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                              "typeString": "struct NerveToken.Checkpoint storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1585,
                                "name": "blockNumber",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1546,
                                "src": "8942:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 1586,
                                "name": "newVotes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1542,
                                "src": "8955:8:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1584,
                              "name": "Checkpoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1052,
                              "src": "8931:10:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Checkpoint_$1052_storage_ptr_$",
                                "typeString": "type(struct NerveToken.Checkpoint storage pointer)"
                              }
                            },
                            "id": 1587,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8931:33:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$1052_memory_ptr",
                              "typeString": "struct NerveToken.Checkpoint memory"
                            }
                          },
                          "src": "8892:72:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                            "typeString": "struct NerveToken.Checkpoint storage ref"
                          }
                        },
                        "id": 1589,
                        "nodeType": "ExpressionStatement",
                        "src": "8892:72:15"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1590,
                              "name": "numCheckpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1064,
                              "src": "8978:14:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint32_$",
                                "typeString": "mapping(address => uint32)"
                              }
                            },
                            "id": 1592,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1591,
                              "name": "delegatee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1536,
                              "src": "8993:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "8978:25:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            "id": 1595,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1593,
                              "name": "nCheckpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1538,
                              "src": "9006:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 1594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9021:1:15",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "9006:16:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "8978:44:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 1597,
                        "nodeType": "ExpressionStatement",
                        "src": "8978:44:15"
                      }
                    ]
                  },
                  "id": 1599,
                  "nodeType": "IfStatement",
                  "src": "8699:334:15",
                  "trueBody": {
                    "id": 1578,
                    "nodeType": "Block",
                    "src": "8790:82:15",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1567,
                                  "name": "checkpoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1059,
                                  "src": "8804:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$_$",
                                    "typeString": "mapping(address => mapping(uint32 => struct NerveToken.Checkpoint storage ref))"
                                  }
                                },
                                "id": 1572,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1568,
                                  "name": "delegatee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1536,
                                  "src": "8816:9:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8804:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_Checkpoint_$1052_storage_$",
                                  "typeString": "mapping(uint32 => struct NerveToken.Checkpoint storage ref)"
                                }
                              },
                              "id": 1573,
                              "indexExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                "id": 1571,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1569,
                                  "name": "nCheckpoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1538,
                                  "src": "8827:12:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 1570,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8842:1:15",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "8827:16:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8804:40:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Checkpoint_$1052_storage",
                                "typeString": "struct NerveToken.Checkpoint storage ref"
                              }
                            },
                            "id": 1574,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "votes",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1051,
                            "src": "8804:46:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1575,
                            "name": "newVotes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1542,
                            "src": "8853:8:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8804:57:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1577,
                        "nodeType": "ExpressionStatement",
                        "src": "8804:57:15"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1601,
                        "name": "delegatee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1536,
                        "src": "9069:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1602,
                        "name": "oldVotes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1540,
                        "src": "9080:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1603,
                        "name": "newVotes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1542,
                        "src": "9090:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1600,
                      "name": "DelegateVotesChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1099,
                      "src": "9048:20:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 1604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9048:51:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1605,
                  "nodeType": "EmitStatement",
                  "src": "9043:56:15"
                }
              ]
            },
            "documentation": null,
            "id": 1607,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_writeCheckpoint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1543,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1536,
                  "mutability": "mutable",
                  "name": "delegatee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1607,
                  "src": "8456:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1535,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8456:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1538,
                  "mutability": "mutable",
                  "name": "nCheckpoints",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1607,
                  "src": "8483:19:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1537,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8483:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1540,
                  "mutability": "mutable",
                  "name": "oldVotes",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1607,
                  "src": "8512:16:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8512:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1542,
                  "mutability": "mutable",
                  "name": "newVotes",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1607,
                  "src": "8538:16:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1541,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8538:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8446:114:15"
            },
            "returnParameters": {
              "id": 1544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8582:0:15"
            },
            "scope": 1644,
            "src": "8421:685:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1630,
              "nodeType": "Block",
              "src": "9195:75:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1621,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1617,
                          "name": "n",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1609,
                          "src": "9213:1:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_4294967296_by_1",
                            "typeString": "int_const 4294967296"
                          },
                          "id": 1620,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1618,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9217:1:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "3332",
                            "id": 1619,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9220:2:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "9217:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_4294967296_by_1",
                            "typeString": "int_const 4294967296"
                          }
                        },
                        "src": "9213:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1622,
                        "name": "errorMessage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1611,
                        "src": "9224:12:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1616,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "9205:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9205:32:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1624,
                  "nodeType": "ExpressionStatement",
                  "src": "9205:32:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1627,
                        "name": "n",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1609,
                        "src": "9261:1:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1626,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "9254:6:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint32_$",
                        "typeString": "type(uint32)"
                      },
                      "typeName": {
                        "id": 1625,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9254:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 1628,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9254:9:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "functionReturnParameters": 1615,
                  "id": 1629,
                  "nodeType": "Return",
                  "src": "9247:16:15"
                }
              ]
            },
            "documentation": null,
            "id": 1631,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "safe32",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1612,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1609,
                  "mutability": "mutable",
                  "name": "n",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1631,
                  "src": "9128:6:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1608,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9128:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1611,
                  "mutability": "mutable",
                  "name": "errorMessage",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1631,
                  "src": "9136:26:15",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1610,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "9136:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9127:36:15"
            },
            "returnParameters": {
              "id": 1615,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1614,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1631,
                  "src": "9187:6:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1613,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9187:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9186:8:15"
            },
            "scope": 1644,
            "src": "9112:158:15",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1642,
              "nodeType": "Block",
              "src": "9327:98:15",
              "statements": [
                {
                  "assignments": [1637],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1637,
                      "mutability": "mutable",
                      "name": "chainId",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1642,
                      "src": "9337:15:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1636,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9337:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1638,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9337:15:15"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "9371:24:15",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "9373:20:15",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "chainid",
                            "nodeType": "YulIdentifier",
                            "src": "9384:7:15"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9384:9:15"
                        },
                        "variableNames": [
                          {
                            "name": "chainId",
                            "nodeType": "YulIdentifier",
                            "src": "9373:7:15"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1637,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "9373:7:15",
                      "valueSize": 1
                    }
                  ],
                  "id": 1639,
                  "nodeType": "InlineAssembly",
                  "src": "9362:33:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1640,
                    "name": "chainId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1637,
                    "src": "9411:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1635,
                  "id": 1641,
                  "nodeType": "Return",
                  "src": "9404:14:15"
                }
              ]
            },
            "documentation": null,
            "id": 1643,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getChainId",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1632,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9295:2:15"
            },
            "returnParameters": {
              "id": 1635,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1634,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1643,
                  "src": "9321:4:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1633,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9321:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9320:6:15"
            },
            "scope": 1644,
            "src": "9276:149:15",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1645,
        "src": "435:8992:15"
      }
    ],
    "src": "33:9395:15"
  },
  "bytecode": "60806040523480156200001157600080fd5b50604051806040016040528060058152602001644e6572766560d81b8152506040518060400160405280600381526020016227292b60e91b81525081600390805190602001906200006492919062000215565b5080516200007a90600490602084019062000215565b50506005805460ff1916601217905550600062000096620000ff565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620000f960003362000103565b620002b1565b3390565b6200010f828262000113565b5050565b60008281526006602090815260409091206200013a918390620014d96200018e821b17901c565b156200010f576200014a620000ff565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001a5836001600160a01b038416620001ae565b90505b92915050565b6000620001bc8383620001fd565b620001f457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001a8565b506000620001a8565b60009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025857805160ff191683800117855562000288565b8280016001018555821562000288579182015b82811115620002885782518255916020019190600101906200026b565b50620002969291506200029a565b5090565b5b808211156200029657600081556001016200029b565b6123fe80620002c16000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806379cc679011610125578063b4b5ea57116100ad578063d547741f1161007c578063d547741f146106e4578063dd62ed3e14610710578063e7a324dc1461073e578063f1127ed814610746578063f2fde38b146107985761021c565b8063b4b5ea5714610652578063c3cda52014610678578063ca15c873146106bf578063d5391393146106dc5761021c565b806391d14854116100f457806391d14854146105be57806395d89b41146105ea578063a217fddf146105f2578063a457c2d7146105fa578063a9059cbb146106265761021c565b806379cc6790146105415780637ecebe001461056d5780638da5cb5b146105935780639010d07c1461059b5761021c565b806339509351116101a85780635c19a95c116101775780635c19a95c146104825780636fcfff45146104a857806370a08231146104e7578063715018a61461050d578063782d6fe1146105155761021c565b806339509351146103cb57806340c10f19146103f757806342966c6814610423578063587cde1e146104405761021c565b806323b872dd116101ef57806323b872dd14610300578063248a9ca3146103365780632f2ff15d14610353578063313ce5671461038157806336568abe1461039f5761021c565b806306fdde0314610221578063095ea7b31461029e57806318160ddd146102de57806320606b70146102f8575b600080fd5b6102296107be565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026357818101518382015260200161024b565b50505050905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ca600480360360408110156102b457600080fd5b506001600160a01b038135169060200135610854565b604080519115158252519081900360200190f35b6102e6610872565b60408051918252519081900360200190f35b6102e6610878565b6102ca6004803603606081101561031657600080fd5b506001600160a01b0381358116916020810135909116906040013561089c565b6102e66004803603602081101561034c57600080fd5b5035610923565b61037f6004803603604081101561036957600080fd5b50803590602001356001600160a01b0316610938565b005b6103896109a4565b6040805160ff9092168252519081900360200190f35b61037f600480360360408110156103b557600080fd5b50803590602001356001600160a01b03166109ad565b6102ca600480360360408110156103e157600080fd5b506001600160a01b038135169060200135610a0e565b61037f6004803603604081101561040d57600080fd5b506001600160a01b038135169060200135610a5c565b61037f6004803603602081101561043957600080fd5b5035610aff565b6104666004803603602081101561045657600080fd5b50356001600160a01b0316610b13565b604080516001600160a01b039092168252519081900360200190f35b61037f6004803603602081101561049857600080fd5b50356001600160a01b0316610b31565b6104ce600480360360208110156104be57600080fd5b50356001600160a01b0316610b3b565b6040805163ffffffff9092168252519081900360200190f35b6102e6600480360360208110156104fd57600080fd5b50356001600160a01b0316610b53565b61037f610b6e565b6102e66004803603604081101561052b57600080fd5b506001600160a01b038135169060200135610c32565b61037f6004803603604081101561055757600080fd5b506001600160a01b038135169060200135610e3a565b6102e66004803603602081101561058357600080fd5b50356001600160a01b0316610e94565b610466610ea6565b610466600480360360408110156105b157600080fd5b5080359060200135610eba565b6102ca600480360360408110156105d457600080fd5b50803590602001356001600160a01b0316610ed9565b610229610ef1565b6102e6610f52565b6102ca6004803603604081101561061057600080fd5b506001600160a01b038135169060200135610f57565b6102ca6004803603604081101561063c57600080fd5b506001600160a01b038135169060200135610fbf565b6102e66004803603602081101561066857600080fd5b50356001600160a01b0316610fd3565b61037f600480360360c081101561068e57600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a00135611036565b6102e6600480360360208110156106d557600080fd5b50356112a9565b6102e66112c0565b61037f600480360360408110156106fa57600080fd5b50803590602001356001600160a01b03166112e4565b6102e66004803603604081101561072657600080fd5b506001600160a01b038135811691602001351661133d565b6102e6611368565b6107786004803603604081101561075c57600080fd5b5080356001600160a01b0316906020013563ffffffff1661138c565b6040805163ffffffff909316835260208301919091528051918290030190f35b61037f600480360360208110156107ae57600080fd5b50356001600160a01b03166113b9565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561084a5780601f1061081f5761010080835404028352916020019161084a565b820191906000526020600020905b81548152906001019060200180831161082d57829003601f168201915b5050505050905090565b60006108686108616114ee565b84846114f2565b5060015b92915050565b60025490565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b60006108a98484846115de565b610919846108b56114ee565b6109148560405180606001604052806028815260200161229a602891396001600160a01b038a166000908152600160205260408120906108f36114ee565b6001600160a01b031681526020810191909152604001600020549190611739565b6114f2565b5060019392505050565b60009081526006602052604090206002015490565b60008281526006602052604090206002015461095b906109566114ee565b610ed9565b6109965760405162461bcd60e51b815260040180806020018281038252602f81526020018061210c602f913960400191505060405180910390fd5b6109a082826117d0565b5050565b60055460ff1690565b6109b56114ee565b6001600160a01b0316816001600160a01b031614610a045760405162461bcd60e51b815260040180806020018281038252602f81526020018061239a602f913960400191505060405180910390fd5b6109a08282611839565b6000610868610a1b6114ee565b846109148560016000610a2c6114ee565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906118a2565b610a867f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610ed9565b610ad0576040805162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba10309036b4b73a32b960511b604482015290519081900360640190fd5b610ada82826118fc565b6001600160a01b038083166000908152600760205260408120546109a09216836119ec565b610b10610b0a6114ee565b82611b29565b50565b6001600160a01b039081166000908152600760205260409020541690565b610b103382611c25565b60096020526000908152604090205463ffffffff1681565b6001600160a01b031660009081526020819052604090205490565b610b766114ee565b6001600160a01b0316610b87610ea6565b6001600160a01b031614610be2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6000438210610c725760405162461bcd60e51b815260040180806020018281038252602681526020018061213b6026913960400191505060405180910390fd5b6001600160a01b03831660009081526009602052604090205463ffffffff1680610ca057600091505061086c565b6001600160a01b038416600090815260086020908152604080832063ffffffff600019860181168552925290912054168310610d0f576001600160a01b03841660009081526008602090815260408083206000199490940163ffffffff1683529290522060010154905061086c565b6001600160a01b038416600090815260086020908152604080832083805290915290205463ffffffff16831015610d4a57600091505061086c565b600060001982015b8163ffffffff168163ffffffff161115610e0357600282820363ffffffff16048103610d7c6120af565b506001600160a01b038716600090815260086020908152604080832063ffffffff808616855290835292819020815180830190925280549093168082526001909301549181019190915290871415610dde5760200151945061086c9350505050565b805163ffffffff16871115610df557819350610dfc565b6001820392505b5050610d52565b506001600160a01b038516600090815260086020908152604080832063ffffffff9094168352929052206001015491505092915050565b6000610e71826040518060600160405280602481526020016122c260249139610e6a86610e656114ee565b61133d565b9190611739565b9050610e8583610e7f6114ee565b836114f2565b610e8f8383611b29565b505050565b600a6020526000908152604090205481565b60055461010090046001600160a01b031690565b6000828152600660205260408120610ed29083611cba565b9392505050565b6000828152600660205260408120610ed29083611cc6565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561084a5780601f1061081f5761010080835404028352916020019161084a565b600081565b6000610868610f646114ee565b84610914856040518060600160405280602581526020016123756025913960016000610f8e6114ee565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611739565b6000610868610fcc6114ee565b84846115de565b6001600160a01b03811660009081526009602052604081205463ffffffff1680610ffe576000610ed2565b6001600160a01b038316600090815260086020908152604080832063ffffffff60001986011684529091529020600101549392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666110616107be565b80519060200120611070611cdb565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a9052825180850390910181526101408401835280519085012061190160f01b6101608501526101628401829052610182808501829052835180860390910181526101a285018085528151918701919091206000918290526101c2860180865281905260ff8b166101e287015261020286018a90526102228601899052935192965090949293909260019261024280840193601f198301929081900390910190855afa1580156111a3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111f55760405162461bcd60e51b81526004018080602001828103825260258152602001806122e66025913960400191505060405180910390fd5b6001600160a01b0381166000908152600a6020526040902080546001810190915589146112535760405162461bcd60e51b81526004018080602001828103825260218152602001806122246021913960400191505060405180910390fd5b874211156112925760405162461bcd60e51b81526004018080602001828103825260258152602001806122756025913960400191505060405180910390fd5b61129c818b611c25565b505050505b505050505050565b600081815260066020526040812061086c90611cdf565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b600082815260066020526040902060020154611302906109566114ee565b610a045760405162461bcd60e51b81526004018080602001828103825260308152602001806122456030913960400191505060405180910390fd5b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b60086020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b6113c16114ee565b6001600160a01b03166113d2610ea6565b6001600160a01b03161461142d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166114725760405162461bcd60e51b81526004018080602001828103825260268152602001806121b66026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000610ed2836001600160a01b038416611cea565b3390565b6001600160a01b0383166115375760405162461bcd60e51b81526004018080602001828103825260248152602001806123516024913960400191505060405180910390fd5b6001600160a01b03821661157c5760405162461bcd60e51b81526004018080602001828103825260228152602001806121dc6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166116235760405162461bcd60e51b815260040180806020018281038252602581526020018061232c6025913960400191505060405180910390fd5b6001600160a01b0382166116685760405162461bcd60e51b81526004018080602001828103825260238152602001806120e96023913960400191505060405180910390fd5b611673838383610e8f565b6116b0816040518060600160405280602681526020016121fe602691396001600160a01b0386166000908152602081905260409020549190611739565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546116df90826118a2565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156117c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561178d578181015183820152602001611775565b50505050905090810190601f1680156117ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008281526006602052604090206117e890826114d9565b156109a0576117f56114ee565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602052604090206118519082611d34565b156109a05761185e6114ee565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082820183811015610ed2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216611957576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61196360008383610e8f565b60025461197090826118a2565b6002556001600160a01b03821660009081526020819052604090205461199690826118a2565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b816001600160a01b0316836001600160a01b031614158015611a0e5750600081115b15610e8f576001600160a01b03831615611aa0576001600160a01b03831660009081526009602052604081205463ffffffff169081611a4e576000611a80565b6001600160a01b038516600090815260086020908152604080832063ffffffff60001987011684529091529020600101545b90506000611a8e8285611d49565b9050611a9c86848484611da6565b5050505b6001600160a01b03821615610e8f576001600160a01b03821660009081526009602052604081205463ffffffff169081611adb576000611b0d565b6001600160a01b038416600090815260086020908152604080832063ffffffff60001987011684529091529020600101545b90506000611b1b82856118a2565b90506112a185848484611da6565b6001600160a01b038216611b6e5760405162461bcd60e51b815260040180806020018281038252602181526020018061230b6021913960400191505060405180910390fd5b611b7a82600083610e8f565b611bb781604051806060016040528060228152602001612161602291396001600160a01b0385166000908152602081905260409020549190611739565b6001600160a01b038316600090815260208190526040902055600254611bdd9082611d49565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b0380831660009081526007602052604081205490911690611c4c84610b53565b6001600160a01b0385811660008181526007602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611cb48284836119ec565b50505050565b6000610ed28383611f0b565b6000610ed2836001600160a01b038416611f6f565b4690565b600061086c82611f87565b6000611cf68383611f6f565b611d2c5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561086c565b50600061086c565b6000610ed2836001600160a01b038416611f8b565b600082821115611da0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611dca4360405180606001604052806033815260200161218360339139612051565b905060008463ffffffff16118015611e1357506001600160a01b038516600090815260086020908152604080832063ffffffff6000198901811685529252909120548282169116145b15611e50576001600160a01b038516600090815260086020908152604080832063ffffffff60001989011684529091529020600101829055611ec1565b60408051808201825263ffffffff808416825260208083018681526001600160a01b038a166000818152600884528681208b8616825284528681209551865490861663ffffffff19918216178755925160019687015590815260099092529390208054928801909116919092161790555b604080518481526020810184905281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b81546000908210611f4d5760405162461bcd60e51b81526004018080602001828103825260228152602001806120c76022913960400191505060405180910390fd5b826000018281548110611f5c57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156120475783546000198083019190810190600090879083908110611fbe57fe5b9060005260206000200154905080876000018481548110611fdb57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061200b57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061086c565b600091505061086c565b60008164010000000084106120a75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561178d578181015183820152602001611775565b509192915050565b60408051808201909152600080825260208201529056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744e52563a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e656445524332303a206275726e20616d6f756e7420657863656564732062616c616e63654e52563a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654e52563a3a64656c656761746542795369673a20696e76616c6964206e6f6e6365416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654e52563a3a64656c656761746542795369673a207369676e6174757265206578706972656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63654e52563a3a64656c656761746542795369673a20696e76616c6964207369676e617475726545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220f95623d862732755e0700d19a881fba0e110bdf5e81bd9a3459a15a7d0c094e664736f6c634300060c0033",
  "bytecodeSha1": "0de7f1c12d3e9ec25f66edf0d98701167b7bf3bc",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "NerveToken",
  "coverageMap": {
    "branches": {
      "0": {
        "AccessControl._grantRole": {
          "131": [7098, 7131, false]
        },
        "AccessControl._revokeRole": {
          "132": [7289, 7325, false]
        },
        "AccessControl.grantRole": {
          "128": [4727, 4772, true]
        },
        "AccessControl.renounceRole": {
          "129": [5904, 5927, true]
        },
        "AccessControl.revokeRole": {
          "130": [5185, 5230, true]
        }
      },
      "1": {
        "Ownable.transferOwnership": {
          "142": [1297, 1320, true],
          "143": [2099, 2121, true]
        }
      },
      "15": {
        "NerveToken._moveDelegates": {
          "119": [7581, 7597, false],
          "120": [7601, 7611, false],
          "121": [7631, 7651, false],
          "122": [7797, 7810, true],
          "123": [8024, 8044, false],
          "124": [8190, 8203, true]
        },
        "NerveToken._writeCheckpoint": {
          "125": [8703, 8719, false],
          "126": [8723, 8788, false]
        },
        "NerveToken.delegateBySig": {
          "116": [4690, 4713, true],
          "117": [4773, 4801, true],
          "118": [4857, 4870, true]
        },
        "NerveToken.getCurrentVotes": {
          "115": [5335, 5351, true]
        },
        "NerveToken.getPriorVotes": {
          "109": [5967, 5993, true],
          "110": [6106, 6123, false],
          "111": [6215, 6278, false],
          "112": [6414, 6461, false],
          "113": [6762, 6789, false],
          "114": [6849, 6875, false]
        },
        "NerveToken.mint": {
          "108": [914, 946, true]
        },
        "NerveToken.safe32": {
          "127": [9213, 9222, true]
        }
      },
      "2": {
        "SafeMath.add": {
          "145": [2802, 2808, true]
        },
        "SafeMath.sub": {
          "144": [5545, 5551, true],
          "146": [3221, 3227, true]
        }
      },
      "3": {
        "ERC20._approve": {
          "133": [9456, 9475, true],
          "134": [9534, 9555, true]
        },
        "ERC20._burn": {
          "138": [8605, 8626, true]
        },
        "ERC20._mint": {
          "137": [7915, 7936, true]
        },
        "ERC20._transfer": {
          "135": [7136, 7156, true],
          "136": [7216, 7239, true]
        }
      },
      "4": {},
      "5": {},
      "7": {},
      "8": {},
      "9": {
        "EnumerableSet._add": {
          "139": [1724, 1745, false]
        },
        "EnumerableSet._at": {
          "140": [4546, 4572, true]
        },
        "EnumerableSet._remove": {
          "141": [2449, 2464, false]
        }
      }
    },
    "statements": {
      "0": {
        "AccessControl._grantRole": {
          "64": [7147, 7192]
        },
        "AccessControl._revokeRole": {
          "65": [7341, 7386]
        },
        "AccessControl.getRoleAdmin": {
          "7": [4358, 4387]
        },
        "AccessControl.getRoleMember": {
          "34": [4057, 4094]
        },
        "AccessControl.getRoleMemberCount": {
          "44": [3337, 3373]
        },
        "AccessControl.grantRole": {
          "8": [4719, 4824],
          "9": [4835, 4860]
        },
        "AccessControl.hasRole": {
          "35": [3035, 3080]
        },
        "AccessControl.renounceRole": {
          "11": [5896, 5979],
          "12": [5990, 6016]
        },
        "AccessControl.revokeRole": {
          "45": [5177, 5283]
        }
      },
      "1": {
        "Ownable.owner": {
          "33": [1150, 1163]
        },
        "Ownable.renounceOwnership": {
          "21": [1781, 1826],
          "22": [1836, 1855]
        },
        "Ownable.transferOwnership": {
          "47": [2091, 2164],
          "48": [2174, 2217],
          "49": [2227, 2244]
        }
      },
      "15": {
        "NerveToken._delegate": {
          "79": [7299, 7332],
          "80": [7343, 7402],
          "81": [7413, 7473]
        },
        "NerveToken._moveDelegates": {
          "72": [7934, 7991],
          "73": [8327, 8384]
        },
        "NerveToken._writeCheckpoint": {
          "92": [8804, 8861],
          "93": [8892, 8964],
          "94": [8978, 9022],
          "95": [9043, 9099]
        },
        "NerveToken.delegate": {
          "19": [3364, 3403]
        },
        "NerveToken.delegateBySig": {
          "40": [4682, 4755],
          "41": [4765, 4839],
          "42": [4849, 4912],
          "43": [4922, 4960]
        },
        "NerveToken.delegates": {
          "18": [3135, 3163]
        },
        "NerveToken.getCurrentVotes": {
          "39": [5328, 5402]
        },
        "NerveToken.getPriorVotes": {
          "23": [5959, 6036],
          "24": [6139, 6147],
          "25": [6294, 6345],
          "26": [6477, 6485],
          "27": [6809, 6824],
          "28": [6895, 6909],
          "29": [6948, 6966],
          "30": [7000, 7040]
        },
        "NerveToken.mint": {
          "14": [906, 973],
          "15": [983, 1002],
          "16": [1012, 1064]
        },
        "NerveToken.safe32": {
          "106": [9205, 9237],
          "107": [9247, 9263]
        }
      },
      "2": {
        "SafeMath.add": {
          "66": [2794, 2840]
        },
        "SafeMath.sub": {
          "62": [5537, 5566],
          "63": [5576, 5588],
          "90": [3213, 3262],
          "91": [3272, 3284]
        }
      },
      "3": {
        "ERC20._approve": {
          "52": [9448, 9516],
          "53": [9526, 9594],
          "54": [9605, 9641],
          "55": [9651, 9688]
        },
        "ERC20._burn": {
          "74": [8597, 8664],
          "75": [8675, 8724],
          "76": [8735, 8824],
          "77": [8834, 8873],
          "78": [8883, 8925]
        },
        "ERC20._mint": {
          "67": [7907, 7972],
          "68": [7983, 8032],
          "69": [8043, 8082],
          "70": [8092, 8143],
          "71": [8153, 8195]
        },
        "ERC20._transfer": {
          "56": [7128, 7198],
          "57": [7208, 7279],
          "58": [7290, 7337],
          "59": [7348, 7439],
          "60": [7449, 7504],
          "61": [7514, 7554]
        },
        "ERC20.allowance": {
          "46": [4065, 4099]
        },
        "ERC20.approve": {
          "1": [4343, 4382],
          "2": [4392, 4403]
        },
        "ERC20.balanceOf": {
          "20": [3492, 3517]
        },
        "ERC20.decimals": {
          "10": [3152, 3168]
        },
        "ERC20.decreaseAllowance": {
          "37": [6400, 6529]
        },
        "ERC20.increaseAllowance": {
          "13": [5693, 5776]
        },
        "ERC20.name": {
          "0": [2238, 2250]
        },
        "ERC20.symbol": {
          "36": [2442, 2456]
        },
        "ERC20.totalSupply": {
          "3": [3315, 3334]
        },
        "ERC20.transfer": {
          "38": [3829, 3871]
        },
        "ERC20.transferFrom": {
          "4": [4999, 5035],
          "5": [5045, 5166],
          "6": [5176, 5187]
        }
      },
      "4": {
        "ERC20Burnable.burn": {
          "17": [579, 606]
        },
        "ERC20Burnable.burnFrom": {
          "31": [1119, 1170],
          "32": [1180, 1202]
        }
      },
      "5": {},
      "7": {},
      "8": {
        "Context._msgSender": {
          "51": [678, 695]
        }
      },
      "9": {
        "EnumerableSet._add": {
          "85": [1761, 1784],
          "86": [1919, 1959],
          "87": [1973, 1984],
          "88": [2015, 2027]
        },
        "EnumerableSet._at": {
          "96": [4538, 4611],
          "97": [4621, 4646]
        },
        "EnumerableSet._contains": {
          "98": [3894, 3925]
        },
        "EnumerableSet._length": {
          "99": [4088, 4113]
        },
        "EnumerableSet._remove": {
          "100": [3274, 3312],
          "101": [3378, 3421],
          "102": [3527, 3544],
          "103": [3612, 3638],
          "104": [3653, 3664],
          "105": [3695, 3707]
        },
        "EnumerableSet.add": {
          "50": [6515, 6572]
        },
        "EnumerableSet.at": {
          "82": [7770, 7826]
        },
        "EnumerableSet.contains": {
          "83": [7080, 7142]
        },
        "EnumerableSet.length": {
          "84": [7312, 7338]
        },
        "EnumerableSet.remove": {
          "89": [6836, 6896]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@3.4.0/AccessControl",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Address",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Context",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/ERC20",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/ERC20Burnable",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/EnumerableSet",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Ownable",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061021c5760003560e01c806379cc679011610125578063b4b5ea57116100ad578063d547741f1161007c578063d547741f146106e4578063dd62ed3e14610710578063e7a324dc1461073e578063f1127ed814610746578063f2fde38b146107985761021c565b8063b4b5ea5714610652578063c3cda52014610678578063ca15c873146106bf578063d5391393146106dc5761021c565b806391d14854116100f457806391d14854146105be57806395d89b41146105ea578063a217fddf146105f2578063a457c2d7146105fa578063a9059cbb146106265761021c565b806379cc6790146105415780637ecebe001461056d5780638da5cb5b146105935780639010d07c1461059b5761021c565b806339509351116101a85780635c19a95c116101775780635c19a95c146104825780636fcfff45146104a857806370a08231146104e7578063715018a61461050d578063782d6fe1146105155761021c565b806339509351146103cb57806340c10f19146103f757806342966c6814610423578063587cde1e146104405761021c565b806323b872dd116101ef57806323b872dd14610300578063248a9ca3146103365780632f2ff15d14610353578063313ce5671461038157806336568abe1461039f5761021c565b806306fdde0314610221578063095ea7b31461029e57806318160ddd146102de57806320606b70146102f8575b600080fd5b6102296107be565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026357818101518382015260200161024b565b50505050905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ca600480360360408110156102b457600080fd5b506001600160a01b038135169060200135610854565b604080519115158252519081900360200190f35b6102e6610872565b60408051918252519081900360200190f35b6102e6610878565b6102ca6004803603606081101561031657600080fd5b506001600160a01b0381358116916020810135909116906040013561089c565b6102e66004803603602081101561034c57600080fd5b5035610923565b61037f6004803603604081101561036957600080fd5b50803590602001356001600160a01b0316610938565b005b6103896109a4565b6040805160ff9092168252519081900360200190f35b61037f600480360360408110156103b557600080fd5b50803590602001356001600160a01b03166109ad565b6102ca600480360360408110156103e157600080fd5b506001600160a01b038135169060200135610a0e565b61037f6004803603604081101561040d57600080fd5b506001600160a01b038135169060200135610a5c565b61037f6004803603602081101561043957600080fd5b5035610aff565b6104666004803603602081101561045657600080fd5b50356001600160a01b0316610b13565b604080516001600160a01b039092168252519081900360200190f35b61037f6004803603602081101561049857600080fd5b50356001600160a01b0316610b31565b6104ce600480360360208110156104be57600080fd5b50356001600160a01b0316610b3b565b6040805163ffffffff9092168252519081900360200190f35b6102e6600480360360208110156104fd57600080fd5b50356001600160a01b0316610b53565b61037f610b6e565b6102e66004803603604081101561052b57600080fd5b506001600160a01b038135169060200135610c32565b61037f6004803603604081101561055757600080fd5b506001600160a01b038135169060200135610e3a565b6102e66004803603602081101561058357600080fd5b50356001600160a01b0316610e94565b610466610ea6565b610466600480360360408110156105b157600080fd5b5080359060200135610eba565b6102ca600480360360408110156105d457600080fd5b50803590602001356001600160a01b0316610ed9565b610229610ef1565b6102e6610f52565b6102ca6004803603604081101561061057600080fd5b506001600160a01b038135169060200135610f57565b6102ca6004803603604081101561063c57600080fd5b506001600160a01b038135169060200135610fbf565b6102e66004803603602081101561066857600080fd5b50356001600160a01b0316610fd3565b61037f600480360360c081101561068e57600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a00135611036565b6102e6600480360360208110156106d557600080fd5b50356112a9565b6102e66112c0565b61037f600480360360408110156106fa57600080fd5b50803590602001356001600160a01b03166112e4565b6102e66004803603604081101561072657600080fd5b506001600160a01b038135811691602001351661133d565b6102e6611368565b6107786004803603604081101561075c57600080fd5b5080356001600160a01b0316906020013563ffffffff1661138c565b6040805163ffffffff909316835260208301919091528051918290030190f35b61037f600480360360208110156107ae57600080fd5b50356001600160a01b03166113b9565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561084a5780601f1061081f5761010080835404028352916020019161084a565b820191906000526020600020905b81548152906001019060200180831161082d57829003601f168201915b5050505050905090565b60006108686108616114ee565b84846114f2565b5060015b92915050565b60025490565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b60006108a98484846115de565b610919846108b56114ee565b6109148560405180606001604052806028815260200161229a602891396001600160a01b038a166000908152600160205260408120906108f36114ee565b6001600160a01b031681526020810191909152604001600020549190611739565b6114f2565b5060019392505050565b60009081526006602052604090206002015490565b60008281526006602052604090206002015461095b906109566114ee565b610ed9565b6109965760405162461bcd60e51b815260040180806020018281038252602f81526020018061210c602f913960400191505060405180910390fd5b6109a082826117d0565b5050565b60055460ff1690565b6109b56114ee565b6001600160a01b0316816001600160a01b031614610a045760405162461bcd60e51b815260040180806020018281038252602f81526020018061239a602f913960400191505060405180910390fd5b6109a08282611839565b6000610868610a1b6114ee565b846109148560016000610a2c6114ee565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906118a2565b610a867f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610ed9565b610ad0576040805162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba10309036b4b73a32b960511b604482015290519081900360640190fd5b610ada82826118fc565b6001600160a01b038083166000908152600760205260408120546109a09216836119ec565b610b10610b0a6114ee565b82611b29565b50565b6001600160a01b039081166000908152600760205260409020541690565b610b103382611c25565b60096020526000908152604090205463ffffffff1681565b6001600160a01b031660009081526020819052604090205490565b610b766114ee565b6001600160a01b0316610b87610ea6565b6001600160a01b031614610be2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6000438210610c725760405162461bcd60e51b815260040180806020018281038252602681526020018061213b6026913960400191505060405180910390fd5b6001600160a01b03831660009081526009602052604090205463ffffffff1680610ca057600091505061086c565b6001600160a01b038416600090815260086020908152604080832063ffffffff600019860181168552925290912054168310610d0f576001600160a01b03841660009081526008602090815260408083206000199490940163ffffffff1683529290522060010154905061086c565b6001600160a01b038416600090815260086020908152604080832083805290915290205463ffffffff16831015610d4a57600091505061086c565b600060001982015b8163ffffffff168163ffffffff161115610e0357600282820363ffffffff16048103610d7c6120af565b506001600160a01b038716600090815260086020908152604080832063ffffffff808616855290835292819020815180830190925280549093168082526001909301549181019190915290871415610dde5760200151945061086c9350505050565b805163ffffffff16871115610df557819350610dfc565b6001820392505b5050610d52565b506001600160a01b038516600090815260086020908152604080832063ffffffff9094168352929052206001015491505092915050565b6000610e71826040518060600160405280602481526020016122c260249139610e6a86610e656114ee565b61133d565b9190611739565b9050610e8583610e7f6114ee565b836114f2565b610e8f8383611b29565b505050565b600a6020526000908152604090205481565b60055461010090046001600160a01b031690565b6000828152600660205260408120610ed29083611cba565b9392505050565b6000828152600660205260408120610ed29083611cc6565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561084a5780601f1061081f5761010080835404028352916020019161084a565b600081565b6000610868610f646114ee565b84610914856040518060600160405280602581526020016123756025913960016000610f8e6114ee565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611739565b6000610868610fcc6114ee565b84846115de565b6001600160a01b03811660009081526009602052604081205463ffffffff1680610ffe576000610ed2565b6001600160a01b038316600090815260086020908152604080832063ffffffff60001986011684529091529020600101549392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666110616107be565b80519060200120611070611cdb565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a9052825180850390910181526101408401835280519085012061190160f01b6101608501526101628401829052610182808501829052835180860390910181526101a285018085528151918701919091206000918290526101c2860180865281905260ff8b166101e287015261020286018a90526102228601899052935192965090949293909260019261024280840193601f198301929081900390910190855afa1580156111a3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111f55760405162461bcd60e51b81526004018080602001828103825260258152602001806122e66025913960400191505060405180910390fd5b6001600160a01b0381166000908152600a6020526040902080546001810190915589146112535760405162461bcd60e51b81526004018080602001828103825260218152602001806122246021913960400191505060405180910390fd5b874211156112925760405162461bcd60e51b81526004018080602001828103825260258152602001806122756025913960400191505060405180910390fd5b61129c818b611c25565b505050505b505050505050565b600081815260066020526040812061086c90611cdf565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b600082815260066020526040902060020154611302906109566114ee565b610a045760405162461bcd60e51b81526004018080602001828103825260308152602001806122456030913960400191505060405180910390fd5b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b60086020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b6113c16114ee565b6001600160a01b03166113d2610ea6565b6001600160a01b03161461142d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166114725760405162461bcd60e51b81526004018080602001828103825260268152602001806121b66026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000610ed2836001600160a01b038416611cea565b3390565b6001600160a01b0383166115375760405162461bcd60e51b81526004018080602001828103825260248152602001806123516024913960400191505060405180910390fd5b6001600160a01b03821661157c5760405162461bcd60e51b81526004018080602001828103825260228152602001806121dc6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166116235760405162461bcd60e51b815260040180806020018281038252602581526020018061232c6025913960400191505060405180910390fd5b6001600160a01b0382166116685760405162461bcd60e51b81526004018080602001828103825260238152602001806120e96023913960400191505060405180910390fd5b611673838383610e8f565b6116b0816040518060600160405280602681526020016121fe602691396001600160a01b0386166000908152602081905260409020549190611739565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546116df90826118a2565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156117c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561178d578181015183820152602001611775565b50505050905090810190601f1680156117ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008281526006602052604090206117e890826114d9565b156109a0576117f56114ee565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602052604090206118519082611d34565b156109a05761185e6114ee565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082820183811015610ed2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216611957576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61196360008383610e8f565b60025461197090826118a2565b6002556001600160a01b03821660009081526020819052604090205461199690826118a2565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b816001600160a01b0316836001600160a01b031614158015611a0e5750600081115b15610e8f576001600160a01b03831615611aa0576001600160a01b03831660009081526009602052604081205463ffffffff169081611a4e576000611a80565b6001600160a01b038516600090815260086020908152604080832063ffffffff60001987011684529091529020600101545b90506000611a8e8285611d49565b9050611a9c86848484611da6565b5050505b6001600160a01b03821615610e8f576001600160a01b03821660009081526009602052604081205463ffffffff169081611adb576000611b0d565b6001600160a01b038416600090815260086020908152604080832063ffffffff60001987011684529091529020600101545b90506000611b1b82856118a2565b90506112a185848484611da6565b6001600160a01b038216611b6e5760405162461bcd60e51b815260040180806020018281038252602181526020018061230b6021913960400191505060405180910390fd5b611b7a82600083610e8f565b611bb781604051806060016040528060228152602001612161602291396001600160a01b0385166000908152602081905260409020549190611739565b6001600160a01b038316600090815260208190526040902055600254611bdd9082611d49565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b0380831660009081526007602052604081205490911690611c4c84610b53565b6001600160a01b0385811660008181526007602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611cb48284836119ec565b50505050565b6000610ed28383611f0b565b6000610ed2836001600160a01b038416611f6f565b4690565b600061086c82611f87565b6000611cf68383611f6f565b611d2c5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561086c565b50600061086c565b6000610ed2836001600160a01b038416611f8b565b600082821115611da0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611dca4360405180606001604052806033815260200161218360339139612051565b905060008463ffffffff16118015611e1357506001600160a01b038516600090815260086020908152604080832063ffffffff6000198901811685529252909120548282169116145b15611e50576001600160a01b038516600090815260086020908152604080832063ffffffff60001989011684529091529020600101829055611ec1565b60408051808201825263ffffffff808416825260208083018681526001600160a01b038a166000818152600884528681208b8616825284528681209551865490861663ffffffff19918216178755925160019687015590815260099092529390208054928801909116919092161790555b604080518481526020810184905281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b81546000908210611f4d5760405162461bcd60e51b81526004018080602001828103825260228152602001806120c76022913960400191505060405180910390fd5b826000018281548110611f5c57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156120475783546000198083019190810190600090879083908110611fbe57fe5b9060005260206000200154905080876000018481548110611fdb57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061200b57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061086c565b600091505061086c565b60008164010000000084106120a75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561178d578181015183820152602001611775565b509192915050565b60408051808201909152600080825260208201529056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744e52563a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e656445524332303a206275726e20616d6f756e7420657863656564732062616c616e63654e52563a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654e52563a3a64656c656761746542795369673a20696e76616c6964206e6f6e6365416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654e52563a3a64656c656761746542795369673a207369676e6174757265206578706972656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63654e52563a3a64656c656761746542795369673a20696e76616c6964207369676e617475726545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220f95623d862732755e0700d19a881fba0e110bdf5e81bd9a3459a15a7d0c094e664736f6c634300060c0033",
  "deployedSourceMap": "435:8992:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2168:89:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4244:166;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4244:166:3;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3235:106;;;:::i;:::-;;;;;;;;;;;;;;;;2062:122:15;;;:::i;4877:317:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4877:317:3;;;;;;;;;;;;;;;;;:::i;4282:112:0:-;;;;;;;;;;;;;;;;-1:-1:-1;4282:112:0;;:::i;4644:223::-;;;;;;;;;;;;;;;;-1:-1:-1;4644:223:0;;;;;;-1:-1:-1;;;;;4644:223:0;;:::i;:::-;;3086:89:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5818:205:0;;;;;;;;;;;;;;;;-1:-1:-1;5818:205:0;;;;;;-1:-1:-1;;;;;5818:205:0;;:::i;5589:215:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5589:215:3;;;;;;;;:::i;783:288:15:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;783:288:15;;;;;;;;:::i;524:89:4:-;;;;;;;;;;;;;;;;-1:-1:-1;524:89:4;;:::i;3027:143:15:-;;;;;;;;;;;;;;;;-1:-1:-1;3027:143:15;-1:-1:-1;;;;;3027:143:15;;:::i;:::-;;;;-1:-1:-1;;;;;3027:143:15;;;;;;;;;;;;;;3308:102;;;;;;;;;;;;;;;;-1:-1:-1;3308:102:15;-1:-1:-1;;;;;3308:102:15;;:::i;1943:49::-;;;;;;;;;;;;;;;;-1:-1:-1;1943:49:15;-1:-1:-1;;;;;1943:49:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;3399:125:3;;;;;;;;;;;;;;;;-1:-1:-1;3399:125:3;-1:-1:-1;;;;;3399:125:3;;:::i;1717:145:1:-;;;:::i;5831:1216:15:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5831:1216:15;;;;;;;;:::i;919:290:4:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;919:290:4;;;;;;;;:::i;2470:39:15:-;;;;;;;;;;;;;;;;-1:-1:-1;2470:39:15;-1:-1:-1;;;;;2470:39:15;;:::i;1085:85:1:-;;;:::i;3965:136:0:-;;;;;;;;;;;;;;;;-1:-1:-1;3965:136:0;;;;;;;:::i;2950:137::-;;;;;;;;;;;;;;;;-1:-1:-1;2950:137:0;;;;;;-1:-1:-1;;;;;2950:137:0;;:::i;2370:93:3:-;;;:::i;1727:49:0:-;;;:::i;6291:266:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6291:266:3;;;;;;;;:::i;3727:172::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3727:172:3;;;;;;;;:::i;5161:248:15:-;;;;;;;;;;;;;;;;-1:-1:-1;5161:248:15;-1:-1:-1;;;;;5161:248:15;;:::i;3833:1134::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3833:1134:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3255:125:0:-;;;;;;;;;;;;;;;;-1:-1:-1;3255:125:0;;:::i;509:62:15:-;;;:::i;5101:226:0:-;;;;;;;;;;;;;;;;-1:-1:-1;5101:226:0;;;;;;-1:-1:-1;;;;;5101:226:0;;:::i;3957:149:3:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3957:149:3;;;;;;;;;;:::i;2275:117:15:-;;;:::i;1807:70::-;;;;;;;;;;;;;;;;-1:-1:-1;1807:70:15;;-1:-1:-1;;;;;1807:70:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;2011:240:1;;;;;;;;;;;;;;;;-1:-1:-1;2011:240:1;-1:-1:-1;;;;;2011:240:1;;:::i;2168:89:3:-;2245:5;2238:12;;;;;;;;-1:-1:-1;;2238:12:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2213:13;;2238:12;;2245:5;;2238:12;;2245:5;2238:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2168:89;:::o;4244:166::-;4327:4;4343:39;4352:12;:10;:12::i;:::-;4366:7;4375:6;4343:8;:39::i;:::-;-1:-1:-1;4399:4:3;4244:166;;;;;:::o;3235:106::-;3322:12;;3235:106;:::o;2062:122:15:-;2104:80;2062:122;:::o;4877:317:3:-;4983:4;4999:36;5009:6;5017:9;5028:6;4999:9;:36::i;:::-;5045:121;5054:6;5062:12;:10;:12::i;:::-;5076:89;5114:6;5076:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5076:19:3;;;;;;:11;:19;;;;;;5096:12;:10;:12::i;:::-;-1:-1:-1;;;;;5076:33:3;;;;;;;;;;;;-1:-1:-1;5076:33:3;;;:89;:37;:89::i;:::-;5045:8;:121::i;:::-;-1:-1:-1;5183:4:3;4877:317;;;;;:::o;4282:112:0:-;4339:7;4365:12;;;:6;:12;;;;;:22;;;;4282:112::o;4644:223::-;4735:12;;;;:6;:12;;;;;:22;;;4727:45;;4759:12;:10;:12::i;:::-;4727:7;:45::i;:::-;4719:105;;;;-1:-1:-1;;;4719:105:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4835:25;4846:4;4852:7;4835:10;:25::i;:::-;4644:223;;:::o;3086:89:3:-;3159:9;;;;3086:89;:::o;5818:205:0:-;5915:12;:10;:12::i;:::-;-1:-1:-1;;;;;5904:23:0;:7;-1:-1:-1;;;;;5904:23:0;;5896:83;;;;-1:-1:-1;;;5896:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5990:26;6002:4;6008:7;5990:11;:26::i;5589:215:3:-;5677:4;5693:83;5702:12;:10;:12::i;:::-;5716:7;5725:50;5764:10;5725:11;:25;5737:12;:10;:12::i;:::-;-1:-1:-1;;;;;5725:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;5725:25:3;;;:34;;;;;;;;;;;:38;:50::i;783:288:15:-;914:32;547:24;935:10;914:7;:32::i;:::-;906:67;;;;;-1:-1:-1;;;906:67:15;;;;;;;;;;;;-1:-1:-1;;;906:67:15;;;;;;;;;;;;;;;983:19;989:3;994:7;983:5;:19::i;:::-;-1:-1:-1;;;;;1039:15:15;;;1035:1;1039:15;;;:10;:15;;;;;;1012:52;;1039:15;1056:7;1012:14;:52::i;524:89:4:-;579:27;585:12;:10;:12::i;:::-;599:6;579:5;:27::i;:::-;524:89;:::o;3027:143:15:-;-1:-1:-1;;;;;3142:21:15;;;3112:7;3142:21;;;:10;:21;;;;;;;;3027:143::o;3308:102::-;3371:32;3381:10;3393:9;3371;:32::i;1943:49::-;;;;;;;;;;;;;;;:::o;3399:125:3:-;-1:-1:-1;;;;;3499:18:3;3473:7;3499:18;;;;;;;;;;;;3399:125::o;1717:145:1:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:1;;1289:68;;;;;-1:-1:-1;;;1289:68:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1807:6:::1;::::0;1786:40:::1;::::0;1823:1:::1;::::0;1807:6:::1;::::0;::::1;-1:-1:-1::0;;;;;1807:6:1::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1836:6;:19:::0;;-1:-1:-1;;;;;;1836:19:1::1;::::0;;1717:145::o;5831:1216:15:-;5936:7;5981:12;5967:11;:26;5959:77;;;;-1:-1:-1;;;5959:77:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6069:23:15;;6047:19;6069:23;;;:14;:23;;;;;;;;6106:17;6102:56;;6146:1;6139:8;;;;;6102:56;-1:-1:-1;;;;;6215:20:15;;;;;;:11;:20;;;;;;;;:38;-1:-1:-1;;6236:16:15;;6215:38;;;;;;;;;:48;;:63;-1:-1:-1;6211:145:15;;-1:-1:-1;;;;;6301:20:15;;;;;;:11;:20;;;;;;;;-1:-1:-1;;6322:16:15;;;;6301:38;;;;;;;;6337:1;6301:44;;;-1:-1:-1;6294:51:15;;6211:145;-1:-1:-1;;;;;6414:20:15;;;;;;:11;:20;;;;;;;;:23;;;;;;;;:33;:23;:33;:47;-1:-1:-1;6410:86:15;;;6484:1;6477:8;;;;;6410:86;6506:12;-1:-1:-1;;6547:16:15;;6573:418;6588:5;6580:13;;:5;:13;;;6573:418;;;6651:1;6634:13;;;6633:19;;;6625:27;;6693:20;;:::i;:::-;-1:-1:-1;;;;;;6716:20:15;;;;;;:11;:20;;;;;;;;:28;;;;;;;;;;;;;6693:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6762:27;;6758:223;;;6816:8;;;;-1:-1:-1;6809:15:15;;-1:-1:-1;;;;6809:15:15;6758:223;6849:12;;:26;;;-1:-1:-1;6845:136:15;;;6903:6;6895:14;;6845:136;;;6965:1;6956:6;:10;6948:18;;6845:136;6573:418;;;;;-1:-1:-1;;;;;;7007:20:15;;;;;;:11;:20;;;;;;;;:27;;;;;;;;;;:33;;;;-1:-1:-1;;5831:1216:15;;;;:::o;919:290:4:-;995:26;1024:84;1061:6;1024:84;;;;;;;;;;;;;;;;;:32;1034:7;1043:12;:10;:12::i;:::-;1024:9;:32::i;:::-;:36;:84;:36;:84::i;:::-;995:113;;1119:51;1128:7;1137:12;:10;:12::i;:::-;1151:18;1119:8;:51::i;:::-;1180:22;1186:7;1195:6;1180:5;:22::i;:::-;919:290;;;:::o;2470:39:15:-;;;;;;;;;;;;;:::o;1085:85:1:-;1157:6;;;;;-1:-1:-1;;;;;1157:6:1;;1085:85::o;3965:136:0:-;4038:7;4064:12;;;:6;:12;;;;;:30;;4088:5;4064:23;:30::i;:::-;4057:37;3965:136;-1:-1:-1;;;3965:136:0:o;2950:137::-;3019:4;3042:12;;;:6;:12;;;;;:38;;3072:7;3042:29;:38::i;2370:93:3:-;2449:7;2442:14;;;;;;;;-1:-1:-1;;2442:14:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2417:13;;2442:14;;2449:7;;2442:14;;2449:7;2442:14;;;;;;;;;;;;;;;;;;;;;;;;1727:49:0;1772:4;1727:49;:::o;6291:266:3:-;6384:4;6400:129;6409:12;:10;:12::i;:::-;6423:7;6432:96;6471:15;6432:96;;;;;;;;;;;;;;;;;:11;:25;6444:12;:10;:12::i;:::-;-1:-1:-1;;;;;6432:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;6432:25:3;;;:34;;;;;;;;;;;:96;:38;:96::i;3727:172::-;3813:4;3829:42;3839:12;:10;:12::i;:::-;3853:9;3864:6;3829:9;:42::i;5161:248:15:-;-1:-1:-1;;;;;5295:23:15;;5250:7;5295:23;;;:14;:23;;;;;;;;5335:16;:67;;5401:1;5335:67;;;-1:-1:-1;;;;;5354:20:15;;;;;;:11;:20;;;;;;;;:38;-1:-1:-1;;5375:16:15;;5354:38;;;;;;;;5390:1;5354:44;;5328:74;5161:248;-1:-1:-1;;;5161:248:15:o;3833:1134::-;4016:23;2104:80;4142:6;:4;:6::i;:::-;4126:24;;;;;;4168:12;:10;:12::i;:::-;4065:160;;;;;;;;;;;;;;;;;;;;;;;;;4206:4;4065:160;;;;;;;;;;;;;;;;;;;;;;;4042:193;;;;;;2321:71;4290:135;;;;-1:-1:-1;;;;;4290:135:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4267:168;;;;;;-1:-1:-1;;;4486:119:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4463:152;;;;;;;;;-1:-1:-1;4646:26:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:193;;-1:-1:-1;4267:168:15;;4463:152;;-1:-1:-1;;4646:26:15;;;;;;;-1:-1:-1;;4646:26:15;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4646:26:15;;-1:-1:-1;;4646:26:15;;;-1:-1:-1;;;;;;;4690:23:15;;4682:73;;;;-1:-1:-1;;;4682:73:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4782:17:15;;;;;;:6;:17;;;;;:19;;;;;;;;4773:28;;4765:74;;;;-1:-1:-1;;;4765:74:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4864:6;4857:3;:13;;4849:63;;;;-1:-1:-1;;;4849:63:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4929:31;4939:9;4950;4929;:31::i;:::-;4922:38;;;;3833:1134;;;;;;;:::o;3255:125:0:-;3318:7;3344:12;;;:6;:12;;;;;:29;;:27;:29::i;509:62:15:-;547:24;509:62;:::o;5101:226:0:-;5193:12;;;;:6;:12;;;;;:22;;;5185:45;;5217:12;:10;:12::i;5185:45::-;5177:106;;;;-1:-1:-1;;;5177:106:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3957:149:3;-1:-1:-1;;;;;4072:18:3;;;4046:7;4072:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3957:149::o;2275:117:15:-;2321:71;2275:117;:::o;1807:70::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2011:240:1:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:1;;1289:68;;;;;-1:-1:-1;;;1289:68:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:1;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:1::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:1;;::::1;::::0;2200:6:::1;::::0;::::1;;::::0;2179:38:::1;::::0;;;::::1;2227:6;:17:::0;;-1:-1:-1;;;;;2227:17:1;;::::1;;;-1:-1:-1::0;;;;;;2227:17:1;;::::1;::::0;;;::::1;::::0;;2011:240::o;6429:150:9:-;6499:4;6522:50;6527:3;-1:-1:-1;;;;;6547:23:9;;6522:4;:50::i;598:104:8:-;685:10;598:104;:::o;9355:340:3:-;-1:-1:-1;;;;;9456:19:3;;9448:68;;;;-1:-1:-1;;;9448:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9534:21:3;;9526:68;;;;-1:-1:-1;;;9526:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9605:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;9656:32;;;;;;;;;;;;;;;;;9355:340;;;:::o;7031:530::-;-1:-1:-1;;;;;7136:20:3;;7128:70;;;;-1:-1:-1;;;7128:70:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7216:23:3;;7208:71;;;;-1:-1:-1;;;7208:71:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7290:47;7311:6;7319:9;7330:6;7290:20;:47::i;:::-;7368:71;7390:6;7368:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7368:17:3;;:9;:17;;;;;;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;7348:17:3;;;:9;:17;;;;;;;;;;;:91;;;;7472:20;;;;;;;:32;;7497:6;7472:24;:32::i;:::-;-1:-1:-1;;;;;7449:20:3;;;:9;:20;;;;;;;;;;;;:55;;;;7519:35;;;;;;;7449:20;;7519:35;;;;;;;;;;;;;7031:530;;;:::o;5432:163:2:-;5518:7;5553:12;5545:6;;;;5537:29;;;;-1:-1:-1;;;5537:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5583:5:2;;;5432:163::o;7025:184:0:-;7098:12;;;;:6;:12;;;;;:33;;7123:7;7098:24;:33::i;:::-;7094:109;;;7179:12;:10;:12::i;:::-;-1:-1:-1;;;;;7152:40:0;7170:7;-1:-1:-1;;;;;7152:40:0;7164:4;7152:40;;;;;;;;;;7025:184;;:::o;7215:188::-;7289:12;;;;:6;:12;;;;;:36;;7317:7;7289:27;:36::i;:::-;7285:112;;;7373:12;:10;:12::i;:::-;-1:-1:-1;;;;;7346:40:0;7364:7;-1:-1:-1;;;;;7346:40:0;7358:4;7346:40;;;;;;;;;;7215:188;;:::o;2690:175:2:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;7832:370:3;-1:-1:-1;;;;;7915:21:3;;7907:65;;;;;-1:-1:-1;;;7907:65:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;7983:49;8012:1;8016:7;8025:6;7983:20;:49::i;:::-;8058:12;;:24;;8075:6;8058:16;:24::i;:::-;8043:12;:39;-1:-1:-1;;;;;8113:18:3;;:9;:18;;;;;;;;;;;:30;;8136:6;8113:22;:30::i;:::-;-1:-1:-1;;;;;8092:18:3;;:9;:18;;;;;;;;;;;:51;;;;8158:37;;;;;;;8092:18;;:9;;8158:37;;;;;;;;;;7832:370;;:::o;7486:929:15:-;7591:6;-1:-1:-1;;;;;7581:16:15;:6;-1:-1:-1;;;;;7581:16:15;;;:30;;;;;7610:1;7601:6;:10;7581:30;7577:832;;;-1:-1:-1;;;;;7631:20:15;;;7627:379;;-1:-1:-1;;;;;7737:22:15;;7718:16;7737:22;;;:14;:22;;;;;;;;;7797:13;:60;;7856:1;7797:60;;;-1:-1:-1;;;;;7813:19:15;;;;;;:11;:19;;;;;;;;:34;-1:-1:-1;;7833:13:15;;7813:34;;;;;;;;7845:1;7813:40;;7797:60;7777:80;-1:-1:-1;7875:17:15;7895:21;7777:80;7909:6;7895:13;:21::i;:::-;7875:41;;7934:57;7951:6;7959:9;7970;7981;7934:16;:57::i;:::-;7627:379;;;;-1:-1:-1;;;;;8024:20:15;;;8020:379;;-1:-1:-1;;;;;8130:22:15;;8111:16;8130:22;;;:14;:22;;;;;;;;;8190:13;:60;;8249:1;8190:60;;;-1:-1:-1;;;;;8206:19:15;;;;;;:11;:19;;;;;;;;:34;-1:-1:-1;;8226:13:15;;8206:34;;;;;;;;8238:1;8206:40;;8190:60;8170:80;-1:-1:-1;8268:17:15;8288:21;8170:80;8302:6;8288:13;:21::i;:::-;8268:41;;8327:57;8344:6;8352:9;8363;8374;8327:16;:57::i;8522:410:3:-;-1:-1:-1;;;;;8605:21:3;;8597:67;;;;-1:-1:-1;;;8597:67:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8675:49;8696:7;8713:1;8717:6;8675:20;:49::i;:::-;8756:68;8779:6;8756:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8756:18:3;;:9;:18;;;;;;;;;;;;:68;:22;:68::i;:::-;-1:-1:-1;;;;;8735:18:3;;:9;:18;;;;;;;;;;:89;8849:12;;:24;;8866:6;8849:16;:24::i;:::-;8834:12;:39;8888:37;;;;;;;;8914:1;;-1:-1:-1;;;;;8888:37:3;;;;;;;;;;;;8522:410;;:::o;7053:427:15:-;-1:-1:-1;;;;;7167:21:15;;;7141:23;7167:21;;;:10;:21;;;;;;;;;;7225:20;7178:9;7225;:20::i;:::-;-1:-1:-1;;;;;7299:21:15;;;;;;;:10;:21;;;;;;:33;;-1:-1:-1;;;;;;7299:33:15;;;;;;;;;;7348:54;;7198:47;;-1:-1:-1;7299:33:15;7348:54;;;;;;7299:21;7348:54;7413:60;7428:15;7445:9;7456:16;7413:14;:60::i;:::-;7053:427;;;;:::o;7677:156:9:-;7751:7;7801:22;7805:3;7817:5;7801:3;:22::i;6984:165::-;7064:4;7087:55;7097:3;-1:-1:-1;;;;;7117:23:9;;7087:9;:55::i;9276:149:15:-;9384:9;9276:149;:::o;7230:115:9:-;7293:7;7319:19;7327:3;7319:7;:19::i;1640:404::-;1703:4;1724:21;1734:3;1739:5;1724:9;:21::i;:::-;1719:319;;-1:-1:-1;1761:23:9;;;;;;;;:11;:23;;;;;;;;;;;;;1941:18;;1919:19;;;:12;;;:19;;;;;;:40;;;;1973:11;;1719:319;-1:-1:-1;2022:5:9;2015:12;;6747:156;6820:4;6843:53;6851:3;-1:-1:-1;;;;;6871:23:9;;6843:7;:53::i;3136:155:2:-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:2;;;3136:155::o;8421:685:15:-;8592:18;8613:75;8620:12;8613:75;;;;;;;;;;;;;;;;;:6;:75::i;:::-;8592:96;;8718:1;8703:12;:16;;;:85;;;;-1:-1:-1;;;;;;8723:22:15;;;;;;:11;:22;;;;;;;;:65;-1:-1:-1;;8746:16:15;;8723:40;;;;;;;;;:50;:65;;;:50;;:65;8703:85;8699:334;;;-1:-1:-1;;;;;8804:22:15;;;;;;:11;:22;;;;;;;;:40;-1:-1:-1;;8827:16:15;;8804:40;;;;;;;;8842:1;8804:46;:57;;;8699:334;;;8931:33;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8892:22:15;;-1:-1:-1;8892:22:15;;;:11;:22;;;;;:36;;;;;;;;;;:72;;;;;;;-1:-1:-1;;8892:72:15;;;;;;;;;;;;;8978:25;;;:14;:25;;;;;;:44;;9006:16;;;8978:44;;;;;;;;;;8699:334;9048:51;;;;;;;;;;;;;;-1:-1:-1;;;;;9048:51:15;;;;;;;;;;;8421:685;;;;;:::o;4452:201:9:-;4546:18;;4519:7;;4546:26;-1:-1:-1;4538:73:9;;;;-1:-1:-1;;;4538:73:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4628:3;:11;;4640:5;4628:18;;;;;;;;;;;;;;;;4621:25;;4452:201;;;;:::o;3805:127::-;3878:4;3901:19;;;:12;;;;;:19;;;;;;:24;;;3805:127::o;4013:107::-;4095:18;;4013:107::o;2212:1512::-;2278:4;2415:19;;;:12;;;:19;;;;;;2449:15;;2445:1273;;2878:18;;-1:-1:-1;;2830:14:9;;;;2878:22;;;;2806:21;;2878:3;;:22;;3160;;;;;;;;;;;;;;3140:42;;3303:9;3274:3;:11;;3286:13;3274:26;;;;;;;;;;;;;;;;;;;:38;;;;3378:23;;;3420:1;3378:12;;;:23;;;;;;3404:17;;;3378:43;;3527:17;;3378:3;;3527:17;;;;;;;;;;;;;;;;;;;;;;3619:3;:12;;:19;3632:5;3619:19;;;;;;;;;;;3612:26;;;3660:4;3653:11;;;;;;;;2445:1273;3702:5;3695:12;;;;;9112:158:15;9187:6;9224:12;9217:5;9213:9;;9205:32;;;;-1:-1:-1;;;9205:32:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9261:1:15;;9112:158;-1:-1:-1;;9112:158:15:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      }
    },
    "kind": "dev",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`",
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`",
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "delegates(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`",
        "params": {
          "delegator": "The address to get delegatee for"
        }
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`",
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "notice": "Determine the prior number of votes for an account as of a block number",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "notice": "Creates `_amount` token to `_to`. Must only be called by MINTER_ROLE addresses."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_delegates": {
        "details": "A record of each accounts delegate"
      }
    },
    "version": 1
  },
  "offset": [435, 9427],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xB4B5EA57 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x6E4 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x710 JUMPI DUP1 PUSH4 0xE7A324DC EQ PUSH2 0x73E JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x798 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0xB4B5EA57 EQ PUSH2 0x652 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x678 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x6BF JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x6DC JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5BE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x5F2 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x626 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x56D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x59B JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x50D JUMPI DUP1 PUSH4 0x782D6FE1 EQ PUSH2 0x515 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x440 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x39F JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x20606B70 EQ PUSH2 0x2F8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x229 PUSH2 0x7BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x263 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x24B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x290 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x2E6 PUSH2 0x872 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x2E6 PUSH2 0x878 JUMP JUMPDEST PUSH2 0x2CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x89C JUMP JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x923 JUMP JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x938 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x389 PUSH2 0x9A4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x2CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xA0E JUMP JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xA5C JUMP JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xAFF JUMP JUMPDEST PUSH2 0x466 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB31 JUMP JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB53 JUMP JUMPDEST PUSH2 0x37F PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xC32 JUMP JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xE3A JUMP JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE94 JUMP JUMPDEST PUSH2 0x466 PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x466 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xEBA JUMP JUMPDEST PUSH2 0x2CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xED9 JUMP JUMPDEST PUSH2 0x229 PUSH2 0xEF1 JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0x2CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF57 JUMP JUMPDEST PUSH2 0x2CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xFBF JUMP JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFD3 JUMP JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xFF PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0x12C0 JUMP JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x2E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x133D JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0x1368 JUMP JUMPDEST PUSH2 0x778 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x138C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x37F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13B9 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x84A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x81F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x84A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x82D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x868 PUSH2 0x861 PUSH2 0x14EE JUMP JUMPDEST DUP5 DUP5 PUSH2 0x14F2 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A9 DUP5 DUP5 DUP5 PUSH2 0x15DE JUMP JUMPDEST PUSH2 0x919 DUP5 PUSH2 0x8B5 PUSH2 0x14EE JUMP JUMPDEST PUSH2 0x914 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x229A PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x8F3 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1739 JUMP JUMPDEST PUSH2 0x14F2 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x95B SWAP1 PUSH2 0x956 PUSH2 0x14EE JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH2 0x996 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x210C PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9A0 DUP3 DUP3 PUSH2 0x17D0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9B5 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x239A PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9A0 DUP3 DUP3 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x868 PUSH2 0xA1B PUSH2 0x14EE JUMP JUMPDEST DUP5 PUSH2 0x914 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0xA2C PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x18A2 JUMP JUMPDEST PUSH2 0xA86 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0xED9 JUMP JUMPDEST PUSH2 0xAD0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x21B0B63632B91034B9903737BA10309036B4B73A32B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xADA DUP3 DUP3 PUSH2 0x18FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x9A0 SWAP3 AND DUP4 PUSH2 0x19EC JUMP JUMPDEST PUSH2 0xB10 PUSH2 0xB0A PUSH2 0x14EE JUMP JUMPDEST DUP3 PUSH2 0x1B29 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH2 0xB10 CALLER DUP3 PUSH2 0x1C25 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB76 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB87 PUSH2 0xEA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBE2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 LT PUSH2 0xC72 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x213B PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND DUP1 PUSH2 0xCA0 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP7 ADD DUP2 AND DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD AND DUP4 LT PUSH2 0xD0F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x0 NOT SWAP5 SWAP1 SWAP5 ADD PUSH4 0xFFFFFFFF AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND DUP4 LT ISZERO PUSH2 0xD4A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x86C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0xE03 JUMPI PUSH1 0x2 DUP3 DUP3 SUB PUSH4 0xFFFFFFFF AND DIV DUP2 SUB PUSH2 0xD7C PUSH2 0x20AF JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP1 DUP7 AND DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD SWAP1 SWAP4 AND DUP1 DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP8 EQ ISZERO PUSH2 0xDDE JUMPI PUSH1 0x20 ADD MLOAD SWAP5 POP PUSH2 0x86C SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP8 GT ISZERO PUSH2 0xDF5 JUMPI DUP2 SWAP4 POP PUSH2 0xDFC JUMP JUMPDEST PUSH1 0x1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 0xD52 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE71 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22C2 PUSH1 0x24 SWAP2 CODECOPY PUSH2 0xE6A DUP7 PUSH2 0xE65 PUSH2 0x14EE JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1739 JUMP JUMPDEST SWAP1 POP PUSH2 0xE85 DUP4 PUSH2 0xE7F PUSH2 0x14EE JUMP JUMPDEST DUP4 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0xE8F DUP4 DUP4 PUSH2 0x1B29 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xED2 SWAP1 DUP4 PUSH2 0x1CBA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xED2 SWAP1 DUP4 PUSH2 0x1CC6 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x84A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x81F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x84A JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x868 PUSH2 0xF64 PUSH2 0x14EE JUMP JUMPDEST DUP5 PUSH2 0x914 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2375 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0xF8E PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1739 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x868 PUSH2 0xFCC PUSH2 0x14EE JUMP JUMPDEST DUP5 DUP5 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND DUP1 PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH2 0xED2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP7 ADD AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH2 0x1061 PUSH2 0x7BE JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1070 PUSH2 0x1CDB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 DUP4 ADD DUP3 MSTORE DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 DUP4 ADD DUP11 SWAP1 MSTORE PUSH2 0x120 DUP1 DUP5 ADD DUP11 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x140 DUP5 ADD DUP4 MSTORE DUP1 MLOAD SWAP1 DUP6 ADD KECCAK256 PUSH2 0x1901 PUSH1 0xF0 SHL PUSH2 0x160 DUP6 ADD MSTORE PUSH2 0x162 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0x182 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP7 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x1A2 DUP6 ADD DUP1 DUP6 MSTORE DUP2 MLOAD SWAP2 DUP8 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 SWAP2 DUP3 SWAP1 MSTORE PUSH2 0x1C2 DUP7 ADD DUP1 DUP7 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP12 AND PUSH2 0x1E2 DUP8 ADD MSTORE PUSH2 0x202 DUP7 ADD DUP11 SWAP1 MSTORE PUSH2 0x222 DUP7 ADD DUP10 SWAP1 MSTORE SWAP4 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 SWAP3 SWAP4 SWAP1 SWAP3 PUSH1 0x1 SWAP3 PUSH2 0x242 DUP1 DUP5 ADD SWAP4 PUSH1 0x1F NOT DUP4 ADD SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x11F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x22E6 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP10 EQ PUSH2 0x1253 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2224 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP8 TIMESTAMP GT ISZERO PUSH2 0x1292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2275 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x129C DUP2 DUP12 PUSH2 0x1C25 JUMP JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x86C SWAP1 PUSH2 0x1CDF JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1302 SWAP1 PUSH2 0x956 PUSH2 0x14EE JUMP JUMPDEST PUSH2 0xA04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2245 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND SWAP1 DUP3 JUMP JUMPDEST PUSH2 0x13C1 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13D2 PUSH2 0xEA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x142D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1472 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x21B6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH2 0x100 SWAP1 DIV AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1CEA JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2351 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x157C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x21DC PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x232C PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1668 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20E9 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1673 DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0x16B0 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21FE PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1739 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x16DF SWAP1 DUP3 PUSH2 0x18A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x17C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x178D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1775 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x17BA JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x17E8 SWAP1 DUP3 PUSH2 0x14D9 JUMP JUMPDEST ISZERO PUSH2 0x9A0 JUMPI PUSH2 0x17F5 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1851 SWAP1 DUP3 PUSH2 0x1D34 JUMP JUMPDEST ISZERO PUSH2 0x9A0 JUMPI PUSH2 0x185E PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1957 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1963 PUSH1 0x0 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1970 SWAP1 DUP3 PUSH2 0x18A2 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1996 SWAP1 DUP3 PUSH2 0x18A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A0E JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0xE8F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1AA0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH2 0x1A4E JUMPI PUSH1 0x0 PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP8 ADD AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1A8E DUP3 DUP6 PUSH2 0x1D49 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A9C DUP7 DUP5 DUP5 DUP5 PUSH2 0x1DA6 JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xE8F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH2 0x1ADB JUMPI PUSH1 0x0 PUSH2 0x1B0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP8 ADD AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B1B DUP3 DUP6 PUSH2 0x18A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x12A1 DUP6 DUP5 DUP5 DUP5 PUSH2 0x1DA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1B6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x230B PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B7A DUP3 PUSH1 0x0 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0x1BB7 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2161 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x1739 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x1BDD SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 AND SWAP1 PUSH2 0x1C4C DUP5 PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP10 DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP5 SWAP6 POP SWAP4 SWAP3 DUP7 AND SWAP3 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0x1CB4 DUP3 DUP5 DUP4 PUSH2 0x19EC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED2 DUP4 DUP4 PUSH2 0x1F0B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1F6F JUMP JUMPDEST CHAINID SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C DUP3 PUSH2 0x1F87 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF6 DUP4 DUP4 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x1D2C JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x86C JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x86C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1F8B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1DA0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DCA NUMBER PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2183 PUSH1 0x33 SWAP2 CODECOPY PUSH2 0x2051 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH4 0xFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x1E13 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP10 ADD DUP2 AND DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP3 DUP3 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1E50 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP10 ADD AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP3 SWAP1 SSTORE PUSH2 0x1EC1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP5 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 DUP5 MSTORE DUP7 DUP2 KECCAK256 DUP12 DUP7 AND DUP3 MSTORE DUP5 MSTORE DUP7 DUP2 KECCAK256 SWAP6 MLOAD DUP7 SLOAD SWAP1 DUP7 AND PUSH4 0xFFFFFFFF NOT SWAP2 DUP3 AND OR DUP8 SSTORE SWAP3 MLOAD PUSH1 0x1 SWAP7 DUP8 ADD SSTORE SWAP1 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE SWAP4 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 DUP9 ADD SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP3 PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP3 LT PUSH2 0x1F4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20C7 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1F5C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2047 JUMPI DUP4 SLOAD PUSH1 0x0 NOT DUP1 DUP4 ADD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1FBE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1FDB JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0x1 DUP10 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP5 ADD SWAP1 SSTORE DUP7 SLOAD DUP8 SWAP1 DUP1 PUSH2 0x200B JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP7 PUSH1 0x1 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x86C JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x86C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH5 0x100000000 DUP5 LT PUSH2 0x20A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x178D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1775 JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID GASLIMIT PUSH15 0x756D657261626C655365743A20696E PUSH5 0x6578206F75 PUSH21 0x206F6620626F756E647345524332303A207472616E PUSH20 0x66657220746F20746865207A65726F2061646472 PUSH6 0x737341636365 PUSH20 0x73436F6E74726F6C3A2073656E646572206D7573 PUSH21 0x20626520616E2061646D696E20746F206772616E74 0x4E MSTORE JUMP GASPRICE GASPRICE PUSH8 0x65745072696F7256 PUSH16 0x7465733A206E6F742079657420646574 PUSH6 0x726D696E6564 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63654E52563A GASPRICE 0x5F PUSH24 0x72697465436865636B706F696E743A20626C6F636B206E75 PUSH14 0x6265722065786365656473203332 KECCAK256 PUSH3 0x697473 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F206164647265737345524332303A20617070726F76652074 PUSH16 0x20746865207A65726F20616464726573 PUSH20 0x45524332303A207472616E7366657220616D6F75 PUSH15 0x7420657863656564732062616C616E PUSH4 0x654E5256 GASPRICE GASPRICE PUSH5 0x656C656761 PUSH21 0x6542795369673A20696E76616C6964206E6F6E6365 COINBASE PUSH4 0x63657373 NUMBER PUSH16 0x6E74726F6C3A2073656E646572206D75 PUSH20 0x7420626520616E2061646D696E20746F20726576 PUSH16 0x6B654E52563A3A64656C656761746542 PUSH26 0x5369673A207369676E6174757265206578706972656445524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20627572 PUSH15 0x20616D6F756E742065786365656473 KECCAK256 PUSH2 0x6C6C PUSH16 0x77616E63654E52563A3A64656C656761 PUSH21 0x6542795369673A20696E76616C6964207369676E61 PUSH21 0x75726545524332303A206275726E2066726F6D2074 PUSH9 0x65207A65726F206164 PUSH5 0x7265737345 MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E736665722066726F6D20746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726F41636365 PUSH20 0x73436F6E74726F6C3A2063616E206F6E6C792072 PUSH6 0x6E6F756E6365 KECCAK256 PUSH19 0x6F6C657320666F722073656C66A26469706673 PC 0x22 SLT KECCAK256 0xF9 JUMP 0x23 0xD8 PUSH3 0x732755 0xE0 PUSH17 0xD19A881FBA0E110BDF5E81BD9A3459A15 0xA7 0xD0 0xC0 SWAP5 0xE6 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [435, 9427],
      "op": "MSTORE",
      "path": "15"
    },
    "5": {
      "fn": null,
      "offset": [435, 9427],
      "op": "CALLVALUE",
      "path": "15"
    },
    "6": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "7": {
      "fn": null,
      "offset": [435, 9427],
      "op": "ISZERO",
      "path": "15"
    },
    "8": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "12": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [435, 9427],
      "op": "REVERT",
      "path": "15"
    },
    "16": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "17": {
      "fn": null,
      "offset": [435, 9427],
      "op": "POP",
      "path": "15"
    },
    "18": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [435, 9427],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "21": {
      "fn": null,
      "offset": [435, 9427],
      "op": "LT",
      "path": "15"
    },
    "22": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "25": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "26": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [435, 9427],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "29": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [435, 9427],
      "op": "SHR",
      "path": "15"
    },
    "32": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "33": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x79CC6790"
    },
    "38": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "39": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x125"
    },
    "42": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "43": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "44": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xB4B5EA57"
    },
    "49": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "50": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0xAD"
    },
    "53": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "54": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "55": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xD547741F"
    },
    "60": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "61": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x7C"
    },
    "64": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "65": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "66": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xD547741F"
    },
    "71": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "72": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x6E4"
    },
    "75": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "76": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "77": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xDD62ED3E"
    },
    "82": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "83": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x710"
    },
    "86": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "87": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "88": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xE7A324DC"
    },
    "93": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "94": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x73E"
    },
    "97": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "98": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "99": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xF1127ED8"
    },
    "104": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "105": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x746"
    },
    "108": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "109": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "110": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xF2FDE38B"
    },
    "115": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "116": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x798"
    },
    "119": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "120": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "123": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "124": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "125": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "126": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xB4B5EA57"
    },
    "131": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "132": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x652"
    },
    "135": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "136": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "137": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xC3CDA520"
    },
    "142": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "143": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x678"
    },
    "146": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "147": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "148": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xCA15C873"
    },
    "153": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "154": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x6BF"
    },
    "157": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "158": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "159": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xD5391393"
    },
    "164": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "165": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x6DC"
    },
    "168": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "169": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "172": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "173": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "174": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "175": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x91D14854"
    },
    "180": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "181": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0xF4"
    },
    "184": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "185": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "186": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x91D14854"
    },
    "191": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "192": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x5BE"
    },
    "195": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "196": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "197": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x95D89B41"
    },
    "202": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "203": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x5EA"
    },
    "206": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "207": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "208": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xA217FDDF"
    },
    "213": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "214": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x5F2"
    },
    "217": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "218": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "219": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xA457C2D7"
    },
    "224": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "225": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x5FA"
    },
    "228": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "229": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "230": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0xA9059CBB"
    },
    "235": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "236": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x626"
    },
    "239": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "240": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "243": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "244": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "245": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "246": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x79CC6790"
    },
    "251": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "252": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x541"
    },
    "255": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "256": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "257": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x7ECEBE00"
    },
    "262": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "263": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x56D"
    },
    "266": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "267": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "268": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x8DA5CB5B"
    },
    "273": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "274": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x593"
    },
    "277": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "278": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "279": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x9010D07C"
    },
    "284": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "285": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x59B"
    },
    "288": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "289": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "292": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "293": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "294": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "295": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x39509351"
    },
    "300": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "301": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1A8"
    },
    "304": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "305": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "306": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x5C19A95C"
    },
    "311": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "312": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x177"
    },
    "315": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "316": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "317": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x5C19A95C"
    },
    "322": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "323": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x482"
    },
    "326": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "327": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "328": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x6FCFFF45"
    },
    "333": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "334": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4A8"
    },
    "337": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "338": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "339": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x70A08231"
    },
    "344": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "345": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4E7"
    },
    "348": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "349": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "350": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x715018A6"
    },
    "355": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "356": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x50D"
    },
    "359": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "360": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "361": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x782D6FE1"
    },
    "366": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "367": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x515"
    },
    "370": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "371": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "374": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "375": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "376": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "377": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x39509351"
    },
    "382": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "383": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3CB"
    },
    "386": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "387": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "388": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x40C10F19"
    },
    "393": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "394": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x3F7"
    },
    "397": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "398": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "399": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x42966C68"
    },
    "404": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "405": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x423"
    },
    "408": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "409": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "410": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x587CDE1E"
    },
    "415": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "416": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x440"
    },
    "419": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "420": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "423": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "424": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "425": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "426": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x23B872DD"
    },
    "431": {
      "fn": null,
      "offset": [435, 9427],
      "op": "GT",
      "path": "15"
    },
    "432": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1EF"
    },
    "435": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "436": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "437": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x23B872DD"
    },
    "442": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "443": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x300"
    },
    "446": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "447": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "448": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x248A9CA3"
    },
    "453": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "454": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x336"
    },
    "457": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "458": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "459": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x2F2FF15D"
    },
    "464": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "465": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x353"
    },
    "468": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "469": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "470": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x313CE567"
    },
    "475": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "476": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x381"
    },
    "479": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "480": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "481": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x36568ABE"
    },
    "486": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "487": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x39F"
    },
    "490": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "491": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x21C"
    },
    "494": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMP",
      "path": "15"
    },
    "495": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "496": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "497": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x6FDDE03"
    },
    "502": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "503": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x221"
    },
    "506": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "507": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "508": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x95EA7B3"
    },
    "513": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "514": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x29E"
    },
    "517": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "518": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "519": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x18160DDD"
    },
    "524": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "525": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2DE"
    },
    "528": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "529": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "530": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH4",
      "path": "15",
      "value": "0x20606B70"
    },
    "535": {
      "fn": null,
      "offset": [435, 9427],
      "op": "EQ",
      "path": "15"
    },
    "536": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2F8"
    },
    "539": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPI",
      "path": "15"
    },
    "540": {
      "fn": null,
      "offset": [435, 9427],
      "op": "JUMPDEST",
      "path": "15"
    },
    "541": {
      "fn": null,
      "offset": [435, 9427],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "543": {
      "fn": null,
      "offset": [435, 9427],
      "op": "DUP1",
      "path": "15"
    },
    "544": {
      "first_revert": true,
      "fn": null,
      "offset": [435, 9427],
      "op": "REVERT",
      "path": "15"
    },
    "545": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPDEST",
      "path": "3"
    },
    "546": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH2",
      "path": "3",
      "value": "0x229"
    },
    "549": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7BE"
    },
    "552": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [2168, 2257],
      "op": "JUMP",
      "path": "3"
    },
    "553": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPDEST",
      "path": "3"
    },
    "554": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "556": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "557": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MLOAD",
      "path": "3"
    },
    "558": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "560": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "561": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP3",
      "path": "3"
    },
    "562": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MSTORE",
      "path": "3"
    },
    "563": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "564": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MLOAD",
      "path": "3"
    },
    "565": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP2",
      "path": "3"
    },
    "566": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "567": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "568": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MSTORE",
      "path": "3"
    },
    "569": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "570": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MLOAD",
      "path": "3"
    },
    "571": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP2",
      "path": "3"
    },
    "572": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP3",
      "path": "3"
    },
    "573": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "574": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP3",
      "path": "3"
    },
    "575": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "576": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "577": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "578": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP2",
      "path": "3"
    },
    "579": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP6",
      "path": "3"
    },
    "580": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "581": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "582": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "583": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "584": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "585": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "587": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPDEST",
      "path": "3"
    },
    "588": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "589": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP2",
      "path": "3"
    },
    "590": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "LT",
      "path": "3"
    },
    "591": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ISZERO",
      "path": "3"
    },
    "592": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH2",
      "path": "3",
      "value": "0x263"
    },
    "595": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPI",
      "path": "3"
    },
    "596": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP2",
      "path": "3"
    },
    "597": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP2",
      "path": "3"
    },
    "598": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "599": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MLOAD",
      "path": "3"
    },
    "600": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "601": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP3",
      "path": "3"
    },
    "602": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "603": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MSTORE",
      "path": "3"
    },
    "604": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "606": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "607": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH2",
      "path": "3",
      "value": "0x24B"
    },
    "610": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMP",
      "path": "3"
    },
    "611": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPDEST",
      "path": "3"
    },
    "612": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "613": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "614": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "615": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "616": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "617": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "618": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "619": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP2",
      "path": "3"
    },
    "620": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "621": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "622": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "624": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "AND",
      "path": "3"
    },
    "625": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "626": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ISZERO",
      "path": "3"
    },
    "627": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH2",
      "path": "3",
      "value": "0x290"
    },
    "630": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPI",
      "path": "3"
    },
    "631": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "632": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP3",
      "path": "3"
    },
    "633": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SUB",
      "path": "3"
    },
    "634": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "635": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MLOAD",
      "path": "3"
    },
    "636": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "638": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP4",
      "path": "3"
    },
    "639": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "641": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SUB",
      "path": "3"
    },
    "642": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "645": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "EXP",
      "path": "3"
    },
    "646": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SUB",
      "path": "3"
    },
    "647": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "NOT",
      "path": "3"
    },
    "648": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "AND",
      "path": "3"
    },
    "649": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP2",
      "path": "3"
    },
    "650": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MSTORE",
      "path": "3"
    },
    "651": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "653": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "ADD",
      "path": "3"
    },
    "654": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP2",
      "path": "3"
    },
    "655": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "656": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPDEST",
      "path": "3"
    },
    "657": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "658": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP3",
      "path": "3"
    },
    "659": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "660": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "661": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "POP",
      "path": "3"
    },
    "662": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "664": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "MLOAD",
      "path": "3"
    },
    "665": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "DUP1",
      "path": "3"
    },
    "666": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP2",
      "path": "3"
    },
    "667": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SUB",
      "path": "3"
    },
    "668": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "669": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "RETURN",
      "path": "3"
    },
    "670": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "JUMPDEST",
      "path": "3"
    },
    "671": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2CA"
    },
    "674": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "676": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP1",
      "path": "3"
    },
    "677": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "678": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SUB",
      "path": "3"
    },
    "679": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "681": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP2",
      "path": "3"
    },
    "682": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "LT",
      "path": "3"
    },
    "683": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "ISZERO",
      "path": "3"
    },
    "684": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B4"
    },
    "687": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "JUMPI",
      "path": "3"
    },
    "688": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "690": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP1",
      "path": "3"
    },
    "691": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "REVERT",
      "path": "3"
    },
    "692": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "JUMPDEST",
      "path": "3"
    },
    "693": {
      "op": "POP"
    },
    "694": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "696": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "698": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "700": {
      "op": "SHL"
    },
    "701": {
      "op": "SUB"
    },
    "702": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP2",
      "path": "3"
    },
    "703": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "704": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "AND",
      "path": "3"
    },
    "705": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP1",
      "path": "3"
    },
    "706": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "708": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "ADD",
      "path": "3"
    },
    "709": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "710": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH2",
      "path": "3",
      "value": "0x854"
    },
    "713": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [4244, 4410],
      "op": "JUMP",
      "path": "3"
    },
    "714": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "JUMPDEST",
      "path": "3"
    },
    "715": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "717": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP1",
      "path": "3"
    },
    "718": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "MLOAD",
      "path": "3"
    },
    "719": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP2",
      "path": "3"
    },
    "720": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "ISZERO",
      "path": "3"
    },
    "721": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "ISZERO",
      "path": "3"
    },
    "722": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP3",
      "path": "3"
    },
    "723": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "MSTORE",
      "path": "3"
    },
    "724": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "MLOAD",
      "path": "3"
    },
    "725": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP1",
      "path": "3"
    },
    "726": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "DUP2",
      "path": "3"
    },
    "727": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP1",
      "path": "3"
    },
    "728": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SUB",
      "path": "3"
    },
    "729": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "731": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "ADD",
      "path": "3"
    },
    "732": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP1",
      "path": "3"
    },
    "733": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "RETURN",
      "path": "3"
    },
    "734": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "JUMPDEST",
      "path": "3"
    },
    "735": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2E6"
    },
    "738": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "PUSH2",
      "path": "3",
      "value": "0x872"
    },
    "741": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [3235, 3341],
      "op": "JUMP",
      "path": "3"
    },
    "742": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "JUMPDEST",
      "path": "3"
    },
    "743": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "745": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "DUP1",
      "path": "3"
    },
    "746": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "MLOAD",
      "path": "3"
    },
    "747": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "SWAP2",
      "path": "3"
    },
    "748": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "DUP3",
      "path": "3"
    },
    "749": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "MSTORE",
      "path": "3"
    },
    "750": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "MLOAD",
      "path": "3"
    },
    "751": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "SWAP1",
      "path": "3"
    },
    "752": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "DUP2",
      "path": "3"
    },
    "753": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "SWAP1",
      "path": "3"
    },
    "754": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "SUB",
      "path": "3"
    },
    "755": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "757": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "ADD",
      "path": "3"
    },
    "758": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "SWAP1",
      "path": "3"
    },
    "759": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "RETURN",
      "path": "3"
    },
    "760": {
      "offset": [2062, 2184],
      "op": "JUMPDEST",
      "path": "15"
    },
    "761": {
      "fn": "ERC20.totalSupply",
      "offset": [2062, 2184],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E6"
    },
    "764": {
      "fn": "ERC20.totalSupply",
      "offset": [2062, 2184],
      "op": "PUSH2",
      "path": "15",
      "value": "0x878"
    },
    "767": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [2062, 2184],
      "op": "JUMP",
      "path": "15"
    },
    "768": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "JUMPDEST",
      "path": "3"
    },
    "769": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2CA"
    },
    "772": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "774": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "DUP1",
      "path": "3"
    },
    "775": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "776": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SUB",
      "path": "3"
    },
    "777": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "779": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "DUP2",
      "path": "3"
    },
    "780": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "LT",
      "path": "3"
    },
    "781": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "ISZERO",
      "path": "3"
    },
    "782": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH2",
      "path": "3",
      "value": "0x316"
    },
    "785": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "JUMPI",
      "path": "3"
    },
    "786": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "788": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "DUP1",
      "path": "3"
    },
    "789": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "REVERT",
      "path": "3"
    },
    "790": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "JUMPDEST",
      "path": "3"
    },
    "791": {
      "op": "POP"
    },
    "792": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "794": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "796": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "798": {
      "op": "SHL"
    },
    "799": {
      "op": "SUB"
    },
    "800": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "DUP2",
      "path": "3"
    },
    "801": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "802": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "DUP2",
      "path": "3"
    },
    "803": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "AND",
      "path": "3"
    },
    "804": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SWAP2",
      "path": "3"
    },
    "805": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "807": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "DUP2",
      "path": "3"
    },
    "808": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "ADD",
      "path": "3"
    },
    "809": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "810": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SWAP1",
      "path": "3"
    },
    "811": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SWAP2",
      "path": "3"
    },
    "812": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "AND",
      "path": "3"
    },
    "813": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SWAP1",
      "path": "3"
    },
    "814": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "816": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "ADD",
      "path": "3"
    },
    "817": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "818": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "PUSH2",
      "path": "3",
      "value": "0x89C"
    },
    "821": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [4877, 5194],
      "op": "JUMP",
      "path": "3"
    },
    "822": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "JUMPDEST",
      "path": "0"
    },
    "823": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E6"
    },
    "826": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "828": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "DUP1",
      "path": "0"
    },
    "829": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "830": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "SUB",
      "path": "0"
    },
    "831": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "833": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "DUP2",
      "path": "0"
    },
    "834": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "LT",
      "path": "0"
    },
    "835": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "ISZERO",
      "path": "0"
    },
    "836": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "PUSH2",
      "path": "0",
      "value": "0x34C"
    },
    "839": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "JUMPI",
      "path": "0"
    },
    "840": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "842": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "DUP1",
      "path": "0"
    },
    "843": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "REVERT",
      "path": "0"
    },
    "844": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "JUMPDEST",
      "path": "0"
    },
    "845": {
      "op": "POP"
    },
    "846": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "847": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "PUSH2",
      "path": "0",
      "value": "0x923"
    },
    "850": {
      "fn": "AccessControl.getRoleAdmin",
      "jump": "i",
      "offset": [4282, 4394],
      "op": "JUMP",
      "path": "0"
    },
    "851": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "JUMPDEST",
      "path": "0"
    },
    "852": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37F"
    },
    "855": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "857": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "DUP1",
      "path": "0"
    },
    "858": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "859": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "SUB",
      "path": "0"
    },
    "860": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "862": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "DUP2",
      "path": "0"
    },
    "863": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "LT",
      "path": "0"
    },
    "864": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "ISZERO",
      "path": "0"
    },
    "865": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH2",
      "path": "0",
      "value": "0x369"
    },
    "868": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "JUMPI",
      "path": "0"
    },
    "869": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "871": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "DUP1",
      "path": "0"
    },
    "872": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "REVERT",
      "path": "0"
    },
    "873": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "JUMPDEST",
      "path": "0"
    },
    "874": {
      "op": "POP"
    },
    "875": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "DUP1",
      "path": "0"
    },
    "876": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "877": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "SWAP1",
      "path": "0"
    },
    "878": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "880": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "ADD",
      "path": "0"
    },
    "881": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "882": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "884": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "886": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "888": {
      "op": "SHL"
    },
    "889": {
      "op": "SUB"
    },
    "890": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "AND",
      "path": "0"
    },
    "891": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "PUSH2",
      "path": "0",
      "value": "0x938"
    },
    "894": {
      "fn": "AccessControl.grantRole",
      "jump": "i",
      "offset": [4644, 4867],
      "op": "JUMP",
      "path": "0"
    },
    "895": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "JUMPDEST",
      "path": "0"
    },
    "896": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "STOP",
      "path": "0"
    },
    "897": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "JUMPDEST",
      "path": "3"
    },
    "898": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "PUSH2",
      "path": "3",
      "value": "0x389"
    },
    "901": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9A4"
    },
    "904": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [3086, 3175],
      "op": "JUMP",
      "path": "3"
    },
    "905": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "JUMPDEST",
      "path": "3"
    },
    "906": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "908": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "DUP1",
      "path": "3"
    },
    "909": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "MLOAD",
      "path": "3"
    },
    "910": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "912": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SWAP1",
      "path": "3"
    },
    "913": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SWAP3",
      "path": "3"
    },
    "914": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "AND",
      "path": "3"
    },
    "915": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "DUP3",
      "path": "3"
    },
    "916": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "MSTORE",
      "path": "3"
    },
    "917": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "MLOAD",
      "path": "3"
    },
    "918": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SWAP1",
      "path": "3"
    },
    "919": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "DUP2",
      "path": "3"
    },
    "920": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SWAP1",
      "path": "3"
    },
    "921": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SUB",
      "path": "3"
    },
    "922": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "924": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "ADD",
      "path": "3"
    },
    "925": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SWAP1",
      "path": "3"
    },
    "926": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "RETURN",
      "path": "3"
    },
    "927": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "JUMPDEST",
      "path": "0"
    },
    "928": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37F"
    },
    "931": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "933": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "DUP1",
      "path": "0"
    },
    "934": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "935": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "SUB",
      "path": "0"
    },
    "936": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "938": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "DUP2",
      "path": "0"
    },
    "939": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "LT",
      "path": "0"
    },
    "940": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "ISZERO",
      "path": "0"
    },
    "941": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B5"
    },
    "944": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "JUMPI",
      "path": "0"
    },
    "945": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "947": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "DUP1",
      "path": "0"
    },
    "948": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "REVERT",
      "path": "0"
    },
    "949": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "JUMPDEST",
      "path": "0"
    },
    "950": {
      "op": "POP"
    },
    "951": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "DUP1",
      "path": "0"
    },
    "952": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "953": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "SWAP1",
      "path": "0"
    },
    "954": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "956": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "ADD",
      "path": "0"
    },
    "957": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "958": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "960": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "962": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "964": {
      "op": "SHL"
    },
    "965": {
      "op": "SUB"
    },
    "966": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "AND",
      "path": "0"
    },
    "967": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9AD"
    },
    "970": {
      "fn": "AccessControl.renounceRole",
      "jump": "i",
      "offset": [5818, 6023],
      "op": "JUMP",
      "path": "0"
    },
    "971": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "JUMPDEST",
      "path": "3"
    },
    "972": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2CA"
    },
    "975": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "977": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "DUP1",
      "path": "3"
    },
    "978": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "979": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "SUB",
      "path": "3"
    },
    "980": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "982": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "DUP2",
      "path": "3"
    },
    "983": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "LT",
      "path": "3"
    },
    "984": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "ISZERO",
      "path": "3"
    },
    "985": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3E1"
    },
    "988": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "JUMPI",
      "path": "3"
    },
    "989": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "991": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "DUP1",
      "path": "3"
    },
    "992": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "REVERT",
      "path": "3"
    },
    "993": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "JUMPDEST",
      "path": "3"
    },
    "994": {
      "op": "POP"
    },
    "995": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "997": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "999": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1001": {
      "op": "SHL"
    },
    "1002": {
      "op": "SUB"
    },
    "1003": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "DUP2",
      "path": "3"
    },
    "1004": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1005": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "AND",
      "path": "3"
    },
    "1006": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "SWAP1",
      "path": "3"
    },
    "1007": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1009": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "ADD",
      "path": "3"
    },
    "1010": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1011": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA0E"
    },
    "1014": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [5589, 5804],
      "op": "JUMP",
      "path": "3"
    },
    "1015": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1016": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH2",
      "path": "15",
      "value": "0x37F"
    },
    "1019": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1021": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "DUP1",
      "path": "15"
    },
    "1022": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1023": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "SUB",
      "path": "15"
    },
    "1024": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1026": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "DUP2",
      "path": "15"
    },
    "1027": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "LT",
      "path": "15"
    },
    "1028": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "ISZERO",
      "path": "15"
    },
    "1029": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH2",
      "path": "15",
      "value": "0x40D"
    },
    "1032": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "JUMPI",
      "path": "15"
    },
    "1033": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1035": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "DUP1",
      "path": "15"
    },
    "1036": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "REVERT",
      "path": "15"
    },
    "1037": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1038": {
      "op": "POP"
    },
    "1039": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1041": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1043": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1045": {
      "op": "SHL"
    },
    "1046": {
      "op": "SUB"
    },
    "1047": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "DUP2",
      "path": "15"
    },
    "1048": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1049": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "AND",
      "path": "15"
    },
    "1050": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "SWAP1",
      "path": "15"
    },
    "1051": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1053": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "ADD",
      "path": "15"
    },
    "1054": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1055": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "PUSH2",
      "path": "15",
      "value": "0xA5C"
    },
    "1058": {
      "fn": "NerveToken.mint",
      "jump": "i",
      "offset": [783, 1071],
      "op": "JUMP",
      "path": "15"
    },
    "1059": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1060": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "PUSH2",
      "path": "4",
      "value": "0x37F"
    },
    "1063": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "1065": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "DUP1",
      "path": "4"
    },
    "1066": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "1067": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "SUB",
      "path": "4"
    },
    "1068": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1070": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "DUP2",
      "path": "4"
    },
    "1071": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "LT",
      "path": "4"
    },
    "1072": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "ISZERO",
      "path": "4"
    },
    "1073": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "PUSH2",
      "path": "4",
      "value": "0x439"
    },
    "1076": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "JUMPI",
      "path": "4"
    },
    "1077": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1079": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "DUP1",
      "path": "4"
    },
    "1080": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "REVERT",
      "path": "4"
    },
    "1081": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1082": {
      "op": "POP"
    },
    "1083": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "CALLDATALOAD",
      "path": "4"
    },
    "1084": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "PUSH2",
      "path": "4",
      "value": "0xAFF"
    },
    "1087": {
      "fn": "ERC20Burnable.burn",
      "jump": "i",
      "offset": [524, 613],
      "op": "JUMP",
      "path": "4"
    },
    "1088": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1089": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH2",
      "path": "15",
      "value": "0x466"
    },
    "1092": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1094": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "DUP1",
      "path": "15"
    },
    "1095": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1096": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SUB",
      "path": "15"
    },
    "1097": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1099": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "DUP2",
      "path": "15"
    },
    "1100": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "LT",
      "path": "15"
    },
    "1101": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "ISZERO",
      "path": "15"
    },
    "1102": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH2",
      "path": "15",
      "value": "0x456"
    },
    "1105": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "JUMPI",
      "path": "15"
    },
    "1106": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1108": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "DUP1",
      "path": "15"
    },
    "1109": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "REVERT",
      "path": "15"
    },
    "1110": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1111": {
      "op": "POP"
    },
    "1112": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1119": {
      "op": "SHL"
    },
    "1120": {
      "op": "SUB"
    },
    "1121": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "AND",
      "path": "15"
    },
    "1122": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH2",
      "path": "15",
      "value": "0xB13"
    },
    "1125": {
      "fn": "NerveToken.delegates",
      "jump": "i",
      "offset": [3027, 3170],
      "op": "JUMP",
      "path": "15"
    },
    "1126": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1127": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1129": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "DUP1",
      "path": "15"
    },
    "1130": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "MLOAD",
      "path": "15"
    },
    "1131": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1133": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1135": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1137": {
      "op": "SHL"
    },
    "1138": {
      "op": "SUB"
    },
    "1139": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SWAP1",
      "path": "15"
    },
    "1140": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SWAP3",
      "path": "15"
    },
    "1141": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "AND",
      "path": "15"
    },
    "1142": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "DUP3",
      "path": "15"
    },
    "1143": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "MSTORE",
      "path": "15"
    },
    "1144": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "MLOAD",
      "path": "15"
    },
    "1145": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SWAP1",
      "path": "15"
    },
    "1146": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "DUP2",
      "path": "15"
    },
    "1147": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SWAP1",
      "path": "15"
    },
    "1148": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SUB",
      "path": "15"
    },
    "1149": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1151": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "ADD",
      "path": "15"
    },
    "1152": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "SWAP1",
      "path": "15"
    },
    "1153": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "RETURN",
      "path": "15"
    },
    "1154": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1155": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "PUSH2",
      "path": "15",
      "value": "0x37F"
    },
    "1158": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1160": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "DUP1",
      "path": "15"
    },
    "1161": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1162": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "SUB",
      "path": "15"
    },
    "1163": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1165": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "DUP2",
      "path": "15"
    },
    "1166": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "LT",
      "path": "15"
    },
    "1167": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "ISZERO",
      "path": "15"
    },
    "1168": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "PUSH2",
      "path": "15",
      "value": "0x498"
    },
    "1171": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "JUMPI",
      "path": "15"
    },
    "1172": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1174": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "DUP1",
      "path": "15"
    },
    "1175": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "REVERT",
      "path": "15"
    },
    "1176": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1177": {
      "op": "POP"
    },
    "1178": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1181": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1183": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1185": {
      "op": "SHL"
    },
    "1186": {
      "op": "SUB"
    },
    "1187": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "AND",
      "path": "15"
    },
    "1188": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "PUSH2",
      "path": "15",
      "value": "0xB31"
    },
    "1191": {
      "fn": "NerveToken.delegate",
      "jump": "i",
      "offset": [3308, 3410],
      "op": "JUMP",
      "path": "15"
    },
    "1192": {
      "offset": [1943, 1992],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1193": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4CE"
    },
    "1196": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1198": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP1",
      "path": "15"
    },
    "1199": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1200": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SUB",
      "path": "15"
    },
    "1201": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1203": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP2",
      "path": "15"
    },
    "1204": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "LT",
      "path": "15"
    },
    "1205": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "ISZERO",
      "path": "15"
    },
    "1206": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4BE"
    },
    "1209": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "JUMPI",
      "path": "15"
    },
    "1210": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1212": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP1",
      "path": "15"
    },
    "1213": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "REVERT",
      "path": "15"
    },
    "1214": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1215": {
      "op": "POP"
    },
    "1216": {
      "offset": [1943, 1992],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1217": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1219": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1221": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1223": {
      "op": "SHL"
    },
    "1224": {
      "op": "SUB"
    },
    "1225": {
      "offset": [1943, 1992],
      "op": "AND",
      "path": "15"
    },
    "1226": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH2",
      "path": "15",
      "value": "0xB3B"
    },
    "1229": {
      "fn": "NerveToken.delegate",
      "jump": "i",
      "offset": [1943, 1992],
      "op": "JUMP",
      "path": "15"
    },
    "1230": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1231": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1233": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP1",
      "path": "15"
    },
    "1234": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "MLOAD",
      "path": "15"
    },
    "1235": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "1240": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP1",
      "path": "15"
    },
    "1241": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP3",
      "path": "15"
    },
    "1242": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "AND",
      "path": "15"
    },
    "1243": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP3",
      "path": "15"
    },
    "1244": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "MSTORE",
      "path": "15"
    },
    "1245": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "MLOAD",
      "path": "15"
    },
    "1246": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP1",
      "path": "15"
    },
    "1247": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP2",
      "path": "15"
    },
    "1248": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP1",
      "path": "15"
    },
    "1249": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SUB",
      "path": "15"
    },
    "1250": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1252": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "ADD",
      "path": "15"
    },
    "1253": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP1",
      "path": "15"
    },
    "1254": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "RETURN",
      "path": "15"
    },
    "1255": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1256": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2E6"
    },
    "1259": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1261": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "DUP1",
      "path": "3"
    },
    "1262": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "1263": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "SUB",
      "path": "3"
    },
    "1264": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1266": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "DUP2",
      "path": "3"
    },
    "1267": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "LT",
      "path": "3"
    },
    "1268": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "ISZERO",
      "path": "3"
    },
    "1269": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4FD"
    },
    "1272": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "JUMPI",
      "path": "3"
    },
    "1273": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1275": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "DUP1",
      "path": "3"
    },
    "1276": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "REVERT",
      "path": "3"
    },
    "1277": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1278": {
      "op": "POP"
    },
    "1279": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1286": {
      "op": "SHL"
    },
    "1287": {
      "op": "SUB"
    },
    "1288": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "AND",
      "path": "3"
    },
    "1289": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB53"
    },
    "1292": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [3399, 3524],
      "op": "JUMP",
      "path": "3"
    },
    "1293": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1717, 1862],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1294": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1717, 1862],
      "op": "PUSH2",
      "path": "1",
      "value": "0x37F"
    },
    "1297": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1717, 1862],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6E"
    },
    "1300": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [1717, 1862],
      "op": "JUMP",
      "path": "1"
    },
    "1301": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1302": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E6"
    },
    "1305": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1307": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "DUP1",
      "path": "15"
    },
    "1308": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1309": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "SUB",
      "path": "15"
    },
    "1310": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1312": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "DUP2",
      "path": "15"
    },
    "1313": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "LT",
      "path": "15"
    },
    "1314": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "ISZERO",
      "path": "15"
    },
    "1315": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH2",
      "path": "15",
      "value": "0x52B"
    },
    "1318": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "JUMPI",
      "path": "15"
    },
    "1319": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1321": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "DUP1",
      "path": "15"
    },
    "1322": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "REVERT",
      "path": "15"
    },
    "1323": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1324": {
      "op": "POP"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1331": {
      "op": "SHL"
    },
    "1332": {
      "op": "SUB"
    },
    "1333": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "DUP2",
      "path": "15"
    },
    "1334": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1335": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "AND",
      "path": "15"
    },
    "1336": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "SWAP1",
      "path": "15"
    },
    "1337": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1339": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "ADD",
      "path": "15"
    },
    "1340": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1341": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "PUSH2",
      "path": "15",
      "value": "0xC32"
    },
    "1344": {
      "fn": "NerveToken.getPriorVotes",
      "jump": "i",
      "offset": [5831, 7047],
      "op": "JUMP",
      "path": "15"
    },
    "1345": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1346": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH2",
      "path": "4",
      "value": "0x37F"
    },
    "1349": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "1351": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "DUP1",
      "path": "4"
    },
    "1352": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "1353": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "SUB",
      "path": "4"
    },
    "1354": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "1356": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "DUP2",
      "path": "4"
    },
    "1357": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "LT",
      "path": "4"
    },
    "1358": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "ISZERO",
      "path": "4"
    },
    "1359": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH2",
      "path": "4",
      "value": "0x557"
    },
    "1362": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "JUMPI",
      "path": "4"
    },
    "1363": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "1365": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "DUP1",
      "path": "4"
    },
    "1366": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "REVERT",
      "path": "4"
    },
    "1367": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1368": {
      "op": "POP"
    },
    "1369": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1371": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1373": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1375": {
      "op": "SHL"
    },
    "1376": {
      "op": "SUB"
    },
    "1377": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "DUP2",
      "path": "4"
    },
    "1378": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "CALLDATALOAD",
      "path": "4"
    },
    "1379": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "AND",
      "path": "4"
    },
    "1380": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "SWAP1",
      "path": "4"
    },
    "1381": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1383": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "ADD",
      "path": "4"
    },
    "1384": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "CALLDATALOAD",
      "path": "4"
    },
    "1385": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE3A"
    },
    "1388": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [919, 1209],
      "op": "JUMP",
      "path": "4"
    },
    "1389": {
      "offset": [2470, 2509],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1390": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E6"
    },
    "1393": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1395": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "DUP1",
      "path": "15"
    },
    "1396": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1397": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "SUB",
      "path": "15"
    },
    "1398": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1400": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "DUP2",
      "path": "15"
    },
    "1401": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "LT",
      "path": "15"
    },
    "1402": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "ISZERO",
      "path": "15"
    },
    "1403": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH2",
      "path": "15",
      "value": "0x583"
    },
    "1406": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "JUMPI",
      "path": "15"
    },
    "1407": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1409": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "DUP1",
      "path": "15"
    },
    "1410": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "REVERT",
      "path": "15"
    },
    "1411": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1412": {
      "op": "POP"
    },
    "1413": {
      "offset": [2470, 2509],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1416": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1420": {
      "op": "SHL"
    },
    "1421": {
      "op": "SUB"
    },
    "1422": {
      "offset": [2470, 2509],
      "op": "AND",
      "path": "15"
    },
    "1423": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH2",
      "path": "15",
      "value": "0xE94"
    },
    "1426": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [2470, 2509],
      "op": "JUMP",
      "path": "15"
    },
    "1427": {
      "fn": "Ownable.owner",
      "offset": [1085, 1170],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1428": {
      "fn": "Ownable.owner",
      "offset": [1085, 1170],
      "op": "PUSH2",
      "path": "1",
      "value": "0x466"
    },
    "1431": {
      "fn": "Ownable.owner",
      "offset": [1085, 1170],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEA6"
    },
    "1434": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [1085, 1170],
      "op": "JUMP",
      "path": "1"
    },
    "1435": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1436": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH2",
      "path": "0",
      "value": "0x466"
    },
    "1439": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1441": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "DUP1",
      "path": "0"
    },
    "1442": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1443": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "SUB",
      "path": "0"
    },
    "1444": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1446": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "DUP2",
      "path": "0"
    },
    "1447": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "LT",
      "path": "0"
    },
    "1448": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "ISZERO",
      "path": "0"
    },
    "1449": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B1"
    },
    "1452": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "JUMPI",
      "path": "0"
    },
    "1453": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1455": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "DUP1",
      "path": "0"
    },
    "1456": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "REVERT",
      "path": "0"
    },
    "1457": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1458": {
      "op": "POP"
    },
    "1459": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "DUP1",
      "path": "0"
    },
    "1460": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1461": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "SWAP1",
      "path": "0"
    },
    "1462": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1464": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "ADD",
      "path": "0"
    },
    "1465": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1466": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEBA"
    },
    "1469": {
      "fn": "AccessControl.getRoleMember",
      "jump": "i",
      "offset": [3965, 4101],
      "op": "JUMP",
      "path": "0"
    },
    "1470": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1471": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CA"
    },
    "1474": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1476": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "DUP1",
      "path": "0"
    },
    "1477": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1478": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "SUB",
      "path": "0"
    },
    "1479": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1481": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "DUP2",
      "path": "0"
    },
    "1482": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "LT",
      "path": "0"
    },
    "1483": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "ISZERO",
      "path": "0"
    },
    "1484": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D4"
    },
    "1487": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "JUMPI",
      "path": "0"
    },
    "1488": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1490": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "DUP1",
      "path": "0"
    },
    "1491": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "REVERT",
      "path": "0"
    },
    "1492": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1493": {
      "op": "POP"
    },
    "1494": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "DUP1",
      "path": "0"
    },
    "1495": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1496": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "SWAP1",
      "path": "0"
    },
    "1497": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1499": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "ADD",
      "path": "0"
    },
    "1500": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1505": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1507": {
      "op": "SHL"
    },
    "1508": {
      "op": "SUB"
    },
    "1509": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "AND",
      "path": "0"
    },
    "1510": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "PUSH2",
      "path": "0",
      "value": "0xED9"
    },
    "1513": {
      "fn": "AccessControl.hasRole",
      "jump": "i",
      "offset": [2950, 3087],
      "op": "JUMP",
      "path": "0"
    },
    "1514": {
      "fn": "ERC20.symbol",
      "offset": [2370, 2463],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1515": {
      "fn": "ERC20.symbol",
      "offset": [2370, 2463],
      "op": "PUSH2",
      "path": "3",
      "value": "0x229"
    },
    "1518": {
      "fn": "ERC20.symbol",
      "offset": [2370, 2463],
      "op": "PUSH2",
      "path": "3",
      "value": "0xEF1"
    },
    "1521": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [2370, 2463],
      "op": "JUMP",
      "path": "3"
    },
    "1522": {
      "offset": [1727, 1776],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1523": {
      "fn": "ERC20.symbol",
      "offset": [1727, 1776],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E6"
    },
    "1526": {
      "fn": "ERC20.symbol",
      "offset": [1727, 1776],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF52"
    },
    "1529": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [1727, 1776],
      "op": "JUMP",
      "path": "0"
    },
    "1530": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1531": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2CA"
    },
    "1534": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1536": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "DUP1",
      "path": "3"
    },
    "1537": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "1538": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "SUB",
      "path": "3"
    },
    "1539": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1541": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "DUP2",
      "path": "3"
    },
    "1542": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "LT",
      "path": "3"
    },
    "1543": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "ISZERO",
      "path": "3"
    },
    "1544": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH2",
      "path": "3",
      "value": "0x610"
    },
    "1547": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "JUMPI",
      "path": "3"
    },
    "1548": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1550": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "DUP1",
      "path": "3"
    },
    "1551": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "REVERT",
      "path": "3"
    },
    "1552": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1553": {
      "op": "POP"
    },
    "1554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1558": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1560": {
      "op": "SHL"
    },
    "1561": {
      "op": "SUB"
    },
    "1562": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "DUP2",
      "path": "3"
    },
    "1563": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1564": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "AND",
      "path": "3"
    },
    "1565": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "SWAP1",
      "path": "3"
    },
    "1566": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1568": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "ADD",
      "path": "3"
    },
    "1569": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1570": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF57"
    },
    "1573": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [6291, 6557],
      "op": "JUMP",
      "path": "3"
    },
    "1574": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1575": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2CA"
    },
    "1578": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1580": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "DUP1",
      "path": "3"
    },
    "1581": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "1582": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "SUB",
      "path": "3"
    },
    "1583": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1585": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "DUP2",
      "path": "3"
    },
    "1586": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "LT",
      "path": "3"
    },
    "1587": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "ISZERO",
      "path": "3"
    },
    "1588": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH2",
      "path": "3",
      "value": "0x63C"
    },
    "1591": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "JUMPI",
      "path": "3"
    },
    "1592": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1594": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "DUP1",
      "path": "3"
    },
    "1595": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "REVERT",
      "path": "3"
    },
    "1596": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1597": {
      "op": "POP"
    },
    "1598": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1600": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1602": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1604": {
      "op": "SHL"
    },
    "1605": {
      "op": "SUB"
    },
    "1606": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "DUP2",
      "path": "3"
    },
    "1607": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1608": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "AND",
      "path": "3"
    },
    "1609": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "SWAP1",
      "path": "3"
    },
    "1610": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1612": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "ADD",
      "path": "3"
    },
    "1613": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1614": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "PUSH2",
      "path": "3",
      "value": "0xFBF"
    },
    "1617": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [3727, 3899],
      "op": "JUMP",
      "path": "3"
    },
    "1618": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1619": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E6"
    },
    "1622": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1624": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "DUP1",
      "path": "15"
    },
    "1625": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1626": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "SUB",
      "path": "15"
    },
    "1627": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1629": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "DUP2",
      "path": "15"
    },
    "1630": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "LT",
      "path": "15"
    },
    "1631": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "ISZERO",
      "path": "15"
    },
    "1632": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "PUSH2",
      "path": "15",
      "value": "0x668"
    },
    "1635": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "JUMPI",
      "path": "15"
    },
    "1636": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1638": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "DUP1",
      "path": "15"
    },
    "1639": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "REVERT",
      "path": "15"
    },
    "1640": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1641": {
      "op": "POP"
    },
    "1642": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1643": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1649": {
      "op": "SHL"
    },
    "1650": {
      "op": "SUB"
    },
    "1651": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "AND",
      "path": "15"
    },
    "1652": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "PUSH2",
      "path": "15",
      "value": "0xFD3"
    },
    "1655": {
      "fn": "NerveToken.getCurrentVotes",
      "jump": "i",
      "offset": [5161, 5409],
      "op": "JUMP",
      "path": "15"
    },
    "1656": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1657": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH2",
      "path": "15",
      "value": "0x37F"
    },
    "1660": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1662": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP1",
      "path": "15"
    },
    "1663": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1664": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "SUB",
      "path": "15"
    },
    "1665": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0xC0"
    },
    "1667": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP2",
      "path": "15"
    },
    "1668": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "LT",
      "path": "15"
    },
    "1669": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "ISZERO",
      "path": "15"
    },
    "1670": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH2",
      "path": "15",
      "value": "0x68E"
    },
    "1673": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "JUMPI",
      "path": "15"
    },
    "1674": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1676": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP1",
      "path": "15"
    },
    "1677": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "REVERT",
      "path": "15"
    },
    "1678": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1679": {
      "op": "POP"
    },
    "1680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1686": {
      "op": "SHL"
    },
    "1687": {
      "op": "SUB"
    },
    "1688": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP2",
      "path": "15"
    },
    "1689": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1690": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "AND",
      "path": "15"
    },
    "1691": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "SWAP1",
      "path": "15"
    },
    "1692": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1694": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP2",
      "path": "15"
    },
    "1695": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "ADD",
      "path": "15"
    },
    "1696": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1697": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "SWAP1",
      "path": "15"
    },
    "1698": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1700": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP2",
      "path": "15"
    },
    "1701": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "ADD",
      "path": "15"
    },
    "1702": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1703": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "SWAP1",
      "path": "15"
    },
    "1704": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0xFF"
    },
    "1706": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "1708": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP3",
      "path": "15"
    },
    "1709": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "ADD",
      "path": "15"
    },
    "1710": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1711": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "AND",
      "path": "15"
    },
    "1712": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "SWAP1",
      "path": "15"
    },
    "1713": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0x80"
    },
    "1715": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "DUP2",
      "path": "15"
    },
    "1716": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "ADD",
      "path": "15"
    },
    "1717": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1718": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "SWAP1",
      "path": "15"
    },
    "1719": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH1",
      "path": "15",
      "value": "0xA0"
    },
    "1721": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "ADD",
      "path": "15"
    },
    "1722": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1723": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1036"
    },
    "1726": {
      "fn": "NerveToken.delegateBySig",
      "jump": "i",
      "offset": [3833, 4967],
      "op": "JUMP",
      "path": "15"
    },
    "1727": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1728": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E6"
    },
    "1731": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1733": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "DUP1",
      "path": "0"
    },
    "1734": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1735": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "SUB",
      "path": "0"
    },
    "1736": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1738": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "DUP2",
      "path": "0"
    },
    "1739": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "LT",
      "path": "0"
    },
    "1740": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "ISZERO",
      "path": "0"
    },
    "1741": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6D5"
    },
    "1744": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "JUMPI",
      "path": "0"
    },
    "1745": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1747": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "DUP1",
      "path": "0"
    },
    "1748": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "REVERT",
      "path": "0"
    },
    "1749": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1750": {
      "op": "POP"
    },
    "1751": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1752": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12A9"
    },
    "1755": {
      "fn": "AccessControl.getRoleMemberCount",
      "jump": "i",
      "offset": [3255, 3380],
      "op": "JUMP",
      "path": "0"
    },
    "1756": {
      "offset": [509, 571],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1757": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [509, 571],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E6"
    },
    "1760": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [509, 571],
      "op": "PUSH2",
      "path": "15",
      "value": "0x12C0"
    },
    "1763": {
      "fn": "AccessControl.getRoleMemberCount",
      "jump": "i",
      "offset": [509, 571],
      "op": "JUMP",
      "path": "15"
    },
    "1764": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1765": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37F"
    },
    "1768": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1770": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "DUP1",
      "path": "0"
    },
    "1771": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1772": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "SUB",
      "path": "0"
    },
    "1773": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1775": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "DUP2",
      "path": "0"
    },
    "1776": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "LT",
      "path": "0"
    },
    "1777": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "ISZERO",
      "path": "0"
    },
    "1778": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6FA"
    },
    "1781": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "JUMPI",
      "path": "0"
    },
    "1782": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1784": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "DUP1",
      "path": "0"
    },
    "1785": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "REVERT",
      "path": "0"
    },
    "1786": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1787": {
      "op": "POP"
    },
    "1788": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "DUP1",
      "path": "0"
    },
    "1789": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1790": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "SWAP1",
      "path": "0"
    },
    "1791": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1793": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "ADD",
      "path": "0"
    },
    "1794": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "1795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1797": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1799": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1801": {
      "op": "SHL"
    },
    "1802": {
      "op": "SUB"
    },
    "1803": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "AND",
      "path": "0"
    },
    "1804": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12E4"
    },
    "1807": {
      "fn": "AccessControl.revokeRole",
      "jump": "i",
      "offset": [5101, 5327],
      "op": "JUMP",
      "path": "0"
    },
    "1808": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1809": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2E6"
    },
    "1812": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1814": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "DUP1",
      "path": "3"
    },
    "1815": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "1816": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "SUB",
      "path": "3"
    },
    "1817": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1819": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "DUP2",
      "path": "3"
    },
    "1820": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "LT",
      "path": "3"
    },
    "1821": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "ISZERO",
      "path": "3"
    },
    "1822": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH2",
      "path": "3",
      "value": "0x726"
    },
    "1825": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "JUMPI",
      "path": "3"
    },
    "1826": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1828": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "DUP1",
      "path": "3"
    },
    "1829": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "REVERT",
      "path": "3"
    },
    "1830": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1831": {
      "op": "POP"
    },
    "1832": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1834": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1836": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1838": {
      "op": "SHL"
    },
    "1839": {
      "op": "SUB"
    },
    "1840": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "DUP2",
      "path": "3"
    },
    "1841": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1842": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "DUP2",
      "path": "3"
    },
    "1843": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "AND",
      "path": "3"
    },
    "1844": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "SWAP2",
      "path": "3"
    },
    "1845": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1847": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "ADD",
      "path": "3"
    },
    "1848": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "1849": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "AND",
      "path": "3"
    },
    "1850": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "PUSH2",
      "path": "3",
      "value": "0x133D"
    },
    "1853": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [3957, 4106],
      "op": "JUMP",
      "path": "3"
    },
    "1854": {
      "offset": [2275, 2392],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1855": {
      "fn": "ERC20.allowance",
      "offset": [2275, 2392],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E6"
    },
    "1858": {
      "fn": "ERC20.allowance",
      "offset": [2275, 2392],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1368"
    },
    "1861": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [2275, 2392],
      "op": "JUMP",
      "path": "15"
    },
    "1862": {
      "offset": [1807, 1877],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1863": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH2",
      "path": "15",
      "value": "0x778"
    },
    "1866": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "1868": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "1869": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "1870": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SUB",
      "path": "15"
    },
    "1871": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1873": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP2",
      "path": "15"
    },
    "1874": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "LT",
      "path": "15"
    },
    "1875": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "ISZERO",
      "path": "15"
    },
    "1876": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH2",
      "path": "15",
      "value": "0x75C"
    },
    "1879": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "JUMPI",
      "path": "15"
    },
    "1880": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "1882": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "1883": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "REVERT",
      "path": "15"
    },
    "1884": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1885": {
      "op": "POP"
    },
    "1886": {
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "1887": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1892": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1894": {
      "op": "SHL"
    },
    "1895": {
      "op": "SUB"
    },
    "1896": {
      "offset": [1807, 1877],
      "op": "AND",
      "path": "15"
    },
    "1897": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "1898": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1900": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "ADD",
      "path": "15"
    },
    "1901": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "1902": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "1907": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "AND",
      "path": "15"
    },
    "1908": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH2",
      "path": "15",
      "value": "0x138C"
    },
    "1911": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [1807, 1877],
      "op": "JUMP",
      "path": "15"
    },
    "1912": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "JUMPDEST",
      "path": "15"
    },
    "1913": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "1915": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "1916": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MLOAD",
      "path": "15"
    },
    "1917": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "1922": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "1923": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP4",
      "path": "15"
    },
    "1924": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "AND",
      "path": "15"
    },
    "1925": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP4",
      "path": "15"
    },
    "1926": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MSTORE",
      "path": "15"
    },
    "1927": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1929": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP4",
      "path": "15"
    },
    "1930": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "ADD",
      "path": "15"
    },
    "1931": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP2",
      "path": "15"
    },
    "1932": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "1933": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP2",
      "path": "15"
    },
    "1934": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MSTORE",
      "path": "15"
    },
    "1935": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "1936": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MLOAD",
      "path": "15"
    },
    "1937": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP2",
      "path": "15"
    },
    "1938": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP3",
      "path": "15"
    },
    "1939": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "1940": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SUB",
      "path": "15"
    },
    "1941": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "ADD",
      "path": "15"
    },
    "1942": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "1943": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "RETURN",
      "path": "15"
    },
    "1944": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1945": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "PUSH2",
      "path": "1",
      "value": "0x37F"
    },
    "1948": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1950": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "DUP1",
      "path": "1"
    },
    "1951": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "1952": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "SUB",
      "path": "1"
    },
    "1953": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1955": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "DUP2",
      "path": "1"
    },
    "1956": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "LT",
      "path": "1"
    },
    "1957": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "ISZERO",
      "path": "1"
    },
    "1958": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7AE"
    },
    "1961": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "JUMPI",
      "path": "1"
    },
    "1962": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1964": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "DUP1",
      "path": "1"
    },
    "1965": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "REVERT",
      "path": "1"
    },
    "1966": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1967": {
      "op": "POP"
    },
    "1968": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "1969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1973": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1975": {
      "op": "SHL"
    },
    "1976": {
      "op": "SUB"
    },
    "1977": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "AND",
      "path": "1"
    },
    "1978": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13B9"
    },
    "1981": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [2011, 2251],
      "op": "JUMP",
      "path": "1"
    },
    "1982": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1983": {
      "fn": "ERC20.name",
      "offset": [2245, 2250],
      "op": "PUSH1",
      "path": "3",
      "statement": 0,
      "value": "0x3"
    },
    "1985": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP1",
      "path": "3"
    },
    "1986": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SLOAD",
      "path": "3"
    },
    "1987": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1989": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP1",
      "path": "3"
    },
    "1990": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MLOAD",
      "path": "3"
    },
    "1991": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1993": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1995": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1997": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1999": {
      "op": "NOT"
    },
    "2000": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "2003": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "2005": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP9",
      "path": "3"
    },
    "2006": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "AND",
      "path": "3"
    },
    "2007": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ISZERO",
      "path": "3"
    },
    "2008": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MUL",
      "path": "3"
    },
    "2009": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2010": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2011": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP6",
      "path": "3"
    },
    "2012": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "AND",
      "path": "3"
    },
    "2013": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP5",
      "path": "3"
    },
    "2014": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2015": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP5",
      "path": "3"
    },
    "2016": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DIV",
      "path": "3"
    },
    "2017": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP4",
      "path": "3"
    },
    "2018": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP5",
      "path": "3"
    },
    "2019": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2020": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP2",
      "path": "3"
    },
    "2021": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2022": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DIV",
      "path": "3"
    },
    "2023": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP2",
      "path": "3"
    },
    "2024": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MUL",
      "path": "3"
    },
    "2025": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2026": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2027": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP2",
      "path": "3"
    },
    "2028": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2029": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2030": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP3",
      "path": "3"
    },
    "2031": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MSTORE",
      "path": "3"
    },
    "2032": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2033": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP2",
      "path": "3"
    },
    "2034": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MSTORE",
      "path": "3"
    },
    "2035": {
      "fn": "ERC20.name",
      "offset": [2213, 2226],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "2037": {
      "fn": "ERC20.name",
      "offset": [2213, 2226],
      "op": "SWAP4",
      "path": "3"
    },
    "2038": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2039": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP3",
      "path": "3"
    },
    "2040": {
      "fn": "ERC20.name",
      "offset": [2245, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2041": {
      "fn": "ERC20.name",
      "offset": [2245, 2250],
      "op": "SWAP2",
      "path": "3"
    },
    "2042": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP4",
      "path": "3"
    },
    "2043": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2044": {
      "fn": "ERC20.name",
      "offset": [2245, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2045": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2046": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP1",
      "path": "3"
    },
    "2047": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ISZERO",
      "path": "3"
    },
    "2048": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH2",
      "path": "3",
      "value": "0x84A"
    },
    "2051": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMPI",
      "path": "3"
    },
    "2052": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP1",
      "path": "3"
    },
    "2053": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "2055": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "LT",
      "path": "3"
    },
    "2056": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH2",
      "path": "3",
      "value": "0x81F"
    },
    "2059": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMPI",
      "path": "3"
    },
    "2060": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "2063": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP1",
      "path": "3"
    },
    "2064": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP4",
      "path": "3"
    },
    "2065": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SLOAD",
      "path": "3"
    },
    "2066": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DIV",
      "path": "3"
    },
    "2067": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MUL",
      "path": "3"
    },
    "2068": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP4",
      "path": "3"
    },
    "2069": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MSTORE",
      "path": "3"
    },
    "2070": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP2",
      "path": "3"
    },
    "2071": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2073": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2074": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP2",
      "path": "3"
    },
    "2075": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH2",
      "path": "3",
      "value": "0x84A"
    },
    "2078": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMP",
      "path": "3"
    },
    "2079": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2080": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2081": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2082": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP2",
      "path": "3"
    },
    "2083": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2084": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2086": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MSTORE",
      "path": "3"
    },
    "2087": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2089": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2091": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "KECCAK256",
      "path": "3"
    },
    "2092": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2093": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2094": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP2",
      "path": "3"
    },
    "2095": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SLOAD",
      "path": "3"
    },
    "2096": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP2",
      "path": "3"
    },
    "2097": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "MSTORE",
      "path": "3"
    },
    "2098": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2099": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "2101": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2102": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2103": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2105": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2106": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP1",
      "path": "3"
    },
    "2107": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP4",
      "path": "3"
    },
    "2108": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "GT",
      "path": "3"
    },
    "2109": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH2",
      "path": "3",
      "value": "0x82D"
    },
    "2112": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMPI",
      "path": "3"
    },
    "2113": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2114": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2115": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SUB",
      "path": "3"
    },
    "2116": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "2118": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "AND",
      "path": "3"
    },
    "2119": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "DUP3",
      "path": "3"
    },
    "2120": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "ADD",
      "path": "3"
    },
    "2121": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP2",
      "path": "3"
    },
    "2122": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2123": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "POP",
      "path": "3"
    },
    "2124": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "POP",
      "path": "3"
    },
    "2125": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "POP",
      "path": "3"
    },
    "2126": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "POP",
      "path": "3"
    },
    "2127": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "POP",
      "path": "3"
    },
    "2128": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "SWAP1",
      "path": "3"
    },
    "2129": {
      "fn": "ERC20.name",
      "offset": [2238, 2250],
      "op": "POP",
      "path": "3"
    },
    "2130": {
      "fn": "ERC20.name",
      "offset": [2168, 2257],
      "op": "SWAP1",
      "path": "3"
    },
    "2131": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [2168, 2257],
      "op": "JUMP",
      "path": "3"
    },
    "2132": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2133": {
      "fn": "ERC20.approve",
      "offset": [4327, 4331],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2135": {
      "fn": "ERC20.approve",
      "offset": [4343, 4382],
      "op": "PUSH2",
      "path": "3",
      "statement": 1,
      "value": "0x868"
    },
    "2138": {
      "fn": "ERC20.approve",
      "offset": [4352, 4364],
      "op": "PUSH2",
      "path": "3",
      "value": "0x861"
    },
    "2141": {
      "fn": "ERC20.approve",
      "offset": [4352, 4362],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "2144": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [4352, 4364],
      "op": "JUMP",
      "path": "3"
    },
    "2145": {
      "fn": "ERC20.approve",
      "offset": [4352, 4364],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2146": {
      "fn": "ERC20.approve",
      "offset": [4366, 4373],
      "op": "DUP5",
      "path": "3"
    },
    "2147": {
      "fn": "ERC20.approve",
      "offset": [4375, 4381],
      "op": "DUP5",
      "path": "3"
    },
    "2148": {
      "fn": "ERC20.approve",
      "offset": [4343, 4351],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14F2"
    },
    "2151": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [4343, 4382],
      "op": "JUMP",
      "path": "3"
    },
    "2152": {
      "fn": "ERC20.approve",
      "offset": [4343, 4382],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2153": {
      "op": "POP"
    },
    "2154": {
      "fn": "ERC20.approve",
      "offset": [4399, 4403],
      "op": "PUSH1",
      "path": "3",
      "statement": 2,
      "value": "0x1"
    },
    "2156": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2157": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP3",
      "path": "3"
    },
    "2158": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "SWAP2",
      "path": "3"
    },
    "2159": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "POP",
      "path": "3"
    },
    "2160": {
      "fn": "ERC20.approve",
      "offset": [4244, 4410],
      "op": "POP",
      "path": "3"
    },
    "2161": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [4244, 4410],
      "op": "JUMP",
      "path": "3"
    },
    "2162": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2163": {
      "fn": "ERC20.totalSupply",
      "offset": [3322, 3334],
      "op": "PUSH1",
      "path": "3",
      "statement": 3,
      "value": "0x2"
    },
    "2165": {
      "fn": "ERC20.totalSupply",
      "offset": [3322, 3334],
      "op": "SLOAD",
      "path": "3"
    },
    "2166": {
      "fn": "ERC20.totalSupply",
      "offset": [3235, 3341],
      "op": "SWAP1",
      "path": "3"
    },
    "2167": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [3235, 3341],
      "op": "JUMP",
      "path": "3"
    },
    "2168": {
      "offset": [2062, 2184],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2169": {
      "offset": [2104, 2184],
      "op": "PUSH32",
      "path": "15",
      "value": "0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866"
    },
    "2202": {
      "offset": [2062, 2184],
      "op": "DUP2",
      "path": "15"
    },
    "2203": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [2062, 2184],
      "op": "JUMP",
      "path": "15"
    },
    "2204": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2205": {
      "fn": "ERC20.transferFrom",
      "offset": [4983, 4987],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2207": {
      "fn": "ERC20.transferFrom",
      "offset": [4999, 5035],
      "op": "PUSH2",
      "path": "3",
      "statement": 4,
      "value": "0x8A9"
    },
    "2210": {
      "fn": "ERC20.transferFrom",
      "offset": [5009, 5015],
      "op": "DUP5",
      "path": "3"
    },
    "2211": {
      "fn": "ERC20.transferFrom",
      "offset": [5017, 5026],
      "op": "DUP5",
      "path": "3"
    },
    "2212": {
      "fn": "ERC20.transferFrom",
      "offset": [5028, 5034],
      "op": "DUP5",
      "path": "3"
    },
    "2213": {
      "fn": "ERC20.transferFrom",
      "offset": [4999, 5008],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15DE"
    },
    "2216": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [4999, 5035],
      "op": "JUMP",
      "path": "3"
    },
    "2217": {
      "fn": "ERC20.transferFrom",
      "offset": [4999, 5035],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2218": {
      "fn": "ERC20.transferFrom",
      "offset": [5045, 5166],
      "op": "PUSH2",
      "path": "3",
      "statement": 5,
      "value": "0x919"
    },
    "2221": {
      "fn": "ERC20.transferFrom",
      "offset": [5054, 5060],
      "op": "DUP5",
      "path": "3"
    },
    "2222": {
      "fn": "ERC20.transferFrom",
      "offset": [5062, 5074],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8B5"
    },
    "2225": {
      "fn": "ERC20.transferFrom",
      "offset": [5062, 5072],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "2228": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [5062, 5074],
      "op": "JUMP",
      "path": "3"
    },
    "2229": {
      "fn": "ERC20.transferFrom",
      "offset": [5062, 5074],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2230": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH2",
      "path": "3",
      "value": "0x914"
    },
    "2233": {
      "fn": "ERC20.transferFrom",
      "offset": [5114, 5120],
      "op": "DUP6",
      "path": "3"
    },
    "2234": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2236": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "MLOAD",
      "path": "3"
    },
    "2237": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "DUP1",
      "path": "3"
    },
    "2238": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "2240": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "ADD",
      "path": "3"
    },
    "2241": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2243": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "MSTORE",
      "path": "3"
    },
    "2244": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "DUP1",
      "path": "3"
    },
    "2245": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH1",
      "path": "3",
      "value": "0x28"
    },
    "2247": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "DUP2",
      "path": "3"
    },
    "2248": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "MSTORE",
      "path": "3"
    },
    "2249": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2251": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "ADD",
      "path": "3"
    },
    "2252": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH2",
      "path": "3",
      "value": "0x229A"
    },
    "2255": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "PUSH1",
      "path": "3",
      "value": "0x28"
    },
    "2257": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "SWAP2",
      "path": "3"
    },
    "2258": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "CODECOPY",
      "path": "3"
    },
    "2259": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2261": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2265": {
      "op": "SHL"
    },
    "2266": {
      "op": "SUB"
    },
    "2267": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "DUP11",
      "path": "3"
    },
    "2268": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "AND",
      "path": "3"
    },
    "2269": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2271": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "SWAP1",
      "path": "3"
    },
    "2272": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "DUP2",
      "path": "3"
    },
    "2273": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "MSTORE",
      "path": "3"
    },
    "2274": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5087],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "2276": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2278": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "MSTORE",
      "path": "3"
    },
    "2279": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2281": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "DUP2",
      "path": "3"
    },
    "2282": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "KECCAK256",
      "path": "3"
    },
    "2283": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5095],
      "op": "SWAP1",
      "path": "3"
    },
    "2284": {
      "fn": "ERC20.transferFrom",
      "offset": [5096, 5108],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8F3"
    },
    "2287": {
      "fn": "ERC20.transferFrom",
      "offset": [5096, 5106],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "2290": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [5096, 5108],
      "op": "JUMP",
      "path": "3"
    },
    "2291": {
      "fn": "ERC20.transferFrom",
      "offset": [5096, 5108],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2292": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2294": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2296": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2298": {
      "op": "SHL"
    },
    "2299": {
      "op": "SUB"
    },
    "2300": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "AND",
      "path": "3"
    },
    "2301": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "DUP2",
      "path": "3"
    },
    "2302": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "MSTORE",
      "path": "3"
    },
    "2303": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2305": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "DUP2",
      "path": "3"
    },
    "2306": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "ADD",
      "path": "3"
    },
    "2307": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "SWAP2",
      "path": "3"
    },
    "2308": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "SWAP1",
      "path": "3"
    },
    "2309": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "SWAP2",
      "path": "3"
    },
    "2310": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "MSTORE",
      "path": "3"
    },
    "2311": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2313": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "ADD",
      "path": "3"
    },
    "2314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2316": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "KECCAK256",
      "path": "3"
    },
    "2317": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "SLOAD",
      "path": "3"
    },
    "2318": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5109],
      "op": "SWAP2",
      "path": "3"
    },
    "2319": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "SWAP1",
      "path": "3"
    },
    "2320": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5113],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1739"
    },
    "2323": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [5076, 5165],
      "op": "JUMP",
      "path": "3"
    },
    "2324": {
      "fn": "ERC20.transferFrom",
      "offset": [5076, 5165],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2325": {
      "fn": "ERC20.transferFrom",
      "offset": [5045, 5053],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14F2"
    },
    "2328": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [5045, 5166],
      "op": "JUMP",
      "path": "3"
    },
    "2329": {
      "fn": "ERC20.transferFrom",
      "offset": [5045, 5166],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2330": {
      "op": "POP"
    },
    "2331": {
      "fn": "ERC20.transferFrom",
      "offset": [5183, 5187],
      "op": "PUSH1",
      "path": "3",
      "statement": 6,
      "value": "0x1"
    },
    "2333": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SWAP4",
      "path": "3"
    },
    "2334": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "SWAP3",
      "path": "3"
    },
    "2335": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "POP",
      "path": "3"
    },
    "2336": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "POP",
      "path": "3"
    },
    "2337": {
      "fn": "ERC20.transferFrom",
      "offset": [4877, 5194],
      "op": "POP",
      "path": "3"
    },
    "2338": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [4877, 5194],
      "op": "JUMP",
      "path": "3"
    },
    "2339": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4282, 4394],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2340": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4339, 4346],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2342": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "SWAP1",
      "path": "0",
      "statement": 7
    },
    "2343": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "DUP2",
      "path": "0"
    },
    "2344": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "MSTORE",
      "path": "0"
    },
    "2345": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4371],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "2347": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2349": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "MSTORE",
      "path": "0"
    },
    "2350": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2352": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "SWAP1",
      "path": "0"
    },
    "2353": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4377],
      "op": "KECCAK256",
      "path": "0"
    },
    "2354": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4387],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2356": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4387],
      "op": "ADD",
      "path": "0"
    },
    "2357": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4387],
      "op": "SLOAD",
      "path": "0"
    },
    "2358": {
      "fn": "AccessControl.getRoleAdmin",
      "offset": [4365, 4387],
      "op": "SWAP1",
      "path": "0"
    },
    "2359": {
      "fn": "AccessControl.getRoleAdmin",
      "jump": "o",
      "offset": [4282, 4394],
      "op": "JUMP",
      "path": "0"
    },
    "2360": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2361": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "PUSH1",
      "path": "0",
      "statement": 8,
      "value": "0x0"
    },
    "2363": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "DUP3",
      "path": "0"
    },
    "2364": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "DUP2",
      "path": "0"
    },
    "2365": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "MSTORE",
      "path": "0"
    },
    "2366": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4741],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "2368": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2370": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "MSTORE",
      "path": "0"
    },
    "2371": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2373": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "SWAP1",
      "path": "0"
    },
    "2374": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4747],
      "op": "KECCAK256",
      "path": "0"
    },
    "2375": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4757],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2377": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4757],
      "op": "ADD",
      "path": "0"
    },
    "2378": {
      "fn": "AccessControl.grantRole",
      "offset": [4735, 4757],
      "op": "SLOAD",
      "path": "0"
    },
    "2379": {
      "fn": "AccessControl.grantRole",
      "offset": [4727, 4772],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95B"
    },
    "2382": {
      "fn": "AccessControl.grantRole",
      "offset": [4727, 4772],
      "op": "SWAP1",
      "path": "0"
    },
    "2383": {
      "fn": "AccessControl.grantRole",
      "offset": [4759, 4771],
      "op": "PUSH2",
      "path": "0",
      "value": "0x956"
    },
    "2386": {
      "fn": "AccessControl.grantRole",
      "offset": [4759, 4769],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14EE"
    },
    "2389": {
      "fn": "AccessControl.grantRole",
      "jump": "i",
      "offset": [4759, 4771],
      "op": "JUMP",
      "path": "0"
    },
    "2390": {
      "fn": "AccessControl.grantRole",
      "offset": [4759, 4771],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2391": {
      "fn": "AccessControl.grantRole",
      "offset": [4727, 4734],
      "op": "PUSH2",
      "path": "0",
      "value": "0xED9"
    },
    "2394": {
      "fn": "AccessControl.grantRole",
      "jump": "i",
      "offset": [4727, 4772],
      "op": "JUMP",
      "path": "0"
    },
    "2395": {
      "branch": 128,
      "fn": "AccessControl.grantRole",
      "offset": [4727, 4772],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2396": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH2",
      "path": "0",
      "value": "0x996"
    },
    "2399": {
      "branch": 128,
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "JUMPI",
      "path": "0"
    },
    "2400": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2402": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "MLOAD",
      "path": "0"
    },
    "2403": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2409": {
      "op": "SHL"
    },
    "2410": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP2",
      "path": "0"
    },
    "2411": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "MSTORE",
      "path": "0"
    },
    "2412": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2414": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "ADD",
      "path": "0"
    },
    "2415": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP1",
      "path": "0"
    },
    "2416": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP1",
      "path": "0"
    },
    "2417": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2419": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "ADD",
      "path": "0"
    },
    "2420": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP3",
      "path": "0"
    },
    "2421": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP2",
      "path": "0"
    },
    "2422": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "SUB",
      "path": "0"
    },
    "2423": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP3",
      "path": "0"
    },
    "2424": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "MSTORE",
      "path": "0"
    },
    "2425": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2F"
    },
    "2427": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP2",
      "path": "0"
    },
    "2428": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "MSTORE",
      "path": "0"
    },
    "2429": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2431": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "ADD",
      "path": "0"
    },
    "2432": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP1",
      "path": "0"
    },
    "2433": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH2",
      "path": "0",
      "value": "0x210C"
    },
    "2436": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2F"
    },
    "2438": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "SWAP2",
      "path": "0"
    },
    "2439": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "CODECOPY",
      "path": "0"
    },
    "2440": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2442": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "ADD",
      "path": "0"
    },
    "2443": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "SWAP2",
      "path": "0"
    },
    "2444": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "POP",
      "path": "0"
    },
    "2445": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "POP",
      "path": "0"
    },
    "2446": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2448": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "MLOAD",
      "path": "0"
    },
    "2449": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "DUP1",
      "path": "0"
    },
    "2450": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "SWAP2",
      "path": "0"
    },
    "2451": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "SUB",
      "path": "0"
    },
    "2452": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "SWAP1",
      "path": "0"
    },
    "2453": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "REVERT",
      "path": "0"
    },
    "2454": {
      "fn": "AccessControl.grantRole",
      "offset": [4719, 4824],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2455": {
      "fn": "AccessControl.grantRole",
      "offset": [4835, 4860],
      "op": "PUSH2",
      "path": "0",
      "statement": 9,
      "value": "0x9A0"
    },
    "2458": {
      "fn": "AccessControl.grantRole",
      "offset": [4846, 4850],
      "op": "DUP3",
      "path": "0"
    },
    "2459": {
      "fn": "AccessControl.grantRole",
      "offset": [4852, 4859],
      "op": "DUP3",
      "path": "0"
    },
    "2460": {
      "fn": "AccessControl.grantRole",
      "offset": [4835, 4845],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17D0"
    },
    "2463": {
      "fn": "AccessControl.grantRole",
      "jump": "i",
      "offset": [4835, 4860],
      "op": "JUMP",
      "path": "0"
    },
    "2464": {
      "fn": "AccessControl.grantRole",
      "offset": [4835, 4860],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2465": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "POP",
      "path": "0"
    },
    "2466": {
      "fn": "AccessControl.grantRole",
      "offset": [4644, 4867],
      "op": "POP",
      "path": "0"
    },
    "2467": {
      "fn": "AccessControl.grantRole",
      "jump": "o",
      "offset": [4644, 4867],
      "op": "JUMP",
      "path": "0"
    },
    "2468": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2469": {
      "fn": "ERC20.decimals",
      "offset": [3159, 3168],
      "op": "PUSH1",
      "path": "3",
      "statement": 10,
      "value": "0x5"
    },
    "2471": {
      "fn": "ERC20.decimals",
      "offset": [3159, 3168],
      "op": "SLOAD",
      "path": "3"
    },
    "2472": {
      "fn": "ERC20.decimals",
      "offset": [3159, 3168],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "2474": {
      "fn": "ERC20.decimals",
      "offset": [3159, 3168],
      "op": "AND",
      "path": "3"
    },
    "2475": {
      "fn": "ERC20.decimals",
      "offset": [3086, 3175],
      "op": "SWAP1",
      "path": "3"
    },
    "2476": {
      "fn": "ERC20.decimals",
      "jump": "o",
      "offset": [3086, 3175],
      "op": "JUMP",
      "path": "3"
    },
    "2477": {
      "fn": "AccessControl.renounceRole",
      "offset": [5818, 6023],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2478": {
      "fn": "AccessControl.renounceRole",
      "offset": [5915, 5927],
      "op": "PUSH2",
      "path": "0",
      "statement": 11,
      "value": "0x9B5"
    },
    "2481": {
      "fn": "AccessControl.renounceRole",
      "offset": [5915, 5925],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14EE"
    },
    "2484": {
      "fn": "AccessControl.renounceRole",
      "jump": "i",
      "offset": [5915, 5927],
      "op": "JUMP",
      "path": "0"
    },
    "2485": {
      "fn": "AccessControl.renounceRole",
      "offset": [5915, 5927],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2486": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2488": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2490": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2492": {
      "op": "SHL"
    },
    "2493": {
      "op": "SUB"
    },
    "2494": {
      "fn": "AccessControl.renounceRole",
      "offset": [5904, 5927],
      "op": "AND",
      "path": "0"
    },
    "2495": {
      "fn": "AccessControl.renounceRole",
      "offset": [5904, 5911],
      "op": "DUP2",
      "path": "0"
    },
    "2496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2500": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2502": {
      "op": "SHL"
    },
    "2503": {
      "op": "SUB"
    },
    "2504": {
      "fn": "AccessControl.renounceRole",
      "offset": [5904, 5927],
      "op": "AND",
      "path": "0"
    },
    "2505": {
      "branch": 129,
      "fn": "AccessControl.renounceRole",
      "offset": [5904, 5927],
      "op": "EQ",
      "path": "0"
    },
    "2506": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA04"
    },
    "2509": {
      "branch": 129,
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "JUMPI",
      "path": "0"
    },
    "2510": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2512": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "MLOAD",
      "path": "0"
    },
    "2513": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2517": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2519": {
      "op": "SHL"
    },
    "2520": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP2",
      "path": "0"
    },
    "2521": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "MSTORE",
      "path": "0"
    },
    "2522": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2524": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "ADD",
      "path": "0"
    },
    "2525": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP1",
      "path": "0"
    },
    "2526": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP1",
      "path": "0"
    },
    "2527": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2529": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "ADD",
      "path": "0"
    },
    "2530": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP3",
      "path": "0"
    },
    "2531": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP2",
      "path": "0"
    },
    "2532": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "SUB",
      "path": "0"
    },
    "2533": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP3",
      "path": "0"
    },
    "2534": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "MSTORE",
      "path": "0"
    },
    "2535": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2F"
    },
    "2537": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP2",
      "path": "0"
    },
    "2538": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "MSTORE",
      "path": "0"
    },
    "2539": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2541": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "ADD",
      "path": "0"
    },
    "2542": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP1",
      "path": "0"
    },
    "2543": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH2",
      "path": "0",
      "value": "0x239A"
    },
    "2546": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2F"
    },
    "2548": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "SWAP2",
      "path": "0"
    },
    "2549": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "CODECOPY",
      "path": "0"
    },
    "2550": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2552": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "ADD",
      "path": "0"
    },
    "2553": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "SWAP2",
      "path": "0"
    },
    "2554": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "POP",
      "path": "0"
    },
    "2555": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "POP",
      "path": "0"
    },
    "2556": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2558": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "MLOAD",
      "path": "0"
    },
    "2559": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "DUP1",
      "path": "0"
    },
    "2560": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "SWAP2",
      "path": "0"
    },
    "2561": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "SUB",
      "path": "0"
    },
    "2562": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "SWAP1",
      "path": "0"
    },
    "2563": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "REVERT",
      "path": "0"
    },
    "2564": {
      "fn": "AccessControl.renounceRole",
      "offset": [5896, 5979],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2565": {
      "fn": "AccessControl.renounceRole",
      "offset": [5990, 6016],
      "op": "PUSH2",
      "path": "0",
      "statement": 12,
      "value": "0x9A0"
    },
    "2568": {
      "fn": "AccessControl.renounceRole",
      "offset": [6002, 6006],
      "op": "DUP3",
      "path": "0"
    },
    "2569": {
      "fn": "AccessControl.renounceRole",
      "offset": [6008, 6015],
      "op": "DUP3",
      "path": "0"
    },
    "2570": {
      "fn": "AccessControl.renounceRole",
      "offset": [5990, 6001],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1839"
    },
    "2573": {
      "fn": "AccessControl.renounceRole",
      "jump": "i",
      "offset": [5990, 6016],
      "op": "JUMP",
      "path": "0"
    },
    "2574": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5589, 5804],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2575": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5677, 5681],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2577": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5693, 5776],
      "op": "PUSH2",
      "path": "3",
      "statement": 13,
      "value": "0x868"
    },
    "2580": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5702, 5714],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA1B"
    },
    "2583": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5702, 5712],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "2586": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [5702, 5714],
      "op": "JUMP",
      "path": "3"
    },
    "2587": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5702, 5714],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2588": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5716, 5723],
      "op": "DUP5",
      "path": "3"
    },
    "2589": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5775],
      "op": "PUSH2",
      "path": "3",
      "value": "0x914"
    },
    "2592": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5764, 5774],
      "op": "DUP6",
      "path": "3"
    },
    "2593": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5736],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "2595": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2597": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5737, 5749],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA2C"
    },
    "2600": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5737, 5747],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "2603": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [5737, 5749],
      "op": "JUMP",
      "path": "3"
    },
    "2604": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5737, 5749],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2607": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2609": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2611": {
      "op": "SHL"
    },
    "2612": {
      "op": "SUB"
    },
    "2613": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "SWAP1",
      "path": "3"
    },
    "2614": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "DUP2",
      "path": "3"
    },
    "2615": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "AND",
      "path": "3"
    },
    "2616": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "DUP3",
      "path": "3"
    },
    "2617": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "MSTORE",
      "path": "3"
    },
    "2618": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2620": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "DUP1",
      "path": "3"
    },
    "2621": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "DUP4",
      "path": "3"
    },
    "2622": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "ADD",
      "path": "3"
    },
    "2623": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "SWAP4",
      "path": "3"
    },
    "2624": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "SWAP1",
      "path": "3"
    },
    "2625": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "SWAP4",
      "path": "3"
    },
    "2626": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "MSTORE",
      "path": "3"
    },
    "2627": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2629": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "SWAP2",
      "path": "3"
    },
    "2630": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "DUP3",
      "path": "3"
    },
    "2631": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "ADD",
      "path": "3"
    },
    "2632": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2634": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "SWAP1",
      "path": "3"
    },
    "2635": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "DUP2",
      "path": "3"
    },
    "2636": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5750],
      "op": "KECCAK256",
      "path": "3"
    },
    "2637": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "SWAP2",
      "path": "3"
    },
    "2638": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "DUP13",
      "path": "3"
    },
    "2639": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "AND",
      "path": "3"
    },
    "2640": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "DUP2",
      "path": "3"
    },
    "2641": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "MSTORE",
      "path": "3"
    },
    "2642": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "SWAP3",
      "path": "3"
    },
    "2643": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "MSTORE",
      "path": "3"
    },
    "2644": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "SWAP1",
      "path": "3"
    },
    "2645": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "KECCAK256",
      "path": "3"
    },
    "2646": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "SLOAD",
      "path": "3"
    },
    "2647": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5759],
      "op": "SWAP1",
      "path": "3"
    },
    "2648": {
      "fn": "ERC20.increaseAllowance",
      "offset": [5725, 5763],
      "op": "PUSH2",
      "path": "3",
      "value": "0x18A2"
    },
    "2651": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [5725, 5775],
      "op": "JUMP",
      "path": "3"
    },
    "2652": {
      "fn": "NerveToken.mint",
      "offset": [783, 1071],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2653": {
      "fn": "NerveToken.mint",
      "offset": [914, 946],
      "op": "PUSH2",
      "path": "15",
      "statement": 14,
      "value": "0xA86"
    },
    "2656": {
      "offset": [547, 571],
      "op": "PUSH32",
      "path": "15",
      "value": "0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
    },
    "2689": {
      "fn": "NerveToken.mint",
      "offset": [935, 945],
      "op": "CALLER",
      "path": "15"
    },
    "2690": {
      "fn": "NerveToken.mint",
      "offset": [914, 921],
      "op": "PUSH2",
      "path": "15",
      "value": "0xED9"
    },
    "2693": {
      "fn": "NerveToken.mint",
      "jump": "i",
      "offset": [914, 946],
      "op": "JUMP",
      "path": "15"
    },
    "2694": {
      "branch": 108,
      "fn": "NerveToken.mint",
      "offset": [914, 946],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2695": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH2",
      "path": "15",
      "value": "0xAD0"
    },
    "2698": {
      "branch": 108,
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "JUMPI",
      "path": "15"
    },
    "2699": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "2701": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "DUP1",
      "path": "15"
    },
    "2702": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "MLOAD",
      "path": "15"
    },
    "2703": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2707": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2709": {
      "op": "SHL"
    },
    "2710": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "DUP2",
      "path": "15"
    },
    "2711": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "MSTORE",
      "path": "15"
    },
    "2712": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "2714": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "2716": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "DUP3",
      "path": "15"
    },
    "2717": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "ADD",
      "path": "15"
    },
    "2718": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "MSTORE",
      "path": "15"
    },
    "2719": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x16"
    },
    "2721": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x24"
    },
    "2723": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "DUP3",
      "path": "15"
    },
    "2724": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "ADD",
      "path": "15"
    },
    "2725": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "MSTORE",
      "path": "15"
    },
    "2726": {
      "op": "PUSH22",
      "value": "0x21B0B63632B91034B9903737BA10309036B4B73A32B9"
    },
    "2749": {
      "op": "PUSH1",
      "value": "0x51"
    },
    "2751": {
      "op": "SHL"
    },
    "2752": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x44"
    },
    "2754": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "DUP3",
      "path": "15"
    },
    "2755": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "ADD",
      "path": "15"
    },
    "2756": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "MSTORE",
      "path": "15"
    },
    "2757": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "SWAP1",
      "path": "15"
    },
    "2758": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "MLOAD",
      "path": "15"
    },
    "2759": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "SWAP1",
      "path": "15"
    },
    "2760": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "DUP2",
      "path": "15"
    },
    "2761": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "SWAP1",
      "path": "15"
    },
    "2762": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "SUB",
      "path": "15"
    },
    "2763": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "PUSH1",
      "path": "15",
      "value": "0x64"
    },
    "2765": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "ADD",
      "path": "15"
    },
    "2766": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "SWAP1",
      "path": "15"
    },
    "2767": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "REVERT",
      "path": "15"
    },
    "2768": {
      "fn": "NerveToken.mint",
      "offset": [906, 973],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2769": {
      "fn": "NerveToken.mint",
      "offset": [983, 1002],
      "op": "PUSH2",
      "path": "15",
      "statement": 15,
      "value": "0xADA"
    },
    "2772": {
      "fn": "NerveToken.mint",
      "offset": [989, 992],
      "op": "DUP3",
      "path": "15"
    },
    "2773": {
      "fn": "NerveToken.mint",
      "offset": [994, 1001],
      "op": "DUP3",
      "path": "15"
    },
    "2774": {
      "fn": "NerveToken.mint",
      "offset": [983, 988],
      "op": "PUSH2",
      "path": "15",
      "value": "0x18FC"
    },
    "2777": {
      "fn": "NerveToken.mint",
      "jump": "i",
      "offset": [983, 1002],
      "op": "JUMP",
      "path": "15"
    },
    "2778": {
      "fn": "NerveToken.mint",
      "offset": [983, 1002],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2779": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2781": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2785": {
      "op": "SHL"
    },
    "2786": {
      "op": "SUB"
    },
    "2787": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "DUP1",
      "path": "15",
      "statement": 16
    },
    "2788": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "DUP4",
      "path": "15"
    },
    "2789": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "AND",
      "path": "15"
    },
    "2790": {
      "fn": "NerveToken.mint",
      "offset": [1035, 1036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "2792": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "SWAP1",
      "path": "15"
    },
    "2793": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "DUP2",
      "path": "15"
    },
    "2794": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "MSTORE",
      "path": "15"
    },
    "2795": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1049],
      "op": "PUSH1",
      "path": "15",
      "value": "0x7"
    },
    "2797": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "2799": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "MSTORE",
      "path": "15"
    },
    "2800": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "2802": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "DUP2",
      "path": "15"
    },
    "2803": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "KECCAK256",
      "path": "15"
    },
    "2804": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "SLOAD",
      "path": "15"
    },
    "2805": {
      "fn": "NerveToken.mint",
      "offset": [1012, 1064],
      "op": "PUSH2",
      "path": "15",
      "value": "0x9A0"
    },
    "2808": {
      "fn": "NerveToken.mint",
      "offset": [1012, 1064],
      "op": "SWAP3",
      "path": "15"
    },
    "2809": {
      "fn": "NerveToken.mint",
      "offset": [1039, 1054],
      "op": "AND",
      "path": "15"
    },
    "2810": {
      "fn": "NerveToken.mint",
      "offset": [1056, 1063],
      "op": "DUP4",
      "path": "15"
    },
    "2811": {
      "fn": "NerveToken.mint",
      "offset": [1012, 1026],
      "op": "PUSH2",
      "path": "15",
      "value": "0x19EC"
    },
    "2814": {
      "fn": "NerveToken.mint",
      "jump": "i",
      "offset": [1012, 1064],
      "op": "JUMP",
      "path": "15"
    },
    "2815": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2816": {
      "fn": "ERC20Burnable.burn",
      "offset": [579, 606],
      "op": "PUSH2",
      "path": "4",
      "statement": 17,
      "value": "0xB10"
    },
    "2819": {
      "fn": "ERC20Burnable.burn",
      "offset": [585, 597],
      "op": "PUSH2",
      "path": "4",
      "value": "0xB0A"
    },
    "2822": {
      "fn": "ERC20Burnable.burn",
      "offset": [585, 595],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14EE"
    },
    "2825": {
      "fn": "ERC20Burnable.burn",
      "jump": "i",
      "offset": [585, 597],
      "op": "JUMP",
      "path": "4"
    },
    "2826": {
      "fn": "ERC20Burnable.burn",
      "offset": [585, 597],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2827": {
      "fn": "ERC20Burnable.burn",
      "offset": [599, 605],
      "op": "DUP3",
      "path": "4"
    },
    "2828": {
      "fn": "ERC20Burnable.burn",
      "offset": [579, 584],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B29"
    },
    "2831": {
      "fn": "ERC20Burnable.burn",
      "jump": "i",
      "offset": [579, 606],
      "op": "JUMP",
      "path": "4"
    },
    "2832": {
      "fn": "ERC20Burnable.burn",
      "offset": [579, 606],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2833": {
      "fn": "ERC20Burnable.burn",
      "offset": [524, 613],
      "op": "POP",
      "path": "4"
    },
    "2834": {
      "fn": "ERC20Burnable.burn",
      "jump": "o",
      "offset": [524, 613],
      "op": "JUMP",
      "path": "4"
    },
    "2835": {
      "fn": "NerveToken.delegates",
      "offset": [3027, 3170],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2838": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2840": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2842": {
      "op": "SHL"
    },
    "2843": {
      "op": "SUB"
    },
    "2844": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "SWAP1",
      "path": "15",
      "statement": 18
    },
    "2845": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "DUP2",
      "path": "15"
    },
    "2846": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "AND",
      "path": "15"
    },
    "2847": {
      "fn": "NerveToken.delegates",
      "offset": [3112, 3119],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "2849": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "SWAP1",
      "path": "15"
    },
    "2850": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "DUP2",
      "path": "15"
    },
    "2851": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "MSTORE",
      "path": "15"
    },
    "2852": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3152],
      "op": "PUSH1",
      "path": "15",
      "value": "0x7"
    },
    "2854": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "2856": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "MSTORE",
      "path": "15"
    },
    "2857": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "2859": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "SWAP1",
      "path": "15"
    },
    "2860": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "KECCAK256",
      "path": "15"
    },
    "2861": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "SLOAD",
      "path": "15"
    },
    "2862": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "AND",
      "path": "15"
    },
    "2863": {
      "fn": "NerveToken.delegates",
      "offset": [3142, 3163],
      "op": "SWAP1",
      "path": "15"
    },
    "2864": {
      "fn": "NerveToken.delegates",
      "jump": "o",
      "offset": [3027, 3170],
      "op": "JUMP",
      "path": "15"
    },
    "2865": {
      "fn": "NerveToken.delegate",
      "offset": [3308, 3410],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2866": {
      "fn": "NerveToken.delegate",
      "offset": [3371, 3403],
      "op": "PUSH2",
      "path": "15",
      "statement": 19,
      "value": "0xB10"
    },
    "2869": {
      "fn": "NerveToken.delegate",
      "offset": [3381, 3391],
      "op": "CALLER",
      "path": "15"
    },
    "2870": {
      "fn": "NerveToken.delegate",
      "offset": [3393, 3402],
      "op": "DUP3",
      "path": "15"
    },
    "2871": {
      "fn": "NerveToken.delegate",
      "offset": [3371, 3380],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1C25"
    },
    "2874": {
      "fn": "NerveToken.delegate",
      "jump": "i",
      "offset": [3371, 3403],
      "op": "JUMP",
      "path": "15"
    },
    "2875": {
      "offset": [1943, 1992],
      "op": "JUMPDEST",
      "path": "15"
    },
    "2876": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x9"
    },
    "2878": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "2880": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "MSTORE",
      "path": "15"
    },
    "2881": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "2883": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP1",
      "path": "15"
    },
    "2884": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP2",
      "path": "15"
    },
    "2885": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "MSTORE",
      "path": "15"
    },
    "2886": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "2888": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SWAP1",
      "path": "15"
    },
    "2889": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "KECCAK256",
      "path": "15"
    },
    "2890": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "SLOAD",
      "path": "15"
    },
    "2891": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "2896": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "AND",
      "path": "15"
    },
    "2897": {
      "fn": "NerveToken.delegate",
      "offset": [1943, 1992],
      "op": "DUP2",
      "path": "15"
    },
    "2898": {
      "fn": "NerveToken.delegate",
      "jump": "o",
      "offset": [1943, 1992],
      "op": "JUMP",
      "path": "15"
    },
    "2899": {
      "fn": "ERC20.balanceOf",
      "offset": [3399, 3524],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2900": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2902": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2904": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2906": {
      "op": "SHL"
    },
    "2907": {
      "op": "SUB"
    },
    "2908": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "AND",
      "path": "3",
      "statement": 20
    },
    "2909": {
      "fn": "ERC20.balanceOf",
      "offset": [3473, 3480],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2911": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "SWAP1",
      "path": "3"
    },
    "2912": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "DUP2",
      "path": "3"
    },
    "2913": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "MSTORE",
      "path": "3"
    },
    "2914": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2916": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "DUP2",
      "path": "3"
    },
    "2917": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "SWAP1",
      "path": "3"
    },
    "2918": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "MSTORE",
      "path": "3"
    },
    "2919": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2921": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "SWAP1",
      "path": "3"
    },
    "2922": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "KECCAK256",
      "path": "3"
    },
    "2923": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "SLOAD",
      "path": "3"
    },
    "2924": {
      "fn": "ERC20.balanceOf",
      "offset": [3499, 3517],
      "op": "SWAP1",
      "path": "3"
    },
    "2925": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [3399, 3524],
      "op": "JUMP",
      "path": "3"
    },
    "2926": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1717, 1862],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2927": {
      "offset": [1308, 1320],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB76"
    },
    "2930": {
      "offset": [1308, 1318],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14EE"
    },
    "2933": {
      "jump": "i",
      "offset": [1308, 1320],
      "op": "JUMP",
      "path": "1"
    },
    "2934": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1308, 1320],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2935": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2937": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2939": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2941": {
      "op": "SHL"
    },
    "2942": {
      "op": "SUB"
    },
    "2943": {
      "offset": [1297, 1320],
      "op": "AND",
      "path": "1"
    },
    "2944": {
      "offset": [1297, 1304],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB87"
    },
    "2947": {
      "offset": [1297, 1302],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEA6"
    },
    "2950": {
      "jump": "i",
      "offset": [1297, 1304],
      "op": "JUMP",
      "path": "1"
    },
    "2951": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1297, 1304],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2952": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2954": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2956": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2958": {
      "op": "SHL"
    },
    "2959": {
      "op": "SUB"
    },
    "2960": {
      "offset": [1297, 1320],
      "op": "AND",
      "path": "1"
    },
    "2961": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1297, 1320],
      "op": "EQ",
      "path": "1"
    },
    "2962": {
      "offset": [1289, 1357],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBE2"
    },
    "2965": {
      "offset": [1289, 1357],
      "op": "JUMPI",
      "path": "1"
    },
    "2966": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2968": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "DUP1",
      "path": "1"
    },
    "2969": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "MLOAD",
      "path": "1"
    },
    "2970": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2974": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2976": {
      "op": "SHL"
    },
    "2977": {
      "offset": [1289, 1357],
      "op": "DUP2",
      "path": "1"
    },
    "2978": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "2979": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2981": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2983": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "DUP3",
      "path": "1"
    },
    "2984": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "2985": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "DUP2",
      "path": "1"
    },
    "2986": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "2987": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "2988": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "2990": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "DUP3",
      "path": "1"
    },
    "2991": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "2992": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "2993": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH32",
      "path": "1",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "3026": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "3028": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "DUP3",
      "path": "1"
    },
    "3029": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "3030": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "3031": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "3032": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "MLOAD",
      "path": "1"
    },
    "3033": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "3034": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "DUP2",
      "path": "1"
    },
    "3035": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "3036": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "SUB",
      "path": "1"
    },
    "3037": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "3039": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "3040": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "3041": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "REVERT",
      "path": "1"
    },
    "3042": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1289, 1357],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3043": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "PUSH1",
      "path": "1",
      "statement": 21,
      "value": "0x5"
    },
    "3045": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "SLOAD",
      "path": "1"
    },
    "3046": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1786, 1826],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3048": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1786, 1826],
      "op": "MLOAD",
      "path": "1"
    },
    "3049": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1823, 1824],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3051": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1823, 1824],
      "op": "SWAP2",
      "path": "1"
    },
    "3052": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "3055": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "SWAP1",
      "path": "1"
    },
    "3056": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "DIV",
      "path": "1"
    },
    "3057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3059": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3061": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3063": {
      "op": "SHL"
    },
    "3064": {
      "op": "SUB"
    },
    "3065": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "AND",
      "path": "1"
    },
    "3066": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1807, 1813],
      "op": "SWAP1",
      "path": "1"
    },
    "3067": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1786, 1826],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "3100": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1786, 1826],
      "op": "SWAP1",
      "path": "1"
    },
    "3101": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1823, 1824],
      "op": "DUP4",
      "path": "1"
    },
    "3102": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1823, 1824],
      "op": "SWAP1",
      "path": "1"
    },
    "3103": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1786, 1826],
      "op": "LOG3",
      "path": "1"
    },
    "3104": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1836, 1842],
      "op": "PUSH1",
      "path": "1",
      "statement": 22,
      "value": "0x5"
    },
    "3106": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1836, 1855],
      "op": "DUP1",
      "path": "1"
    },
    "3107": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1836, 1855],
      "op": "SLOAD",
      "path": "1"
    },
    "3108": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3111": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "3115": {
      "op": "SHL"
    },
    "3116": {
      "op": "SUB"
    },
    "3117": {
      "op": "NOT"
    },
    "3118": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1836, 1855],
      "op": "AND",
      "path": "1"
    },
    "3119": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1836, 1855],
      "op": "SWAP1",
      "path": "1"
    },
    "3120": {
      "fn": "Ownable.renounceOwnership",
      "offset": [1836, 1855],
      "op": "SSTORE",
      "path": "1"
    },
    "3121": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [1717, 1862],
      "op": "JUMP",
      "path": "1"
    },
    "3122": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3123": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5936, 5943],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3125": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5981, 5993],
      "op": "NUMBER",
      "path": "15",
      "statement": 23
    },
    "3126": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5967, 5978],
      "op": "DUP3",
      "path": "15"
    },
    "3127": {
      "branch": 109,
      "fn": "NerveToken.getPriorVotes",
      "offset": [5967, 5993],
      "op": "LT",
      "path": "15"
    },
    "3128": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH2",
      "path": "15",
      "value": "0xC72"
    },
    "3131": {
      "branch": 109,
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "JUMPI",
      "path": "15"
    },
    "3132": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3134": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "MLOAD",
      "path": "15"
    },
    "3135": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3139": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3141": {
      "op": "SHL"
    },
    "3142": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP2",
      "path": "15"
    },
    "3143": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "MSTORE",
      "path": "15"
    },
    "3144": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "3146": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "ADD",
      "path": "15"
    },
    "3147": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP1",
      "path": "15"
    },
    "3148": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP1",
      "path": "15"
    },
    "3149": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3151": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "ADD",
      "path": "15"
    },
    "3152": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP3",
      "path": "15"
    },
    "3153": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP2",
      "path": "15"
    },
    "3154": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "SUB",
      "path": "15"
    },
    "3155": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP3",
      "path": "15"
    },
    "3156": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "MSTORE",
      "path": "15"
    },
    "3157": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x26"
    },
    "3159": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP2",
      "path": "15"
    },
    "3160": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "MSTORE",
      "path": "15"
    },
    "3161": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3163": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "ADD",
      "path": "15"
    },
    "3164": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP1",
      "path": "15"
    },
    "3165": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH2",
      "path": "15",
      "value": "0x213B"
    },
    "3168": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x26"
    },
    "3170": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "SWAP2",
      "path": "15"
    },
    "3171": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "CODECOPY",
      "path": "15"
    },
    "3172": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3174": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "ADD",
      "path": "15"
    },
    "3175": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "SWAP2",
      "path": "15"
    },
    "3176": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "POP",
      "path": "15"
    },
    "3177": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "POP",
      "path": "15"
    },
    "3178": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3180": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "MLOAD",
      "path": "15"
    },
    "3181": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "DUP1",
      "path": "15"
    },
    "3182": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "SWAP2",
      "path": "15"
    },
    "3183": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "SUB",
      "path": "15"
    },
    "3184": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "SWAP1",
      "path": "15"
    },
    "3185": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "REVERT",
      "path": "15"
    },
    "3186": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5959, 6036],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3187": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3191": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3193": {
      "op": "SHL"
    },
    "3194": {
      "op": "SUB"
    },
    "3195": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "DUP4",
      "path": "15"
    },
    "3196": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "AND",
      "path": "15"
    },
    "3197": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6047, 6066],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3199": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "SWAP1",
      "path": "15"
    },
    "3200": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "DUP2",
      "path": "15"
    },
    "3201": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "MSTORE",
      "path": "15"
    },
    "3202": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6083],
      "op": "PUSH1",
      "path": "15",
      "value": "0x9"
    },
    "3204": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3206": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "MSTORE",
      "path": "15"
    },
    "3207": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3209": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "SWAP1",
      "path": "15"
    },
    "3210": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "KECCAK256",
      "path": "15"
    },
    "3211": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "SLOAD",
      "path": "15"
    },
    "3212": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3217": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6069, 6092],
      "op": "AND",
      "path": "15"
    },
    "3218": {
      "branch": 110,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6106, 6123],
      "op": "DUP1",
      "path": "15"
    },
    "3219": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6102, 6158],
      "op": "PUSH2",
      "path": "15",
      "value": "0xCA0"
    },
    "3222": {
      "branch": 110,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6102, 6158],
      "op": "JUMPI",
      "path": "15"
    },
    "3223": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6146, 6147],
      "op": "PUSH1",
      "path": "15",
      "statement": 24,
      "value": "0x0"
    },
    "3225": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6139, 6147],
      "op": "SWAP2",
      "path": "15"
    },
    "3226": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6139, 6147],
      "op": "POP",
      "path": "15"
    },
    "3227": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6139, 6147],
      "op": "POP",
      "path": "15"
    },
    "3228": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6139, 6147],
      "op": "PUSH2",
      "path": "15",
      "value": "0x86C"
    },
    "3231": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6139, 6147],
      "op": "JUMP",
      "path": "15"
    },
    "3232": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6102, 6158],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3233": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3235": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3237": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3239": {
      "op": "SHL"
    },
    "3240": {
      "op": "SUB"
    },
    "3241": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "DUP5",
      "path": "15"
    },
    "3242": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "AND",
      "path": "15"
    },
    "3243": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3245": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "SWAP1",
      "path": "15"
    },
    "3246": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "DUP2",
      "path": "15"
    },
    "3247": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "MSTORE",
      "path": "15"
    },
    "3248": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6226],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "3250": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3252": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "SWAP1",
      "path": "15"
    },
    "3253": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "DUP2",
      "path": "15"
    },
    "3254": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "MSTORE",
      "path": "15"
    },
    "3255": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3257": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "DUP1",
      "path": "15"
    },
    "3258": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "DUP4",
      "path": "15"
    },
    "3259": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6235],
      "op": "KECCAK256",
      "path": "15"
    },
    "3260": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3265": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3267": {
      "op": "NOT"
    },
    "3268": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6236, 6252],
      "op": "DUP7",
      "path": "15"
    },
    "3269": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6236, 6252],
      "op": "ADD",
      "path": "15"
    },
    "3270": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "DUP2",
      "path": "15"
    },
    "3271": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "AND",
      "path": "15"
    },
    "3272": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "DUP6",
      "path": "15"
    },
    "3273": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "MSTORE",
      "path": "15"
    },
    "3274": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "SWAP3",
      "path": "15"
    },
    "3275": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "MSTORE",
      "path": "15"
    },
    "3276": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "SWAP1",
      "path": "15"
    },
    "3277": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "SWAP2",
      "path": "15"
    },
    "3278": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6253],
      "op": "KECCAK256",
      "path": "15"
    },
    "3279": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6263],
      "op": "SLOAD",
      "path": "15"
    },
    "3280": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6263],
      "op": "AND",
      "path": "15"
    },
    "3281": {
      "branch": 111,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6215, 6278],
      "op": "DUP4",
      "path": "15"
    },
    "3282": {
      "op": "LT"
    },
    "3283": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6211, 6356],
      "op": "PUSH2",
      "path": "15",
      "value": "0xD0F"
    },
    "3286": {
      "branch": 111,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6211, 6356],
      "op": "JUMPI",
      "path": "15"
    },
    "3287": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3291": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3293": {
      "op": "SHL"
    },
    "3294": {
      "op": "SUB"
    },
    "3295": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "DUP5",
      "path": "15",
      "statement": 25
    },
    "3296": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "AND",
      "path": "15"
    },
    "3297": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3299": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "SWAP1",
      "path": "15"
    },
    "3300": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "DUP2",
      "path": "15"
    },
    "3301": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "MSTORE",
      "path": "15"
    },
    "3302": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6312],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "3304": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3306": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "SWAP1",
      "path": "15"
    },
    "3307": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "DUP2",
      "path": "15"
    },
    "3308": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "MSTORE",
      "path": "15"
    },
    "3309": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3311": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "DUP1",
      "path": "15"
    },
    "3312": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "DUP4",
      "path": "15"
    },
    "3313": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6321],
      "op": "KECCAK256",
      "path": "15"
    },
    "3314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3316": {
      "op": "NOT"
    },
    "3317": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6322, 6338],
      "op": "SWAP5",
      "path": "15"
    },
    "3318": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6322, 6338],
      "op": "SWAP1",
      "path": "15"
    },
    "3319": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6322, 6338],
      "op": "SWAP5",
      "path": "15"
    },
    "3320": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6322, 6338],
      "op": "ADD",
      "path": "15"
    },
    "3321": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3326": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "AND",
      "path": "15"
    },
    "3327": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "DUP4",
      "path": "15"
    },
    "3328": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "MSTORE",
      "path": "15"
    },
    "3329": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "SWAP3",
      "path": "15"
    },
    "3330": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "SWAP1",
      "path": "15"
    },
    "3331": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "MSTORE",
      "path": "15"
    },
    "3332": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6339],
      "op": "KECCAK256",
      "path": "15"
    },
    "3333": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6337, 6338],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "3335": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6345],
      "op": "ADD",
      "path": "15"
    },
    "3336": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6345],
      "op": "SLOAD",
      "path": "15"
    },
    "3337": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6301, 6345],
      "op": "SWAP1",
      "path": "15"
    },
    "3338": {
      "op": "POP"
    },
    "3339": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6294, 6345],
      "op": "PUSH2",
      "path": "15",
      "value": "0x86C"
    },
    "3342": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6294, 6345],
      "op": "JUMP",
      "path": "15"
    },
    "3343": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6211, 6356],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3346": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3348": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3350": {
      "op": "SHL"
    },
    "3351": {
      "op": "SUB"
    },
    "3352": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "DUP5",
      "path": "15"
    },
    "3353": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "AND",
      "path": "15"
    },
    "3354": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3356": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "SWAP1",
      "path": "15"
    },
    "3357": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "DUP2",
      "path": "15"
    },
    "3358": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "MSTORE",
      "path": "15"
    },
    "3359": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6425],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "3361": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3363": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "SWAP1",
      "path": "15"
    },
    "3364": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "DUP2",
      "path": "15"
    },
    "3365": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "MSTORE",
      "path": "15"
    },
    "3366": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3368": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "DUP1",
      "path": "15"
    },
    "3369": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "DUP4",
      "path": "15"
    },
    "3370": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6434],
      "op": "KECCAK256",
      "path": "15"
    },
    "3371": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "DUP4",
      "path": "15"
    },
    "3372": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "DUP1",
      "path": "15"
    },
    "3373": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "MSTORE",
      "path": "15"
    },
    "3374": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "SWAP1",
      "path": "15"
    },
    "3375": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "SWAP2",
      "path": "15"
    },
    "3376": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "MSTORE",
      "path": "15"
    },
    "3377": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "SWAP1",
      "path": "15"
    },
    "3378": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "KECCAK256",
      "path": "15"
    },
    "3379": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6447],
      "op": "SLOAD",
      "path": "15"
    },
    "3380": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6437],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3385": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6447],
      "op": "AND",
      "path": "15"
    },
    "3386": {
      "branch": 112,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6414, 6461],
      "op": "DUP4",
      "path": "15"
    },
    "3387": {
      "op": "LT"
    },
    "3388": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6410, 6496],
      "op": "ISZERO",
      "path": "15"
    },
    "3389": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6410, 6496],
      "op": "PUSH2",
      "path": "15",
      "value": "0xD4A"
    },
    "3392": {
      "branch": 112,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6410, 6496],
      "op": "JUMPI",
      "path": "15"
    },
    "3393": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6484, 6485],
      "op": "PUSH1",
      "path": "15",
      "statement": 26,
      "value": "0x0"
    },
    "3395": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6477, 6485],
      "op": "SWAP2",
      "path": "15"
    },
    "3396": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6477, 6485],
      "op": "POP",
      "path": "15"
    },
    "3397": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6477, 6485],
      "op": "POP",
      "path": "15"
    },
    "3398": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6477, 6485],
      "op": "PUSH2",
      "path": "15",
      "value": "0x86C"
    },
    "3401": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6477, 6485],
      "op": "JUMP",
      "path": "15"
    },
    "3402": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6410, 6496],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3403": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6506, 6518],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3405": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3407": {
      "op": "NOT"
    },
    "3408": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6547, 6563],
      "op": "DUP3",
      "path": "15"
    },
    "3409": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6547, 6563],
      "op": "ADD",
      "path": "15"
    },
    "3410": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3411": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6588, 6593],
      "op": "DUP2",
      "path": "15"
    },
    "3412": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6580, 6593],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3417": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6580, 6593],
      "op": "AND",
      "path": "15"
    },
    "3418": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6580, 6585],
      "op": "DUP2",
      "path": "15"
    },
    "3419": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6580, 6593],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3424": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6580, 6593],
      "op": "AND",
      "path": "15"
    },
    "3425": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6580, 6593],
      "op": "GT",
      "path": "15"
    },
    "3426": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "ISZERO",
      "path": "15"
    },
    "3427": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "PUSH2",
      "path": "15",
      "value": "0xE03"
    },
    "3430": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "JUMPI",
      "path": "15"
    },
    "3431": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6651, 6652],
      "op": "PUSH1",
      "path": "15",
      "value": "0x2"
    },
    "3433": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6634, 6647],
      "op": "DUP3",
      "path": "15"
    },
    "3434": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6634, 6647],
      "op": "DUP3",
      "path": "15"
    },
    "3435": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6634, 6647],
      "op": "SUB",
      "path": "15"
    },
    "3436": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6633, 6652],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3441": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6633, 6652],
      "op": "AND",
      "path": "15"
    },
    "3442": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6633, 6652],
      "op": "DIV",
      "path": "15"
    },
    "3443": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6625, 6652],
      "op": "DUP2",
      "path": "15"
    },
    "3444": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6625, 6652],
      "op": "SUB",
      "path": "15"
    },
    "3445": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6713],
      "op": "PUSH2",
      "path": "15",
      "value": "0xD7C"
    },
    "3448": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6713],
      "op": "PUSH2",
      "path": "15",
      "value": "0x20AF"
    },
    "3451": {
      "fn": "NerveToken.getPriorVotes",
      "jump": "i",
      "offset": [6693, 6713],
      "op": "JUMP",
      "path": "15"
    },
    "3452": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6713],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3453": {
      "op": "POP"
    },
    "3454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3460": {
      "op": "SHL"
    },
    "3461": {
      "op": "SUB"
    },
    "3462": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "DUP8",
      "path": "15"
    },
    "3463": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "AND",
      "path": "15"
    },
    "3464": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3466": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "SWAP1",
      "path": "15"
    },
    "3467": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "DUP2",
      "path": "15"
    },
    "3468": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "MSTORE",
      "path": "15"
    },
    "3469": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6727],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "3471": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3473": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "SWAP1",
      "path": "15"
    },
    "3474": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "DUP2",
      "path": "15"
    },
    "3475": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "MSTORE",
      "path": "15"
    },
    "3476": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3478": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "DUP1",
      "path": "15"
    },
    "3479": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "DUP4",
      "path": "15"
    },
    "3480": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6736],
      "op": "KECCAK256",
      "path": "15"
    },
    "3481": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3486": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "DUP1",
      "path": "15"
    },
    "3487": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "DUP7",
      "path": "15"
    },
    "3488": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "AND",
      "path": "15"
    },
    "3489": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "DUP6",
      "path": "15"
    },
    "3490": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "MSTORE",
      "path": "15"
    },
    "3491": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3492": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "DUP4",
      "path": "15"
    },
    "3493": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "MSTORE",
      "path": "15"
    },
    "3494": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "SWAP3",
      "path": "15"
    },
    "3495": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "DUP2",
      "path": "15"
    },
    "3496": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3497": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6716, 6744],
      "op": "KECCAK256",
      "path": "15"
    },
    "3498": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP2",
      "path": "15"
    },
    "3499": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "MLOAD",
      "path": "15"
    },
    "3500": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP1",
      "path": "15"
    },
    "3501": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP4",
      "path": "15"
    },
    "3502": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "ADD",
      "path": "15"
    },
    "3503": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3504": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP3",
      "path": "15"
    },
    "3505": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "MSTORE",
      "path": "15"
    },
    "3506": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP1",
      "path": "15"
    },
    "3507": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SLOAD",
      "path": "15"
    },
    "3508": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3509": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP4",
      "path": "15"
    },
    "3510": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "AND",
      "path": "15"
    },
    "3511": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP1",
      "path": "15"
    },
    "3512": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP3",
      "path": "15"
    },
    "3513": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "MSTORE",
      "path": "15"
    },
    "3514": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "3516": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3517": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP4",
      "path": "15"
    },
    "3518": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "ADD",
      "path": "15"
    },
    "3519": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SLOAD",
      "path": "15"
    },
    "3520": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP2",
      "path": "15"
    },
    "3521": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "DUP2",
      "path": "15"
    },
    "3522": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "ADD",
      "path": "15"
    },
    "3523": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP2",
      "path": "15"
    },
    "3524": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3525": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP2",
      "path": "15"
    },
    "3526": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "MSTORE",
      "path": "15"
    },
    "3527": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6693, 6744],
      "op": "SWAP1",
      "path": "15"
    },
    "3528": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6762, 6789],
      "op": "DUP8",
      "path": "15"
    },
    "3529": {
      "branch": 113,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6762, 6789],
      "op": "EQ",
      "path": "15"
    },
    "3530": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6758, 6981],
      "op": "ISZERO",
      "path": "15"
    },
    "3531": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6758, 6981],
      "op": "PUSH2",
      "path": "15",
      "value": "0xDDE"
    },
    "3534": {
      "branch": 113,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6758, 6981],
      "op": "JUMPI",
      "path": "15"
    },
    "3535": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6816, 6824],
      "op": "PUSH1",
      "path": "15",
      "statement": 27,
      "value": "0x20"
    },
    "3537": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6816, 6824],
      "op": "ADD",
      "path": "15"
    },
    "3538": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6816, 6824],
      "op": "MLOAD",
      "path": "15"
    },
    "3539": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6816, 6824],
      "op": "SWAP5",
      "path": "15"
    },
    "3540": {
      "op": "POP"
    },
    "3541": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6809, 6824],
      "op": "PUSH2",
      "path": "15",
      "value": "0x86C"
    },
    "3544": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6809, 6824],
      "op": "SWAP4",
      "path": "15"
    },
    "3545": {
      "op": "POP"
    },
    "3546": {
      "op": "POP"
    },
    "3547": {
      "op": "POP"
    },
    "3548": {
      "op": "POP"
    },
    "3549": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6809, 6824],
      "op": "JUMP",
      "path": "15"
    },
    "3550": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6758, 6981],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3551": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6849, 6861],
      "op": "DUP1",
      "path": "15"
    },
    "3552": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6849, 6861],
      "op": "MLOAD",
      "path": "15"
    },
    "3553": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6849, 6875],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3558": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6849, 6875],
      "op": "AND",
      "path": "15"
    },
    "3559": {
      "branch": 114,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6849, 6875],
      "op": "DUP8",
      "path": "15"
    },
    "3560": {
      "op": "GT"
    },
    "3561": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "ISZERO",
      "path": "15"
    },
    "3562": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "PUSH2",
      "path": "15",
      "value": "0xDF5"
    },
    "3565": {
      "branch": 114,
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "JUMPI",
      "path": "15"
    },
    "3566": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6903, 6909],
      "op": "DUP2",
      "path": "15",
      "statement": 28
    },
    "3567": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6895, 6909],
      "op": "SWAP4",
      "path": "15"
    },
    "3568": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6895, 6909],
      "op": "POP",
      "path": "15"
    },
    "3569": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "PUSH2",
      "path": "15",
      "value": "0xDFC"
    },
    "3572": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "JUMP",
      "path": "15"
    },
    "3573": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3574": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6965, 6966],
      "op": "PUSH1",
      "path": "15",
      "statement": 29,
      "value": "0x1"
    },
    "3576": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6956, 6962],
      "op": "DUP3",
      "path": "15"
    },
    "3577": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6956, 6966],
      "op": "SUB",
      "path": "15"
    },
    "3578": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6948, 6966],
      "op": "SWAP3",
      "path": "15"
    },
    "3579": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6948, 6966],
      "op": "POP",
      "path": "15"
    },
    "3580": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6845, 6981],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3581": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "POP",
      "path": "15"
    },
    "3582": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "POP",
      "path": "15"
    },
    "3583": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "PUSH2",
      "path": "15",
      "value": "0xD52"
    },
    "3586": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "JUMP",
      "path": "15"
    },
    "3587": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [6573, 6991],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3588": {
      "op": "POP"
    },
    "3589": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3591": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3593": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3595": {
      "op": "SHL"
    },
    "3596": {
      "op": "SUB"
    },
    "3597": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "DUP6",
      "path": "15",
      "statement": 30
    },
    "3598": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "AND",
      "path": "15"
    },
    "3599": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3601": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "SWAP1",
      "path": "15"
    },
    "3602": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "DUP2",
      "path": "15"
    },
    "3603": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "MSTORE",
      "path": "15"
    },
    "3604": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7018],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "3606": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3608": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "SWAP1",
      "path": "15"
    },
    "3609": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "DUP2",
      "path": "15"
    },
    "3610": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "MSTORE",
      "path": "15"
    },
    "3611": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3613": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "DUP1",
      "path": "15"
    },
    "3614": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "DUP4",
      "path": "15"
    },
    "3615": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7027],
      "op": "KECCAK256",
      "path": "15"
    },
    "3616": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "3621": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "SWAP1",
      "path": "15"
    },
    "3622": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "SWAP5",
      "path": "15"
    },
    "3623": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "AND",
      "path": "15"
    },
    "3624": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "DUP4",
      "path": "15"
    },
    "3625": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "MSTORE",
      "path": "15"
    },
    "3626": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "SWAP3",
      "path": "15"
    },
    "3627": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "SWAP1",
      "path": "15"
    },
    "3628": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "MSTORE",
      "path": "15"
    },
    "3629": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7034],
      "op": "KECCAK256",
      "path": "15"
    },
    "3630": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7040],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "3632": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7040],
      "op": "ADD",
      "path": "15"
    },
    "3633": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7040],
      "op": "SLOAD",
      "path": "15"
    },
    "3634": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [7007, 7040],
      "op": "SWAP2",
      "path": "15"
    },
    "3635": {
      "op": "POP"
    },
    "3636": {
      "op": "POP"
    },
    "3637": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "SWAP3",
      "path": "15"
    },
    "3638": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "SWAP2",
      "path": "15"
    },
    "3639": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "POP",
      "path": "15"
    },
    "3640": {
      "fn": "NerveToken.getPriorVotes",
      "offset": [5831, 7047],
      "op": "POP",
      "path": "15"
    },
    "3641": {
      "fn": "NerveToken.getPriorVotes",
      "jump": "o",
      "offset": [5831, 7047],
      "op": "JUMP",
      "path": "15"
    },
    "3642": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3643": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [995, 1021],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3645": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE71"
    },
    "3648": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1061, 1067],
      "op": "DUP3",
      "path": "4"
    },
    "3649": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3651": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "MLOAD",
      "path": "4"
    },
    "3652": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "DUP1",
      "path": "4"
    },
    "3653": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "3655": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "ADD",
      "path": "4"
    },
    "3656": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3658": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "MSTORE",
      "path": "4"
    },
    "3659": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "DUP1",
      "path": "4"
    },
    "3660": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH1",
      "path": "4",
      "value": "0x24"
    },
    "3662": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "DUP2",
      "path": "4"
    },
    "3663": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "MSTORE",
      "path": "4"
    },
    "3664": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3666": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "ADD",
      "path": "4"
    },
    "3667": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH2",
      "path": "4",
      "value": "0x22C2"
    },
    "3670": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "PUSH1",
      "path": "4",
      "value": "0x24"
    },
    "3672": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "SWAP2",
      "path": "4"
    },
    "3673": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "CODECOPY",
      "path": "4"
    },
    "3674": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1056],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE6A"
    },
    "3677": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1034, 1041],
      "op": "DUP7",
      "path": "4"
    },
    "3678": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1043, 1055],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE65"
    },
    "3681": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1043, 1053],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14EE"
    },
    "3684": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [1043, 1055],
      "op": "JUMP",
      "path": "4"
    },
    "3685": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1043, 1055],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3686": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1033],
      "op": "PUSH2",
      "path": "4",
      "value": "0x133D"
    },
    "3689": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [1024, 1056],
      "op": "JUMP",
      "path": "4"
    },
    "3690": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1056],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3691": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1060],
      "op": "SWAP2",
      "path": "4"
    },
    "3692": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "SWAP1",
      "path": "4"
    },
    "3693": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1060],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1739"
    },
    "3696": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [1024, 1108],
      "op": "JUMP",
      "path": "4"
    },
    "3697": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1024, 1108],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3698": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [995, 1108],
      "op": "SWAP1",
      "path": "4"
    },
    "3699": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [995, 1108],
      "op": "POP",
      "path": "4"
    },
    "3700": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1119, 1170],
      "op": "PUSH2",
      "path": "4",
      "statement": 31,
      "value": "0xE85"
    },
    "3703": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1128, 1135],
      "op": "DUP4",
      "path": "4"
    },
    "3704": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1137, 1149],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE7F"
    },
    "3707": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1137, 1147],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14EE"
    },
    "3710": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [1137, 1149],
      "op": "JUMP",
      "path": "4"
    },
    "3711": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1137, 1149],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3712": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1151, 1169],
      "op": "DUP4",
      "path": "4"
    },
    "3713": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1119, 1127],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14F2"
    },
    "3716": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [1119, 1170],
      "op": "JUMP",
      "path": "4"
    },
    "3717": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1119, 1170],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3718": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1180, 1202],
      "op": "PUSH2",
      "path": "4",
      "statement": 32,
      "value": "0xE8F"
    },
    "3721": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1186, 1193],
      "op": "DUP4",
      "path": "4"
    },
    "3722": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1195, 1201],
      "op": "DUP4",
      "path": "4"
    },
    "3723": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1180, 1185],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1B29"
    },
    "3726": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [1180, 1202],
      "op": "JUMP",
      "path": "4"
    },
    "3727": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [1180, 1202],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3728": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "POP",
      "path": "4"
    },
    "3729": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "POP",
      "path": "4"
    },
    "3730": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [919, 1209],
      "op": "POP",
      "path": "4"
    },
    "3731": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "o",
      "offset": [919, 1209],
      "op": "JUMP",
      "path": "4"
    },
    "3732": {
      "offset": [2470, 2509],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3733": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0xA"
    },
    "3735": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "3737": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "MSTORE",
      "path": "15"
    },
    "3738": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3740": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "SWAP1",
      "path": "15"
    },
    "3741": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "DUP2",
      "path": "15"
    },
    "3742": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "MSTORE",
      "path": "15"
    },
    "3743": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "3745": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "SWAP1",
      "path": "15"
    },
    "3746": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "KECCAK256",
      "path": "15"
    },
    "3747": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "SLOAD",
      "path": "15"
    },
    "3748": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [2470, 2509],
      "op": "DUP2",
      "path": "15"
    },
    "3749": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "o",
      "offset": [2470, 2509],
      "op": "JUMP",
      "path": "15"
    },
    "3750": {
      "fn": "Ownable.owner",
      "offset": [1085, 1170],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3751": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "PUSH1",
      "path": "1",
      "statement": 33,
      "value": "0x5"
    },
    "3753": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "SLOAD",
      "path": "1"
    },
    "3754": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "3757": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "SWAP1",
      "path": "1"
    },
    "3758": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "DIV",
      "path": "1"
    },
    "3759": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3761": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3763": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3765": {
      "op": "SHL"
    },
    "3766": {
      "op": "SUB"
    },
    "3767": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "AND",
      "path": "1"
    },
    "3768": {
      "fn": "Ownable.owner",
      "offset": [1157, 1163],
      "op": "SWAP1",
      "path": "1"
    },
    "3769": {
      "fn": "Ownable.owner",
      "jump": "o",
      "offset": [1085, 1170],
      "op": "JUMP",
      "path": "1"
    },
    "3770": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3771": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4038, 4045],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3773": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "DUP3",
      "path": "0",
      "statement": 34
    },
    "3774": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "DUP2",
      "path": "0"
    },
    "3775": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "MSTORE",
      "path": "0"
    },
    "3776": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4070],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "3778": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3780": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "MSTORE",
      "path": "0"
    },
    "3781": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3783": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "DUP2",
      "path": "0"
    },
    "3784": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4076],
      "op": "KECCAK256",
      "path": "0"
    },
    "3785": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4094],
      "op": "PUSH2",
      "path": "0",
      "value": "0xED2"
    },
    "3788": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4094],
      "op": "SWAP1",
      "path": "0"
    },
    "3789": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4088, 4093],
      "op": "DUP4",
      "path": "0"
    },
    "3790": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4087],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CBA"
    },
    "3793": {
      "fn": "AccessControl.getRoleMember",
      "jump": "i",
      "offset": [4064, 4094],
      "op": "JUMP",
      "path": "0"
    },
    "3794": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4064, 4094],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3795": {
      "fn": "AccessControl.getRoleMember",
      "offset": [4057, 4094],
      "op": "SWAP4",
      "path": "0"
    },
    "3796": {
      "fn": "AccessControl.getRoleMember",
      "offset": [3965, 4101],
      "op": "SWAP3",
      "path": "0"
    },
    "3797": {
      "op": "POP"
    },
    "3798": {
      "op": "POP"
    },
    "3799": {
      "op": "POP"
    },
    "3800": {
      "fn": "AccessControl.getRoleMember",
      "jump": "o",
      "offset": [3965, 4101],
      "op": "JUMP",
      "path": "0"
    },
    "3801": {
      "fn": "AccessControl.hasRole",
      "offset": [2950, 3087],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3802": {
      "fn": "AccessControl.hasRole",
      "offset": [3019, 3023],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3804": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "DUP3",
      "path": "0",
      "statement": 35
    },
    "3805": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "DUP2",
      "path": "0"
    },
    "3806": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "MSTORE",
      "path": "0"
    },
    "3807": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3048],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "3809": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3811": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "MSTORE",
      "path": "0"
    },
    "3812": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3814": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "DUP2",
      "path": "0"
    },
    "3815": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3054],
      "op": "KECCAK256",
      "path": "0"
    },
    "3816": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3080],
      "op": "PUSH2",
      "path": "0",
      "value": "0xED2"
    },
    "3819": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3080],
      "op": "SWAP1",
      "path": "0"
    },
    "3820": {
      "fn": "AccessControl.hasRole",
      "offset": [3072, 3079],
      "op": "DUP4",
      "path": "0"
    },
    "3821": {
      "fn": "AccessControl.hasRole",
      "offset": [3042, 3071],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CC6"
    },
    "3824": {
      "fn": "AccessControl.hasRole",
      "jump": "i",
      "offset": [3042, 3080],
      "op": "JUMP",
      "path": "0"
    },
    "3825": {
      "fn": "ERC20.symbol",
      "offset": [2370, 2463],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3826": {
      "fn": "ERC20.symbol",
      "offset": [2449, 2456],
      "op": "PUSH1",
      "path": "3",
      "statement": 36,
      "value": "0x4"
    },
    "3828": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP1",
      "path": "3"
    },
    "3829": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SLOAD",
      "path": "3"
    },
    "3830": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3832": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP1",
      "path": "3"
    },
    "3833": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MLOAD",
      "path": "3"
    },
    "3834": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3836": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "3838": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "3840": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3842": {
      "op": "NOT"
    },
    "3843": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "3846": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "3848": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP9",
      "path": "3"
    },
    "3849": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "AND",
      "path": "3"
    },
    "3850": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ISZERO",
      "path": "3"
    },
    "3851": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MUL",
      "path": "3"
    },
    "3852": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ADD",
      "path": "3"
    },
    "3853": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP1",
      "path": "3"
    },
    "3854": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP6",
      "path": "3"
    },
    "3855": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "AND",
      "path": "3"
    },
    "3856": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP5",
      "path": "3"
    },
    "3857": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP1",
      "path": "3"
    },
    "3858": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP5",
      "path": "3"
    },
    "3859": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DIV",
      "path": "3"
    },
    "3860": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP4",
      "path": "3"
    },
    "3861": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP5",
      "path": "3"
    },
    "3862": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ADD",
      "path": "3"
    },
    "3863": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP2",
      "path": "3"
    },
    "3864": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP1",
      "path": "3"
    },
    "3865": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DIV",
      "path": "3"
    },
    "3866": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP2",
      "path": "3"
    },
    "3867": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MUL",
      "path": "3"
    },
    "3868": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP3",
      "path": "3"
    },
    "3869": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ADD",
      "path": "3"
    },
    "3870": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP2",
      "path": "3"
    },
    "3871": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ADD",
      "path": "3"
    },
    "3872": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP1",
      "path": "3"
    },
    "3873": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP3",
      "path": "3"
    },
    "3874": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MSTORE",
      "path": "3"
    },
    "3875": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP3",
      "path": "3"
    },
    "3876": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP2",
      "path": "3"
    },
    "3877": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MSTORE",
      "path": "3"
    },
    "3878": {
      "fn": "ERC20.symbol",
      "offset": [2417, 2430],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "3880": {
      "fn": "ERC20.symbol",
      "offset": [2417, 2430],
      "op": "SWAP4",
      "path": "3"
    },
    "3881": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP1",
      "path": "3"
    },
    "3882": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP3",
      "path": "3"
    },
    "3883": {
      "fn": "ERC20.symbol",
      "offset": [2449, 2456],
      "op": "SWAP1",
      "path": "3"
    },
    "3884": {
      "fn": "ERC20.symbol",
      "offset": [2449, 2456],
      "op": "SWAP2",
      "path": "3"
    },
    "3885": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP4",
      "path": "3"
    },
    "3886": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ADD",
      "path": "3"
    },
    "3887": {
      "fn": "ERC20.symbol",
      "offset": [2449, 2456],
      "op": "DUP3",
      "path": "3"
    },
    "3888": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP3",
      "path": "3"
    },
    "3889": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP1",
      "path": "3"
    },
    "3890": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ISZERO",
      "path": "3"
    },
    "3891": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH2",
      "path": "3",
      "value": "0x84A"
    },
    "3894": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "JUMPI",
      "path": "3"
    },
    "3895": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP1",
      "path": "3"
    },
    "3896": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "3898": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "LT",
      "path": "3"
    },
    "3899": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH2",
      "path": "3",
      "value": "0x81F"
    },
    "3902": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "JUMPI",
      "path": "3"
    },
    "3903": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "3906": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP1",
      "path": "3"
    },
    "3907": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP4",
      "path": "3"
    },
    "3908": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SLOAD",
      "path": "3"
    },
    "3909": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DIV",
      "path": "3"
    },
    "3910": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MUL",
      "path": "3"
    },
    "3911": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "DUP4",
      "path": "3"
    },
    "3912": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "MSTORE",
      "path": "3"
    },
    "3913": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP2",
      "path": "3"
    },
    "3914": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3916": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "ADD",
      "path": "3"
    },
    "3917": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "SWAP2",
      "path": "3"
    },
    "3918": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "PUSH2",
      "path": "3",
      "value": "0x84A"
    },
    "3921": {
      "fn": "ERC20.symbol",
      "offset": [2442, 2456],
      "op": "JUMP",
      "path": "3"
    },
    "3922": {
      "offset": [1727, 1776],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3923": {
      "offset": [1772, 1776],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3925": {
      "offset": [1727, 1776],
      "op": "DUP2",
      "path": "0"
    },
    "3926": {
      "fn": "ERC20.symbol",
      "jump": "o",
      "offset": [1727, 1776],
      "op": "JUMP",
      "path": "0"
    },
    "3927": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6291, 6557],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3928": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6384, 6388],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3930": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6400, 6529],
      "op": "PUSH2",
      "path": "3",
      "statement": 37,
      "value": "0x868"
    },
    "3933": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6409, 6421],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF64"
    },
    "3936": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6409, 6419],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "3939": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [6409, 6421],
      "op": "JUMP",
      "path": "3"
    },
    "3940": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6409, 6421],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3941": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6423, 6430],
      "op": "DUP5",
      "path": "3"
    },
    "3942": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH2",
      "path": "3",
      "value": "0x914"
    },
    "3945": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6471, 6486],
      "op": "DUP6",
      "path": "3"
    },
    "3946": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3948": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "MLOAD",
      "path": "3"
    },
    "3949": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "DUP1",
      "path": "3"
    },
    "3950": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "3952": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "ADD",
      "path": "3"
    },
    "3953": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3955": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "MSTORE",
      "path": "3"
    },
    "3956": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "DUP1",
      "path": "3"
    },
    "3957": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH1",
      "path": "3",
      "value": "0x25"
    },
    "3959": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "DUP2",
      "path": "3"
    },
    "3960": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "MSTORE",
      "path": "3"
    },
    "3961": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3963": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "ADD",
      "path": "3"
    },
    "3964": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2375"
    },
    "3967": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "PUSH1",
      "path": "3",
      "value": "0x25"
    },
    "3969": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "SWAP2",
      "path": "3"
    },
    "3970": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "CODECOPY",
      "path": "3"
    },
    "3971": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6443],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "3973": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3975": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6444, 6456],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF8E"
    },
    "3978": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6444, 6454],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "3981": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [6444, 6456],
      "op": "JUMP",
      "path": "3"
    },
    "3982": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6444, 6456],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3983": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3985": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3987": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3989": {
      "op": "SHL"
    },
    "3990": {
      "op": "SUB"
    },
    "3991": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "SWAP1",
      "path": "3"
    },
    "3992": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "DUP2",
      "path": "3"
    },
    "3993": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "AND",
      "path": "3"
    },
    "3994": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "DUP3",
      "path": "3"
    },
    "3995": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "MSTORE",
      "path": "3"
    },
    "3996": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3998": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "DUP1",
      "path": "3"
    },
    "3999": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "DUP4",
      "path": "3"
    },
    "4000": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "ADD",
      "path": "3"
    },
    "4001": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "SWAP4",
      "path": "3"
    },
    "4002": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "SWAP1",
      "path": "3"
    },
    "4003": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "SWAP4",
      "path": "3"
    },
    "4004": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "MSTORE",
      "path": "3"
    },
    "4005": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "4007": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "SWAP2",
      "path": "3"
    },
    "4008": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "DUP3",
      "path": "3"
    },
    "4009": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "ADD",
      "path": "3"
    },
    "4010": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4012": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "SWAP1",
      "path": "3"
    },
    "4013": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "DUP2",
      "path": "3"
    },
    "4014": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6457],
      "op": "KECCAK256",
      "path": "3"
    },
    "4015": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "SWAP2",
      "path": "3"
    },
    "4016": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "DUP14",
      "path": "3"
    },
    "4017": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "AND",
      "path": "3"
    },
    "4018": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "DUP2",
      "path": "3"
    },
    "4019": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "MSTORE",
      "path": "3"
    },
    "4020": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "SWAP3",
      "path": "3"
    },
    "4021": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "MSTORE",
      "path": "3"
    },
    "4022": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "SWAP1",
      "path": "3"
    },
    "4023": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "KECCAK256",
      "path": "3"
    },
    "4024": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "SLOAD",
      "path": "3"
    },
    "4025": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6466],
      "op": "SWAP2",
      "path": "3"
    },
    "4026": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6528],
      "op": "SWAP1",
      "path": "3"
    },
    "4027": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [6432, 6470],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1739"
    },
    "4030": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [6432, 6528],
      "op": "JUMP",
      "path": "3"
    },
    "4031": {
      "fn": "ERC20.transfer",
      "offset": [3727, 3899],
      "op": "JUMPDEST",
      "path": "3"
    },
    "4032": {
      "fn": "ERC20.transfer",
      "offset": [3813, 3817],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "4034": {
      "fn": "ERC20.transfer",
      "offset": [3829, 3871],
      "op": "PUSH2",
      "path": "3",
      "statement": 38,
      "value": "0x868"
    },
    "4037": {
      "fn": "ERC20.transfer",
      "offset": [3839, 3851],
      "op": "PUSH2",
      "path": "3",
      "value": "0xFCC"
    },
    "4040": {
      "fn": "ERC20.transfer",
      "offset": [3839, 3849],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14EE"
    },
    "4043": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [3839, 3851],
      "op": "JUMP",
      "path": "3"
    },
    "4044": {
      "fn": "ERC20.transfer",
      "offset": [3839, 3851],
      "op": "JUMPDEST",
      "path": "3"
    },
    "4045": {
      "fn": "ERC20.transfer",
      "offset": [3853, 3862],
      "op": "DUP5",
      "path": "3"
    },
    "4046": {
      "fn": "ERC20.transfer",
      "offset": [3864, 3870],
      "op": "DUP5",
      "path": "3"
    },
    "4047": {
      "fn": "ERC20.transfer",
      "offset": [3829, 3838],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15DE"
    },
    "4050": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [3829, 3871],
      "op": "JUMP",
      "path": "3"
    },
    "4051": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4052": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4054": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4058": {
      "op": "SHL"
    },
    "4059": {
      "op": "SUB"
    },
    "4060": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "DUP2",
      "path": "15"
    },
    "4061": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "AND",
      "path": "15"
    },
    "4062": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5250, 5257],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4064": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "SWAP1",
      "path": "15"
    },
    "4065": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "DUP2",
      "path": "15"
    },
    "4066": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "MSTORE",
      "path": "15"
    },
    "4067": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5309],
      "op": "PUSH1",
      "path": "15",
      "value": "0x9"
    },
    "4069": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4071": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "MSTORE",
      "path": "15"
    },
    "4072": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4074": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "DUP2",
      "path": "15"
    },
    "4075": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "KECCAK256",
      "path": "15"
    },
    "4076": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "SLOAD",
      "path": "15"
    },
    "4077": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "4082": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5295, 5318],
      "op": "AND",
      "path": "15"
    },
    "4083": {
      "branch": 115,
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5335, 5351],
      "op": "DUP1",
      "path": "15",
      "statement": 39
    },
    "4084": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5335, 5402],
      "op": "PUSH2",
      "path": "15",
      "value": "0xFFE"
    },
    "4087": {
      "branch": 115,
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5335, 5402],
      "op": "JUMPI",
      "path": "15"
    },
    "4088": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5401, 5402],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4090": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5335, 5402],
      "op": "PUSH2",
      "path": "15",
      "value": "0xED2"
    },
    "4093": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5335, 5402],
      "op": "JUMP",
      "path": "15"
    },
    "4094": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5335, 5402],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4095": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4097": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4099": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4101": {
      "op": "SHL"
    },
    "4102": {
      "op": "SUB"
    },
    "4103": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "DUP4",
      "path": "15"
    },
    "4104": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "AND",
      "path": "15"
    },
    "4105": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4107": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "SWAP1",
      "path": "15"
    },
    "4108": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "DUP2",
      "path": "15"
    },
    "4109": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "MSTORE",
      "path": "15"
    },
    "4110": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5365],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "4112": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4114": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "SWAP1",
      "path": "15"
    },
    "4115": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "DUP2",
      "path": "15"
    },
    "4116": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "MSTORE",
      "path": "15"
    },
    "4117": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4119": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "DUP1",
      "path": "15"
    },
    "4120": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "DUP4",
      "path": "15"
    },
    "4121": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5374],
      "op": "KECCAK256",
      "path": "15"
    },
    "4122": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "4127": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4129": {
      "op": "NOT"
    },
    "4130": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5375, 5391],
      "op": "DUP7",
      "path": "15"
    },
    "4131": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5375, 5391],
      "op": "ADD",
      "path": "15"
    },
    "4132": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "AND",
      "path": "15"
    },
    "4133": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "DUP5",
      "path": "15"
    },
    "4134": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "MSTORE",
      "path": "15"
    },
    "4135": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "SWAP1",
      "path": "15"
    },
    "4136": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "SWAP2",
      "path": "15"
    },
    "4137": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "MSTORE",
      "path": "15"
    },
    "4138": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "SWAP1",
      "path": "15"
    },
    "4139": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5392],
      "op": "KECCAK256",
      "path": "15"
    },
    "4140": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5390, 5391],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "4142": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5398],
      "op": "ADD",
      "path": "15"
    },
    "4143": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5354, 5398],
      "op": "SLOAD",
      "path": "15"
    },
    "4144": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5328, 5402],
      "op": "SWAP4",
      "path": "15"
    },
    "4145": {
      "fn": "NerveToken.getCurrentVotes",
      "offset": [5161, 5409],
      "op": "SWAP3",
      "path": "15"
    },
    "4146": {
      "op": "POP"
    },
    "4147": {
      "op": "POP"
    },
    "4148": {
      "op": "POP"
    },
    "4149": {
      "fn": "NerveToken.getCurrentVotes",
      "jump": "o",
      "offset": [5161, 5409],
      "op": "JUMP",
      "path": "15"
    },
    "4150": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4151": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4016, 4039],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4153": {
      "offset": [2104, 2184],
      "op": "PUSH32",
      "path": "15",
      "value": "0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866"
    },
    "4186": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4142, 4148],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1061"
    },
    "4189": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4142, 4146],
      "op": "PUSH2",
      "path": "15",
      "value": "0x7BE"
    },
    "4192": {
      "fn": "NerveToken.delegateBySig",
      "jump": "i",
      "offset": [4142, 4148],
      "op": "JUMP",
      "path": "15"
    },
    "4193": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4142, 4148],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4194": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4126, 4150],
      "op": "DUP1",
      "path": "15"
    },
    "4195": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4126, 4150],
      "op": "MLOAD",
      "path": "15"
    },
    "4196": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4126, 4150],
      "op": "SWAP1",
      "path": "15"
    },
    "4197": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4126, 4150],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4199": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4126, 4150],
      "op": "ADD",
      "path": "15"
    },
    "4200": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4126, 4150],
      "op": "KECCAK256",
      "path": "15"
    },
    "4201": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4168, 4180],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1070"
    },
    "4204": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4168, 4178],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1CDB"
    },
    "4207": {
      "fn": "NerveToken.delegateBySig",
      "jump": "i",
      "offset": [4168, 4180],
      "op": "JUMP",
      "path": "15"
    },
    "4208": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4168, 4180],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4209": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4211": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP1",
      "path": "15"
    },
    "4212": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MLOAD",
      "path": "15"
    },
    "4213": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4215": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP1",
      "path": "15"
    },
    "4216": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP3",
      "path": "15"
    },
    "4217": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "ADD",
      "path": "15"
    },
    "4218": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP6",
      "path": "15"
    },
    "4219": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP1",
      "path": "15"
    },
    "4220": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP6",
      "path": "15"
    },
    "4221": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MSTORE",
      "path": "15"
    },
    "4222": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP1",
      "path": "15"
    },
    "4223": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP3",
      "path": "15"
    },
    "4224": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "ADD",
      "path": "15"
    },
    "4225": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP4",
      "path": "15"
    },
    "4226": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP1",
      "path": "15"
    },
    "4227": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP4",
      "path": "15"
    },
    "4228": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MSTORE",
      "path": "15"
    },
    "4229": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "4231": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP4",
      "path": "15"
    },
    "4232": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "ADD",
      "path": "15"
    },
    "4233": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP2",
      "path": "15"
    },
    "4234": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP1",
      "path": "15"
    },
    "4235": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP2",
      "path": "15"
    },
    "4236": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MSTORE",
      "path": "15"
    },
    "4237": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4206, 4210],
      "op": "ADDRESS",
      "path": "15"
    },
    "4238": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x80"
    },
    "4240": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP1",
      "path": "15"
    },
    "4241": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP5",
      "path": "15"
    },
    "4242": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "ADD",
      "path": "15"
    },
    "4243": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP2",
      "path": "15"
    },
    "4244": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP1",
      "path": "15"
    },
    "4245": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP2",
      "path": "15"
    },
    "4246": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MSTORE",
      "path": "15"
    },
    "4247": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP2",
      "path": "15"
    },
    "4248": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MLOAD",
      "path": "15"
    },
    "4249": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP1",
      "path": "15"
    },
    "4250": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP5",
      "path": "15"
    },
    "4251": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SUB",
      "path": "15"
    },
    "4252": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP1",
      "path": "15"
    },
    "4253": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "SWAP2",
      "path": "15"
    },
    "4254": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "ADD",
      "path": "15"
    },
    "4255": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP2",
      "path": "15"
    },
    "4256": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MSTORE",
      "path": "15"
    },
    "4257": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "PUSH1",
      "path": "15",
      "value": "0xA0"
    },
    "4259": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP4",
      "path": "15"
    },
    "4260": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "ADD",
      "path": "15"
    },
    "4261": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "DUP3",
      "path": "15"
    },
    "4262": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4065, 4225],
      "op": "MSTORE",
      "path": "15"
    },
    "4263": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "DUP1",
      "path": "15"
    },
    "4264": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "MLOAD",
      "path": "15"
    },
    "4265": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "SWAP1",
      "path": "15"
    },
    "4266": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "DUP5",
      "path": "15"
    },
    "4267": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "ADD",
      "path": "15"
    },
    "4268": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "KECCAK256",
      "path": "15"
    },
    "4269": {
      "offset": [2321, 2392],
      "op": "PUSH32",
      "path": "15",
      "value": "0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF"
    },
    "4302": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "PUSH1",
      "path": "15",
      "value": "0xC0"
    },
    "4304": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP5",
      "path": "15"
    },
    "4305": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "ADD",
      "path": "15"
    },
    "4306": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MSTORE",
      "path": "15"
    },
    "4307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4311": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4313": {
      "op": "SHL"
    },
    "4314": {
      "op": "SUB"
    },
    "4315": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP12",
      "path": "15"
    },
    "4316": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "AND",
      "path": "15"
    },
    "4317": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "PUSH1",
      "path": "15",
      "value": "0xE0"
    },
    "4319": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP5",
      "path": "15"
    },
    "4320": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "ADD",
      "path": "15"
    },
    "4321": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MSTORE",
      "path": "15"
    },
    "4322": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "PUSH2",
      "path": "15",
      "value": "0x100"
    },
    "4325": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP4",
      "path": "15"
    },
    "4326": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "ADD",
      "path": "15"
    },
    "4327": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP11",
      "path": "15"
    },
    "4328": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "SWAP1",
      "path": "15"
    },
    "4329": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MSTORE",
      "path": "15"
    },
    "4330": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "PUSH2",
      "path": "15",
      "value": "0x120"
    },
    "4333": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP1",
      "path": "15"
    },
    "4334": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP5",
      "path": "15"
    },
    "4335": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "ADD",
      "path": "15"
    },
    "4336": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP11",
      "path": "15"
    },
    "4337": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "SWAP1",
      "path": "15"
    },
    "4338": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MSTORE",
      "path": "15"
    },
    "4339": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP3",
      "path": "15"
    },
    "4340": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MLOAD",
      "path": "15"
    },
    "4341": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP1",
      "path": "15"
    },
    "4342": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP6",
      "path": "15"
    },
    "4343": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "SUB",
      "path": "15"
    },
    "4344": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "SWAP1",
      "path": "15"
    },
    "4345": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "SWAP2",
      "path": "15"
    },
    "4346": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "ADD",
      "path": "15"
    },
    "4347": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP2",
      "path": "15"
    },
    "4348": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MSTORE",
      "path": "15"
    },
    "4349": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "PUSH2",
      "path": "15",
      "value": "0x140"
    },
    "4352": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP5",
      "path": "15"
    },
    "4353": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "ADD",
      "path": "15"
    },
    "4354": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "DUP4",
      "path": "15"
    },
    "4355": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4290, 4425],
      "op": "MSTORE",
      "path": "15"
    },
    "4356": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "DUP1",
      "path": "15"
    },
    "4357": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "MLOAD",
      "path": "15"
    },
    "4358": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "SWAP1",
      "path": "15"
    },
    "4359": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "DUP6",
      "path": "15"
    },
    "4360": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "ADD",
      "path": "15"
    },
    "4361": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "KECCAK256",
      "path": "15"
    },
    "4362": {
      "op": "PUSH2",
      "value": "0x1901"
    },
    "4365": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "4367": {
      "op": "SHL"
    },
    "4368": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "PUSH2",
      "path": "15",
      "value": "0x160"
    },
    "4371": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP6",
      "path": "15"
    },
    "4372": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "ADD",
      "path": "15"
    },
    "4373": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "MSTORE",
      "path": "15"
    },
    "4374": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "PUSH2",
      "path": "15",
      "value": "0x162"
    },
    "4377": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP5",
      "path": "15"
    },
    "4378": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "ADD",
      "path": "15"
    },
    "4379": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP3",
      "path": "15"
    },
    "4380": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "SWAP1",
      "path": "15"
    },
    "4381": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "MSTORE",
      "path": "15"
    },
    "4382": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "PUSH2",
      "path": "15",
      "value": "0x182"
    },
    "4385": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP1",
      "path": "15"
    },
    "4386": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP6",
      "path": "15"
    },
    "4387": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "ADD",
      "path": "15"
    },
    "4388": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP3",
      "path": "15"
    },
    "4389": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "SWAP1",
      "path": "15"
    },
    "4390": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "MSTORE",
      "path": "15"
    },
    "4391": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP4",
      "path": "15"
    },
    "4392": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "MLOAD",
      "path": "15"
    },
    "4393": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP1",
      "path": "15"
    },
    "4394": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP7",
      "path": "15"
    },
    "4395": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "SUB",
      "path": "15"
    },
    "4396": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "SWAP1",
      "path": "15"
    },
    "4397": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "SWAP2",
      "path": "15"
    },
    "4398": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "ADD",
      "path": "15"
    },
    "4399": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP2",
      "path": "15"
    },
    "4400": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "MSTORE",
      "path": "15"
    },
    "4401": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1A2"
    },
    "4404": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP6",
      "path": "15"
    },
    "4405": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "ADD",
      "path": "15"
    },
    "4406": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP1",
      "path": "15"
    },
    "4407": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "DUP6",
      "path": "15"
    },
    "4408": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4486, 4605],
      "op": "MSTORE",
      "path": "15"
    },
    "4409": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "DUP2",
      "path": "15"
    },
    "4410": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "MLOAD",
      "path": "15"
    },
    "4411": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "SWAP2",
      "path": "15"
    },
    "4412": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "DUP8",
      "path": "15"
    },
    "4413": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "ADD",
      "path": "15"
    },
    "4414": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "SWAP2",
      "path": "15"
    },
    "4415": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "SWAP1",
      "path": "15"
    },
    "4416": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "SWAP2",
      "path": "15"
    },
    "4417": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "KECCAK256",
      "path": "15"
    },
    "4418": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4420": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP2",
      "path": "15"
    },
    "4421": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP3",
      "path": "15"
    },
    "4422": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4423": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MSTORE",
      "path": "15"
    },
    "4424": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1C2"
    },
    "4427": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP7",
      "path": "15"
    },
    "4428": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4429": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP1",
      "path": "15"
    },
    "4430": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP7",
      "path": "15"
    },
    "4431": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MSTORE",
      "path": "15"
    },
    "4432": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP2",
      "path": "15"
    },
    "4433": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4434": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MSTORE",
      "path": "15"
    },
    "4435": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH1",
      "path": "15",
      "value": "0xFF"
    },
    "4437": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP12",
      "path": "15"
    },
    "4438": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "AND",
      "path": "15"
    },
    "4439": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1E2"
    },
    "4442": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP8",
      "path": "15"
    },
    "4443": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4444": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MSTORE",
      "path": "15"
    },
    "4445": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH2",
      "path": "15",
      "value": "0x202"
    },
    "4448": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP7",
      "path": "15"
    },
    "4449": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4450": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP11",
      "path": "15"
    },
    "4451": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4452": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MSTORE",
      "path": "15"
    },
    "4453": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH2",
      "path": "15",
      "value": "0x222"
    },
    "4456": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP7",
      "path": "15"
    },
    "4457": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4458": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP10",
      "path": "15"
    },
    "4459": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4460": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MSTORE",
      "path": "15"
    },
    "4461": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP4",
      "path": "15"
    },
    "4462": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MLOAD",
      "path": "15"
    },
    "4463": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "SWAP3",
      "path": "15"
    },
    "4464": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4042, 4235],
      "op": "SWAP7",
      "path": "15"
    },
    "4465": {
      "op": "POP"
    },
    "4466": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "SWAP1",
      "path": "15"
    },
    "4467": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4267, 4435],
      "op": "SWAP5",
      "path": "15"
    },
    "4468": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "SWAP3",
      "path": "15"
    },
    "4469": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4463, 4615],
      "op": "SWAP4",
      "path": "15"
    },
    "4470": {
      "op": "SWAP1"
    },
    "4471": {
      "op": "SWAP3"
    },
    "4472": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "4474": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP3",
      "path": "15"
    },
    "4475": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH2",
      "path": "15",
      "value": "0x242"
    },
    "4478": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP1",
      "path": "15"
    },
    "4479": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP5",
      "path": "15"
    },
    "4480": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4481": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP4",
      "path": "15"
    },
    "4482": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4484": {
      "op": "NOT"
    },
    "4485": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP4",
      "path": "15"
    },
    "4486": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4487": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP3",
      "path": "15"
    },
    "4488": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4489": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP2",
      "path": "15"
    },
    "4490": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4491": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SUB",
      "path": "15"
    },
    "4492": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4493": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP2",
      "path": "15"
    },
    "4494": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4495": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP1",
      "path": "15"
    },
    "4496": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP6",
      "path": "15"
    },
    "4497": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "GAS",
      "path": "15"
    },
    "4498": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "STATICCALL",
      "path": "15"
    },
    "4499": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ISZERO",
      "path": "15"
    },
    "4500": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP1",
      "path": "15"
    },
    "4501": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ISZERO",
      "path": "15"
    },
    "4502": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH2",
      "path": "15",
      "value": "0x11A3"
    },
    "4505": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "JUMPI",
      "path": "15"
    },
    "4506": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "4507": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4509": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "DUP1",
      "path": "15"
    },
    "4510": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "RETURNDATACOPY",
      "path": "15"
    },
    "4511": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "4512": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4514": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "REVERT",
      "path": "15"
    },
    "4515": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4516": {
      "op": "POP"
    },
    "4517": {
      "op": "POP"
    },
    "4518": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4520": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MLOAD",
      "path": "15"
    },
    "4521": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4523": {
      "op": "NOT"
    },
    "4524": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "ADD",
      "path": "15"
    },
    "4525": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "MLOAD",
      "path": "15"
    },
    "4526": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4646, 4672],
      "op": "SWAP2",
      "path": "15"
    },
    "4527": {
      "op": "POP"
    },
    "4528": {
      "op": "POP"
    },
    "4529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4531": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4533": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4535": {
      "op": "SHL"
    },
    "4536": {
      "op": "SUB"
    },
    "4537": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4690, 4713],
      "op": "DUP2",
      "path": "15",
      "statement": 40
    },
    "4538": {
      "branch": 116,
      "fn": "NerveToken.delegateBySig",
      "offset": [4690, 4713],
      "op": "AND",
      "path": "15"
    },
    "4539": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH2",
      "path": "15",
      "value": "0x11F5"
    },
    "4542": {
      "branch": 116,
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "JUMPI",
      "path": "15"
    },
    "4543": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4545": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "MLOAD",
      "path": "15"
    },
    "4546": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4550": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4552": {
      "op": "SHL"
    },
    "4553": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP2",
      "path": "15"
    },
    "4554": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "MSTORE",
      "path": "15"
    },
    "4555": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "4557": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "ADD",
      "path": "15"
    },
    "4558": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP1",
      "path": "15"
    },
    "4559": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP1",
      "path": "15"
    },
    "4560": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4562": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "ADD",
      "path": "15"
    },
    "4563": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP3",
      "path": "15"
    },
    "4564": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP2",
      "path": "15"
    },
    "4565": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "SUB",
      "path": "15"
    },
    "4566": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP3",
      "path": "15"
    },
    "4567": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "MSTORE",
      "path": "15"
    },
    "4568": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x25"
    },
    "4570": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP2",
      "path": "15"
    },
    "4571": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "MSTORE",
      "path": "15"
    },
    "4572": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4574": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "ADD",
      "path": "15"
    },
    "4575": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP1",
      "path": "15"
    },
    "4576": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH2",
      "path": "15",
      "value": "0x22E6"
    },
    "4579": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x25"
    },
    "4581": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "SWAP2",
      "path": "15"
    },
    "4582": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "CODECOPY",
      "path": "15"
    },
    "4583": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4585": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "ADD",
      "path": "15"
    },
    "4586": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "SWAP2",
      "path": "15"
    },
    "4587": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "POP",
      "path": "15"
    },
    "4588": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "POP",
      "path": "15"
    },
    "4589": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4591": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "MLOAD",
      "path": "15"
    },
    "4592": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "DUP1",
      "path": "15"
    },
    "4593": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "SWAP2",
      "path": "15"
    },
    "4594": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "SUB",
      "path": "15"
    },
    "4595": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "SWAP1",
      "path": "15"
    },
    "4596": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "REVERT",
      "path": "15"
    },
    "4597": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4682, 4755],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4598": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4600": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4602": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4604": {
      "op": "SHL"
    },
    "4605": {
      "op": "SUB"
    },
    "4606": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "DUP2",
      "path": "15",
      "statement": 41
    },
    "4607": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "AND",
      "path": "15"
    },
    "4608": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "4610": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "SWAP1",
      "path": "15"
    },
    "4611": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "DUP2",
      "path": "15"
    },
    "4612": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "MSTORE",
      "path": "15"
    },
    "4613": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4788],
      "op": "PUSH1",
      "path": "15",
      "value": "0xA"
    },
    "4615": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4617": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "MSTORE",
      "path": "15"
    },
    "4618": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4620": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "SWAP1",
      "path": "15"
    },
    "4621": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4799],
      "op": "KECCAK256",
      "path": "15"
    },
    "4622": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "DUP1",
      "path": "15"
    },
    "4623": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "SLOAD",
      "path": "15"
    },
    "4624": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "4626": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "DUP2",
      "path": "15"
    },
    "4627": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "ADD",
      "path": "15"
    },
    "4628": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "SWAP1",
      "path": "15"
    },
    "4629": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "SWAP2",
      "path": "15"
    },
    "4630": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4782, 4801],
      "op": "SSTORE",
      "path": "15"
    },
    "4631": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4773, 4801],
      "op": "DUP10",
      "path": "15"
    },
    "4632": {
      "branch": 117,
      "fn": "NerveToken.delegateBySig",
      "offset": [4773, 4801],
      "op": "EQ",
      "path": "15"
    },
    "4633": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1253"
    },
    "4636": {
      "branch": 117,
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "JUMPI",
      "path": "15"
    },
    "4637": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4639": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "MLOAD",
      "path": "15"
    },
    "4640": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4644": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4646": {
      "op": "SHL"
    },
    "4647": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP2",
      "path": "15"
    },
    "4648": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "MSTORE",
      "path": "15"
    },
    "4649": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "4651": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "ADD",
      "path": "15"
    },
    "4652": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP1",
      "path": "15"
    },
    "4653": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP1",
      "path": "15"
    },
    "4654": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4656": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "ADD",
      "path": "15"
    },
    "4657": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP3",
      "path": "15"
    },
    "4658": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP2",
      "path": "15"
    },
    "4659": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "SUB",
      "path": "15"
    },
    "4660": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP3",
      "path": "15"
    },
    "4661": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "MSTORE",
      "path": "15"
    },
    "4662": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x21"
    },
    "4664": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP2",
      "path": "15"
    },
    "4665": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "MSTORE",
      "path": "15"
    },
    "4666": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4668": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "ADD",
      "path": "15"
    },
    "4669": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP1",
      "path": "15"
    },
    "4670": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2224"
    },
    "4673": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x21"
    },
    "4675": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "SWAP2",
      "path": "15"
    },
    "4676": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "CODECOPY",
      "path": "15"
    },
    "4677": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4679": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "ADD",
      "path": "15"
    },
    "4680": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "SWAP2",
      "path": "15"
    },
    "4681": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "POP",
      "path": "15"
    },
    "4682": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "POP",
      "path": "15"
    },
    "4683": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4685": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "MLOAD",
      "path": "15"
    },
    "4686": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "DUP1",
      "path": "15"
    },
    "4687": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "SWAP2",
      "path": "15"
    },
    "4688": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "SUB",
      "path": "15"
    },
    "4689": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "SWAP1",
      "path": "15"
    },
    "4690": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "REVERT",
      "path": "15"
    },
    "4691": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4765, 4839],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4692": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4864, 4870],
      "op": "DUP8",
      "path": "15",
      "statement": 42
    },
    "4693": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4857, 4860],
      "op": "TIMESTAMP",
      "path": "15"
    },
    "4694": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4857, 4870],
      "op": "GT",
      "path": "15"
    },
    "4695": {
      "branch": 118,
      "fn": "NerveToken.delegateBySig",
      "offset": [4857, 4870],
      "op": "ISZERO",
      "path": "15"
    },
    "4696": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1292"
    },
    "4699": {
      "branch": 118,
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "JUMPI",
      "path": "15"
    },
    "4700": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4702": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "MLOAD",
      "path": "15"
    },
    "4703": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4707": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4709": {
      "op": "SHL"
    },
    "4710": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP2",
      "path": "15"
    },
    "4711": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "MSTORE",
      "path": "15"
    },
    "4712": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "4714": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "ADD",
      "path": "15"
    },
    "4715": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP1",
      "path": "15"
    },
    "4716": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP1",
      "path": "15"
    },
    "4717": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4719": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "ADD",
      "path": "15"
    },
    "4720": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP3",
      "path": "15"
    },
    "4721": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP2",
      "path": "15"
    },
    "4722": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "SUB",
      "path": "15"
    },
    "4723": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP3",
      "path": "15"
    },
    "4724": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "MSTORE",
      "path": "15"
    },
    "4725": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x25"
    },
    "4727": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP2",
      "path": "15"
    },
    "4728": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "MSTORE",
      "path": "15"
    },
    "4729": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "4731": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "ADD",
      "path": "15"
    },
    "4732": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP1",
      "path": "15"
    },
    "4733": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2275"
    },
    "4736": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x25"
    },
    "4738": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "SWAP2",
      "path": "15"
    },
    "4739": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "CODECOPY",
      "path": "15"
    },
    "4740": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4742": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "ADD",
      "path": "15"
    },
    "4743": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "SWAP2",
      "path": "15"
    },
    "4744": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "POP",
      "path": "15"
    },
    "4745": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "POP",
      "path": "15"
    },
    "4746": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4748": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "MLOAD",
      "path": "15"
    },
    "4749": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "DUP1",
      "path": "15"
    },
    "4750": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "SWAP2",
      "path": "15"
    },
    "4751": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "SUB",
      "path": "15"
    },
    "4752": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "SWAP1",
      "path": "15"
    },
    "4753": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "REVERT",
      "path": "15"
    },
    "4754": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4849, 4912],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4755": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4929, 4960],
      "op": "PUSH2",
      "path": "15",
      "statement": 43,
      "value": "0x129C"
    },
    "4758": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4939, 4948],
      "op": "DUP2",
      "path": "15"
    },
    "4759": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4950, 4959],
      "op": "DUP12",
      "path": "15"
    },
    "4760": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4929, 4938],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1C25"
    },
    "4763": {
      "fn": "NerveToken.delegateBySig",
      "jump": "i",
      "offset": [4929, 4960],
      "op": "JUMP",
      "path": "15"
    },
    "4764": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4929, 4960],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4765": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4922, 4960],
      "op": "POP",
      "path": "15"
    },
    "4766": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4922, 4960],
      "op": "POP",
      "path": "15"
    },
    "4767": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4922, 4960],
      "op": "POP",
      "path": "15"
    },
    "4768": {
      "fn": "NerveToken.delegateBySig",
      "offset": [4922, 4960],
      "op": "POP",
      "path": "15"
    },
    "4769": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4770": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "POP",
      "path": "15"
    },
    "4771": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "POP",
      "path": "15"
    },
    "4772": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "POP",
      "path": "15"
    },
    "4773": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "POP",
      "path": "15"
    },
    "4774": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "POP",
      "path": "15"
    },
    "4775": {
      "fn": "NerveToken.delegateBySig",
      "offset": [3833, 4967],
      "op": "POP",
      "path": "15"
    },
    "4776": {
      "fn": "NerveToken.delegateBySig",
      "jump": "o",
      "offset": [3833, 4967],
      "op": "JUMP",
      "path": "15"
    },
    "4777": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3255, 3380],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4778": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3318, 3325],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4780": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "DUP2",
      "path": "0",
      "statement": 44
    },
    "4781": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "DUP2",
      "path": "0"
    },
    "4782": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "MSTORE",
      "path": "0"
    },
    "4783": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3350],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "4785": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4787": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "MSTORE",
      "path": "0"
    },
    "4788": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4790": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "DUP2",
      "path": "0"
    },
    "4791": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3356],
      "op": "KECCAK256",
      "path": "0"
    },
    "4792": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3373],
      "op": "PUSH2",
      "path": "0",
      "value": "0x86C"
    },
    "4795": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3373],
      "op": "SWAP1",
      "path": "0"
    },
    "4796": {
      "fn": "AccessControl.getRoleMemberCount",
      "offset": [3344, 3371],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CDF"
    },
    "4799": {
      "fn": "AccessControl.getRoleMemberCount",
      "jump": "i",
      "offset": [3344, 3373],
      "op": "JUMP",
      "path": "0"
    },
    "4800": {
      "offset": [509, 571],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4801": {
      "offset": [547, 571],
      "op": "PUSH32",
      "path": "15",
      "value": "0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
    },
    "4834": {
      "offset": [509, 571],
      "op": "DUP2",
      "path": "15"
    },
    "4835": {
      "fn": "AccessControl.getRoleMemberCount",
      "jump": "o",
      "offset": [509, 571],
      "op": "JUMP",
      "path": "15"
    },
    "4836": {
      "fn": "AccessControl.revokeRole",
      "offset": [5101, 5327],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4837": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "PUSH1",
      "path": "0",
      "statement": 45,
      "value": "0x0"
    },
    "4839": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "DUP3",
      "path": "0"
    },
    "4840": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "DUP2",
      "path": "0"
    },
    "4841": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "MSTORE",
      "path": "0"
    },
    "4842": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5199],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "4844": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4846": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "MSTORE",
      "path": "0"
    },
    "4847": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4849": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "SWAP1",
      "path": "0"
    },
    "4850": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5205],
      "op": "KECCAK256",
      "path": "0"
    },
    "4851": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5215],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4853": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5215],
      "op": "ADD",
      "path": "0"
    },
    "4854": {
      "fn": "AccessControl.revokeRole",
      "offset": [5193, 5215],
      "op": "SLOAD",
      "path": "0"
    },
    "4855": {
      "fn": "AccessControl.revokeRole",
      "offset": [5185, 5230],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1302"
    },
    "4858": {
      "fn": "AccessControl.revokeRole",
      "offset": [5185, 5230],
      "op": "SWAP1",
      "path": "0"
    },
    "4859": {
      "fn": "AccessControl.revokeRole",
      "offset": [5217, 5229],
      "op": "PUSH2",
      "path": "0",
      "value": "0x956"
    },
    "4862": {
      "fn": "AccessControl.revokeRole",
      "offset": [5217, 5227],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14EE"
    },
    "4865": {
      "fn": "AccessControl.revokeRole",
      "jump": "i",
      "offset": [5217, 5229],
      "op": "JUMP",
      "path": "0"
    },
    "4866": {
      "branch": 130,
      "fn": "AccessControl.revokeRole",
      "offset": [5185, 5230],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4867": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA04"
    },
    "4870": {
      "branch": 130,
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "JUMPI",
      "path": "0"
    },
    "4871": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4873": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "MLOAD",
      "path": "0"
    },
    "4874": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4878": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4880": {
      "op": "SHL"
    },
    "4881": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP2",
      "path": "0"
    },
    "4882": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "MSTORE",
      "path": "0"
    },
    "4883": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4885": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "ADD",
      "path": "0"
    },
    "4886": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP1",
      "path": "0"
    },
    "4887": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP1",
      "path": "0"
    },
    "4888": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4890": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "ADD",
      "path": "0"
    },
    "4891": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP3",
      "path": "0"
    },
    "4892": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP2",
      "path": "0"
    },
    "4893": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "SUB",
      "path": "0"
    },
    "4894": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP3",
      "path": "0"
    },
    "4895": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "MSTORE",
      "path": "0"
    },
    "4896": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x30"
    },
    "4898": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP2",
      "path": "0"
    },
    "4899": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "MSTORE",
      "path": "0"
    },
    "4900": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4902": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "ADD",
      "path": "0"
    },
    "4903": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP1",
      "path": "0"
    },
    "4904": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2245"
    },
    "4907": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x30"
    },
    "4909": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "SWAP2",
      "path": "0"
    },
    "4910": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "CODECOPY",
      "path": "0"
    },
    "4911": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4913": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "ADD",
      "path": "0"
    },
    "4914": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "SWAP2",
      "path": "0"
    },
    "4915": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "POP",
      "path": "0"
    },
    "4916": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "POP",
      "path": "0"
    },
    "4917": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4919": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "MLOAD",
      "path": "0"
    },
    "4920": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "DUP1",
      "path": "0"
    },
    "4921": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "SWAP2",
      "path": "0"
    },
    "4922": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "SUB",
      "path": "0"
    },
    "4923": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "SWAP1",
      "path": "0"
    },
    "4924": {
      "fn": "AccessControl.revokeRole",
      "offset": [5177, 5283],
      "op": "REVERT",
      "path": "0"
    },
    "4925": {
      "fn": "ERC20.allowance",
      "offset": [3957, 4106],
      "op": "JUMPDEST",
      "path": "3"
    },
    "4926": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4928": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4930": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4932": {
      "op": "SHL"
    },
    "4933": {
      "op": "SUB"
    },
    "4934": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "SWAP2",
      "path": "3",
      "statement": 46
    },
    "4935": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "DUP3",
      "path": "3"
    },
    "4936": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "AND",
      "path": "3"
    },
    "4937": {
      "fn": "ERC20.allowance",
      "offset": [4046, 4053],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "4939": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "SWAP1",
      "path": "3"
    },
    "4940": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "DUP2",
      "path": "3"
    },
    "4941": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "MSTORE",
      "path": "3"
    },
    "4942": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4083],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "4944": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "4946": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "SWAP1",
      "path": "3"
    },
    "4947": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "DUP2",
      "path": "3"
    },
    "4948": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "MSTORE",
      "path": "3"
    },
    "4949": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "4951": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "DUP1",
      "path": "3"
    },
    "4952": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "DUP4",
      "path": "3"
    },
    "4953": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4090],
      "op": "KECCAK256",
      "path": "3"
    },
    "4954": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP4",
      "path": "3"
    },
    "4955": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP1",
      "path": "3"
    },
    "4956": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP5",
      "path": "3"
    },
    "4957": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "AND",
      "path": "3"
    },
    "4958": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "DUP3",
      "path": "3"
    },
    "4959": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "MSTORE",
      "path": "3"
    },
    "4960": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP2",
      "path": "3"
    },
    "4961": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP1",
      "path": "3"
    },
    "4962": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP2",
      "path": "3"
    },
    "4963": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "MSTORE",
      "path": "3"
    },
    "4964": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "KECCAK256",
      "path": "3"
    },
    "4965": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SLOAD",
      "path": "3"
    },
    "4966": {
      "fn": "ERC20.allowance",
      "offset": [4072, 4099],
      "op": "SWAP1",
      "path": "3"
    },
    "4967": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [3957, 4106],
      "op": "JUMP",
      "path": "3"
    },
    "4968": {
      "offset": [2275, 2392],
      "op": "JUMPDEST",
      "path": "15"
    },
    "4969": {
      "offset": [2321, 2392],
      "op": "PUSH32",
      "path": "15",
      "value": "0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF"
    },
    "5002": {
      "offset": [2275, 2392],
      "op": "DUP2",
      "path": "15"
    },
    "5003": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [2275, 2392],
      "op": "JUMP",
      "path": "15"
    },
    "5004": {
      "offset": [1807, 1877],
      "op": "JUMPDEST",
      "path": "15"
    },
    "5005": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "5007": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "5009": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5010": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP2",
      "path": "15"
    },
    "5011": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MSTORE",
      "path": "15"
    },
    "5012": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "5014": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP3",
      "path": "15"
    },
    "5015": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP4",
      "path": "15"
    },
    "5016": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MSTORE",
      "path": "15"
    },
    "5017": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "5019": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "5020": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP5",
      "path": "15"
    },
    "5021": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "KECCAK256",
      "path": "15"
    },
    "5022": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5023": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP2",
      "path": "15"
    },
    "5024": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MSTORE",
      "path": "15"
    },
    "5025": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5026": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP3",
      "path": "15"
    },
    "5027": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "MSTORE",
      "path": "15"
    },
    "5028": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5029": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "KECCAK256",
      "path": "15"
    },
    "5030": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP1",
      "path": "15"
    },
    "5031": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SLOAD",
      "path": "15"
    },
    "5032": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "5034": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5035": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP2",
      "path": "15"
    },
    "5036": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "ADD",
      "path": "15"
    },
    "5037": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SLOAD",
      "path": "15"
    },
    "5038": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "5043": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5044": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP2",
      "path": "15"
    },
    "5045": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "AND",
      "path": "15"
    },
    "5046": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "SWAP1",
      "path": "15"
    },
    "5047": {
      "fn": "ERC20.allowance",
      "offset": [1807, 1877],
      "op": "DUP3",
      "path": "15"
    },
    "5048": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [1807, 1877],
      "op": "JUMP",
      "path": "15"
    },
    "5049": {
      "fn": "Ownable.transferOwnership",
      "offset": [2011, 2251],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5050": {
      "offset": [1308, 1320],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13C1"
    },
    "5053": {
      "offset": [1308, 1318],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14EE"
    },
    "5056": {
      "jump": "i",
      "offset": [1308, 1320],
      "op": "JUMP",
      "path": "1"
    },
    "5057": {
      "fn": "Ownable.transferOwnership",
      "offset": [1308, 1320],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5058": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5060": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5062": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5064": {
      "op": "SHL"
    },
    "5065": {
      "op": "SUB"
    },
    "5066": {
      "offset": [1297, 1320],
      "op": "AND",
      "path": "1"
    },
    "5067": {
      "offset": [1297, 1304],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13D2"
    },
    "5070": {
      "offset": [1297, 1302],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEA6"
    },
    "5073": {
      "jump": "i",
      "offset": [1297, 1304],
      "op": "JUMP",
      "path": "1"
    },
    "5074": {
      "fn": "Ownable.transferOwnership",
      "offset": [1297, 1304],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5075": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5077": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5079": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5081": {
      "op": "SHL"
    },
    "5082": {
      "op": "SUB"
    },
    "5083": {
      "offset": [1297, 1320],
      "op": "AND",
      "path": "1"
    },
    "5084": {
      "branch": 142,
      "fn": "Ownable.transferOwnership",
      "offset": [1297, 1320],
      "op": "EQ",
      "path": "1"
    },
    "5085": {
      "offset": [1289, 1357],
      "op": "PUSH2",
      "path": "1",
      "value": "0x142D"
    },
    "5088": {
      "branch": 142,
      "offset": [1289, 1357],
      "op": "JUMPI",
      "path": "1"
    },
    "5089": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5091": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "DUP1",
      "path": "1"
    },
    "5092": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "MLOAD",
      "path": "1"
    },
    "5093": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5097": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5099": {
      "op": "SHL"
    },
    "5100": {
      "offset": [1289, 1357],
      "op": "DUP2",
      "path": "1"
    },
    "5101": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "5102": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5104": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5106": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "DUP3",
      "path": "1"
    },
    "5107": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "5108": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "DUP2",
      "path": "1"
    },
    "5109": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "5110": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "5111": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "5113": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "DUP3",
      "path": "1"
    },
    "5114": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "5115": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "5116": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH32",
      "path": "1",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "5149": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x44"
    },
    "5151": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "DUP3",
      "path": "1"
    },
    "5152": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "5153": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "MSTORE",
      "path": "1"
    },
    "5154": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "5155": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "MLOAD",
      "path": "1"
    },
    "5156": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "5157": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "DUP2",
      "path": "1"
    },
    "5158": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "5159": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "SUB",
      "path": "1"
    },
    "5160": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "5162": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "ADD",
      "path": "1"
    },
    "5163": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "SWAP1",
      "path": "1"
    },
    "5164": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "REVERT",
      "path": "1"
    },
    "5165": {
      "fn": "Ownable.transferOwnership",
      "offset": [1289, 1357],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5166": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5168": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5170": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5172": {
      "op": "SHL"
    },
    "5173": {
      "op": "SUB"
    },
    "5174": {
      "fn": "Ownable.transferOwnership",
      "offset": [2099, 2121],
      "op": "DUP2",
      "path": "1",
      "statement": 47
    },
    "5175": {
      "branch": 143,
      "fn": "Ownable.transferOwnership",
      "offset": [2099, 2121],
      "op": "AND",
      "path": "1"
    },
    "5176": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1472"
    },
    "5179": {
      "branch": 143,
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "JUMPI",
      "path": "1"
    },
    "5180": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5182": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "MLOAD",
      "path": "1"
    },
    "5183": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5187": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5189": {
      "op": "SHL"
    },
    "5190": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP2",
      "path": "1"
    },
    "5191": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "MSTORE",
      "path": "1"
    },
    "5192": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5194": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "ADD",
      "path": "1"
    },
    "5195": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP1",
      "path": "1"
    },
    "5196": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP1",
      "path": "1"
    },
    "5197": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5199": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "ADD",
      "path": "1"
    },
    "5200": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP3",
      "path": "1"
    },
    "5201": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP2",
      "path": "1"
    },
    "5202": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "SUB",
      "path": "1"
    },
    "5203": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP3",
      "path": "1"
    },
    "5204": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "MSTORE",
      "path": "1"
    },
    "5205": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x26"
    },
    "5207": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP2",
      "path": "1"
    },
    "5208": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "MSTORE",
      "path": "1"
    },
    "5209": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5211": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "ADD",
      "path": "1"
    },
    "5212": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP1",
      "path": "1"
    },
    "5213": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21B6"
    },
    "5216": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x26"
    },
    "5218": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "SWAP2",
      "path": "1"
    },
    "5219": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "CODECOPY",
      "path": "1"
    },
    "5220": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5222": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "ADD",
      "path": "1"
    },
    "5223": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "SWAP2",
      "path": "1"
    },
    "5224": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "POP",
      "path": "1"
    },
    "5225": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "POP",
      "path": "1"
    },
    "5226": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5228": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "MLOAD",
      "path": "1"
    },
    "5229": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "DUP1",
      "path": "1"
    },
    "5230": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "SWAP2",
      "path": "1"
    },
    "5231": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "SUB",
      "path": "1"
    },
    "5232": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "SWAP1",
      "path": "1"
    },
    "5233": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "REVERT",
      "path": "1"
    },
    "5234": {
      "fn": "Ownable.transferOwnership",
      "offset": [2091, 2164],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5235": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "PUSH1",
      "path": "1",
      "statement": 48,
      "value": "0x5"
    },
    "5237": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "SLOAD",
      "path": "1"
    },
    "5238": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5240": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "MLOAD",
      "path": "1"
    },
    "5241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5245": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5247": {
      "op": "SHL"
    },
    "5248": {
      "op": "SUB"
    },
    "5249": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "DUP1",
      "path": "1"
    },
    "5250": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "DUP5",
      "path": "1"
    },
    "5251": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "AND",
      "path": "1"
    },
    "5252": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "SWAP3",
      "path": "1"
    },
    "5253": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "5256": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "SWAP1",
      "path": "1"
    },
    "5257": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "DIV",
      "path": "1"
    },
    "5258": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "AND",
      "path": "1"
    },
    "5259": {
      "fn": "Ownable.transferOwnership",
      "offset": [2200, 2206],
      "op": "SWAP1",
      "path": "1"
    },
    "5260": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "5293": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "SWAP1",
      "path": "1"
    },
    "5294": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5296": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "SWAP1",
      "path": "1"
    },
    "5297": {
      "fn": "Ownable.transferOwnership",
      "offset": [2179, 2217],
      "op": "LOG3",
      "path": "1"
    },
    "5298": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2233],
      "op": "PUSH1",
      "path": "1",
      "statement": 49,
      "value": "0x5"
    },
    "5300": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "DUP1",
      "path": "1"
    },
    "5301": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SLOAD",
      "path": "1"
    },
    "5302": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5304": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5306": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5308": {
      "op": "SHL"
    },
    "5309": {
      "op": "SUB"
    },
    "5310": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP1",
      "path": "1"
    },
    "5311": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP3",
      "path": "1"
    },
    "5312": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "AND",
      "path": "1"
    },
    "5313": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "5316": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "MUL",
      "path": "1"
    },
    "5317": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "5320": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5322": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "5324": {
      "op": "SHL"
    },
    "5325": {
      "op": "SUB"
    },
    "5326": {
      "op": "NOT"
    },
    "5327": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP1",
      "path": "1"
    },
    "5328": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP3",
      "path": "1"
    },
    "5329": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "AND",
      "path": "1"
    },
    "5330": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP2",
      "path": "1"
    },
    "5331": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP1",
      "path": "1"
    },
    "5332": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP2",
      "path": "1"
    },
    "5333": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "OR",
      "path": "1"
    },
    "5334": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SWAP1",
      "path": "1"
    },
    "5335": {
      "fn": "Ownable.transferOwnership",
      "offset": [2227, 2244],
      "op": "SSTORE",
      "path": "1"
    },
    "5336": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [2011, 2251],
      "op": "JUMP",
      "path": "1"
    },
    "5337": {
      "fn": "EnumerableSet.add",
      "offset": [6429, 6579],
      "op": "JUMPDEST",
      "path": "9"
    },
    "5338": {
      "fn": "EnumerableSet.add",
      "offset": [6499, 6503],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "5340": {
      "fn": "EnumerableSet.add",
      "offset": [6522, 6572],
      "op": "PUSH2",
      "path": "9",
      "statement": 50,
      "value": "0xED2"
    },
    "5343": {
      "fn": "EnumerableSet.add",
      "offset": [6527, 6530],
      "op": "DUP4",
      "path": "9"
    },
    "5344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5346": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5348": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5350": {
      "op": "SHL"
    },
    "5351": {
      "op": "SUB"
    },
    "5352": {
      "fn": "EnumerableSet.add",
      "offset": [6547, 6570],
      "op": "DUP5",
      "path": "9"
    },
    "5353": {
      "fn": "EnumerableSet.add",
      "offset": [6547, 6570],
      "op": "AND",
      "path": "9"
    },
    "5354": {
      "fn": "EnumerableSet.add",
      "offset": [6522, 6526],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1CEA"
    },
    "5357": {
      "fn": "EnumerableSet.add",
      "jump": "i",
      "offset": [6522, 6572],
      "op": "JUMP",
      "path": "9"
    },
    "5358": {
      "fn": "Context._msgSender",
      "offset": [598, 702],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5359": {
      "fn": "Context._msgSender",
      "offset": [685, 695],
      "op": "CALLER",
      "path": "8",
      "statement": 51
    },
    "5360": {
      "fn": "Context._msgSender",
      "offset": [598, 702],
      "op": "SWAP1",
      "path": "8"
    },
    "5361": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [598, 702],
      "op": "JUMP",
      "path": "8"
    },
    "5362": {
      "fn": "ERC20._approve",
      "offset": [9355, 9695],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5363": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5365": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5367": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5369": {
      "op": "SHL"
    },
    "5370": {
      "op": "SUB"
    },
    "5371": {
      "fn": "ERC20._approve",
      "offset": [9456, 9475],
      "op": "DUP4",
      "path": "3",
      "statement": 52
    },
    "5372": {
      "branch": 133,
      "fn": "ERC20._approve",
      "offset": [9456, 9475],
      "op": "AND",
      "path": "3"
    },
    "5373": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1537"
    },
    "5376": {
      "branch": 133,
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "JUMPI",
      "path": "3"
    },
    "5377": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5379": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "MLOAD",
      "path": "3"
    },
    "5380": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5384": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5386": {
      "op": "SHL"
    },
    "5387": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP2",
      "path": "3"
    },
    "5388": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "MSTORE",
      "path": "3"
    },
    "5389": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "5391": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "ADD",
      "path": "3"
    },
    "5392": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP1",
      "path": "3"
    },
    "5393": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP1",
      "path": "3"
    },
    "5394": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5396": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "ADD",
      "path": "3"
    },
    "5397": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP3",
      "path": "3"
    },
    "5398": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP2",
      "path": "3"
    },
    "5399": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "SUB",
      "path": "3"
    },
    "5400": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP3",
      "path": "3"
    },
    "5401": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "MSTORE",
      "path": "3"
    },
    "5402": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x24"
    },
    "5404": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP2",
      "path": "3"
    },
    "5405": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "MSTORE",
      "path": "3"
    },
    "5406": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5408": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "ADD",
      "path": "3"
    },
    "5409": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP1",
      "path": "3"
    },
    "5410": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2351"
    },
    "5413": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x24"
    },
    "5415": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "SWAP2",
      "path": "3"
    },
    "5416": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "CODECOPY",
      "path": "3"
    },
    "5417": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5419": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "ADD",
      "path": "3"
    },
    "5420": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "SWAP2",
      "path": "3"
    },
    "5421": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "POP",
      "path": "3"
    },
    "5422": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "POP",
      "path": "3"
    },
    "5423": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5425": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "MLOAD",
      "path": "3"
    },
    "5426": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "DUP1",
      "path": "3"
    },
    "5427": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "SWAP2",
      "path": "3"
    },
    "5428": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "SUB",
      "path": "3"
    },
    "5429": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "SWAP1",
      "path": "3"
    },
    "5430": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "REVERT",
      "path": "3"
    },
    "5431": {
      "fn": "ERC20._approve",
      "offset": [9448, 9516],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5434": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5436": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5438": {
      "op": "SHL"
    },
    "5439": {
      "op": "SUB"
    },
    "5440": {
      "fn": "ERC20._approve",
      "offset": [9534, 9555],
      "op": "DUP3",
      "path": "3",
      "statement": 53
    },
    "5441": {
      "branch": 134,
      "fn": "ERC20._approve",
      "offset": [9534, 9555],
      "op": "AND",
      "path": "3"
    },
    "5442": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH2",
      "path": "3",
      "value": "0x157C"
    },
    "5445": {
      "branch": 134,
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "JUMPI",
      "path": "3"
    },
    "5446": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5448": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "MLOAD",
      "path": "3"
    },
    "5449": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5453": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5455": {
      "op": "SHL"
    },
    "5456": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP2",
      "path": "3"
    },
    "5457": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "MSTORE",
      "path": "3"
    },
    "5458": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "5460": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "ADD",
      "path": "3"
    },
    "5461": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP1",
      "path": "3"
    },
    "5462": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP1",
      "path": "3"
    },
    "5463": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5465": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "ADD",
      "path": "3"
    },
    "5466": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP3",
      "path": "3"
    },
    "5467": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP2",
      "path": "3"
    },
    "5468": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "SUB",
      "path": "3"
    },
    "5469": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP3",
      "path": "3"
    },
    "5470": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "MSTORE",
      "path": "3"
    },
    "5471": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x22"
    },
    "5473": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP2",
      "path": "3"
    },
    "5474": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "MSTORE",
      "path": "3"
    },
    "5475": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5477": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "ADD",
      "path": "3"
    },
    "5478": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP1",
      "path": "3"
    },
    "5479": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH2",
      "path": "3",
      "value": "0x21DC"
    },
    "5482": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x22"
    },
    "5484": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "SWAP2",
      "path": "3"
    },
    "5485": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "CODECOPY",
      "path": "3"
    },
    "5486": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5488": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "ADD",
      "path": "3"
    },
    "5489": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "SWAP2",
      "path": "3"
    },
    "5490": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "POP",
      "path": "3"
    },
    "5491": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "POP",
      "path": "3"
    },
    "5492": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5494": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "MLOAD",
      "path": "3"
    },
    "5495": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "DUP1",
      "path": "3"
    },
    "5496": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "SWAP2",
      "path": "3"
    },
    "5497": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "SUB",
      "path": "3"
    },
    "5498": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "SWAP1",
      "path": "3"
    },
    "5499": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "REVERT",
      "path": "3"
    },
    "5500": {
      "fn": "ERC20._approve",
      "offset": [9526, 9594],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5505": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5507": {
      "op": "SHL"
    },
    "5508": {
      "op": "SUB"
    },
    "5509": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP1",
      "path": "3",
      "statement": 54
    },
    "5510": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP5",
      "path": "3"
    },
    "5511": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "AND",
      "path": "3"
    },
    "5512": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "5514": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP2",
      "path": "3"
    },
    "5515": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP2",
      "path": "3"
    },
    "5516": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "MSTORE",
      "path": "3"
    },
    "5517": {
      "fn": "ERC20._approve",
      "offset": [9605, 9616],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "5519": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5521": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "SWAP1",
      "path": "3"
    },
    "5522": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP2",
      "path": "3"
    },
    "5523": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "MSTORE",
      "path": "3"
    },
    "5524": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5526": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP1",
      "path": "3"
    },
    "5527": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "DUP4",
      "path": "3"
    },
    "5528": {
      "fn": "ERC20._approve",
      "offset": [9605, 9623],
      "op": "KECCAK256",
      "path": "3"
    },
    "5529": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "SWAP5",
      "path": "3"
    },
    "5530": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "DUP8",
      "path": "3"
    },
    "5531": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "AND",
      "path": "3"
    },
    "5532": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "DUP1",
      "path": "3"
    },
    "5533": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "DUP5",
      "path": "3"
    },
    "5534": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "MSTORE",
      "path": "3"
    },
    "5535": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "SWAP5",
      "path": "3"
    },
    "5536": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "DUP3",
      "path": "3"
    },
    "5537": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "MSTORE",
      "path": "3"
    },
    "5538": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "SWAP2",
      "path": "3"
    },
    "5539": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "DUP3",
      "path": "3"
    },
    "5540": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "SWAP1",
      "path": "3"
    },
    "5541": {
      "fn": "ERC20._approve",
      "offset": [9605, 9632],
      "op": "KECCAK256",
      "path": "3"
    },
    "5542": {
      "fn": "ERC20._approve",
      "offset": [9605, 9641],
      "op": "DUP6",
      "path": "3"
    },
    "5543": {
      "fn": "ERC20._approve",
      "offset": [9605, 9641],
      "op": "SWAP1",
      "path": "3"
    },
    "5544": {
      "fn": "ERC20._approve",
      "offset": [9605, 9641],
      "op": "SSTORE",
      "path": "3"
    },
    "5545": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "DUP2",
      "path": "3",
      "statement": 55
    },
    "5546": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "MLOAD",
      "path": "3"
    },
    "5547": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "DUP6",
      "path": "3"
    },
    "5548": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "DUP2",
      "path": "3"
    },
    "5549": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "MSTORE",
      "path": "3"
    },
    "5550": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SWAP2",
      "path": "3"
    },
    "5551": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "MLOAD",
      "path": "3"
    },
    "5552": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "PUSH32",
      "path": "3",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "5585": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SWAP3",
      "path": "3"
    },
    "5586": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "DUP2",
      "path": "3"
    },
    "5587": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SWAP1",
      "path": "3"
    },
    "5588": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SUB",
      "path": "3"
    },
    "5589": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SWAP1",
      "path": "3"
    },
    "5590": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SWAP2",
      "path": "3"
    },
    "5591": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "ADD",
      "path": "3"
    },
    "5592": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "SWAP1",
      "path": "3"
    },
    "5593": {
      "fn": "ERC20._approve",
      "offset": [9656, 9688],
      "op": "LOG3",
      "path": "3"
    },
    "5594": {
      "fn": "ERC20._approve",
      "offset": [9355, 9695],
      "op": "POP",
      "path": "3"
    },
    "5595": {
      "fn": "ERC20._approve",
      "offset": [9355, 9695],
      "op": "POP",
      "path": "3"
    },
    "5596": {
      "fn": "ERC20._approve",
      "offset": [9355, 9695],
      "op": "POP",
      "path": "3"
    },
    "5597": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [9355, 9695],
      "op": "JUMP",
      "path": "3"
    },
    "5598": {
      "fn": "ERC20._transfer",
      "offset": [7031, 7561],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5603": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5605": {
      "op": "SHL"
    },
    "5606": {
      "op": "SUB"
    },
    "5607": {
      "fn": "ERC20._transfer",
      "offset": [7136, 7156],
      "op": "DUP4",
      "path": "3",
      "statement": 56
    },
    "5608": {
      "branch": 135,
      "fn": "ERC20._transfer",
      "offset": [7136, 7156],
      "op": "AND",
      "path": "3"
    },
    "5609": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1623"
    },
    "5612": {
      "branch": 135,
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "JUMPI",
      "path": "3"
    },
    "5613": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5615": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "MLOAD",
      "path": "3"
    },
    "5616": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5620": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5622": {
      "op": "SHL"
    },
    "5623": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP2",
      "path": "3"
    },
    "5624": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "MSTORE",
      "path": "3"
    },
    "5625": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "5627": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "ADD",
      "path": "3"
    },
    "5628": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP1",
      "path": "3"
    },
    "5629": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP1",
      "path": "3"
    },
    "5630": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5632": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "ADD",
      "path": "3"
    },
    "5633": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP3",
      "path": "3"
    },
    "5634": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP2",
      "path": "3"
    },
    "5635": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "SUB",
      "path": "3"
    },
    "5636": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP3",
      "path": "3"
    },
    "5637": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "MSTORE",
      "path": "3"
    },
    "5638": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x25"
    },
    "5640": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP2",
      "path": "3"
    },
    "5641": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "MSTORE",
      "path": "3"
    },
    "5642": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5644": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "ADD",
      "path": "3"
    },
    "5645": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP1",
      "path": "3"
    },
    "5646": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH2",
      "path": "3",
      "value": "0x232C"
    },
    "5649": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x25"
    },
    "5651": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "SWAP2",
      "path": "3"
    },
    "5652": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "CODECOPY",
      "path": "3"
    },
    "5653": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5655": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "ADD",
      "path": "3"
    },
    "5656": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "SWAP2",
      "path": "3"
    },
    "5657": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "POP",
      "path": "3"
    },
    "5658": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "POP",
      "path": "3"
    },
    "5659": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5661": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "MLOAD",
      "path": "3"
    },
    "5662": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "DUP1",
      "path": "3"
    },
    "5663": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "SWAP2",
      "path": "3"
    },
    "5664": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "SUB",
      "path": "3"
    },
    "5665": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "SWAP1",
      "path": "3"
    },
    "5666": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "REVERT",
      "path": "3"
    },
    "5667": {
      "fn": "ERC20._transfer",
      "offset": [7128, 7198],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5668": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5670": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5672": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5674": {
      "op": "SHL"
    },
    "5675": {
      "op": "SUB"
    },
    "5676": {
      "fn": "ERC20._transfer",
      "offset": [7216, 7239],
      "op": "DUP3",
      "path": "3",
      "statement": 57
    },
    "5677": {
      "branch": 136,
      "fn": "ERC20._transfer",
      "offset": [7216, 7239],
      "op": "AND",
      "path": "3"
    },
    "5678": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1668"
    },
    "5681": {
      "branch": 136,
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "JUMPI",
      "path": "3"
    },
    "5682": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5684": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "MLOAD",
      "path": "3"
    },
    "5685": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5689": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5691": {
      "op": "SHL"
    },
    "5692": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP2",
      "path": "3"
    },
    "5693": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "MSTORE",
      "path": "3"
    },
    "5694": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "5696": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "ADD",
      "path": "3"
    },
    "5697": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP1",
      "path": "3"
    },
    "5698": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP1",
      "path": "3"
    },
    "5699": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5701": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "ADD",
      "path": "3"
    },
    "5702": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP3",
      "path": "3"
    },
    "5703": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP2",
      "path": "3"
    },
    "5704": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "SUB",
      "path": "3"
    },
    "5705": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP3",
      "path": "3"
    },
    "5706": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "MSTORE",
      "path": "3"
    },
    "5707": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x23"
    },
    "5709": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP2",
      "path": "3"
    },
    "5710": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "MSTORE",
      "path": "3"
    },
    "5711": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5713": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "ADD",
      "path": "3"
    },
    "5714": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP1",
      "path": "3"
    },
    "5715": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH2",
      "path": "3",
      "value": "0x20E9"
    },
    "5718": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x23"
    },
    "5720": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "SWAP2",
      "path": "3"
    },
    "5721": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "CODECOPY",
      "path": "3"
    },
    "5722": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5724": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "ADD",
      "path": "3"
    },
    "5725": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "SWAP2",
      "path": "3"
    },
    "5726": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "POP",
      "path": "3"
    },
    "5727": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "POP",
      "path": "3"
    },
    "5728": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5730": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "MLOAD",
      "path": "3"
    },
    "5731": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "DUP1",
      "path": "3"
    },
    "5732": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "SWAP2",
      "path": "3"
    },
    "5733": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "SUB",
      "path": "3"
    },
    "5734": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "SWAP1",
      "path": "3"
    },
    "5735": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "REVERT",
      "path": "3"
    },
    "5736": {
      "fn": "ERC20._transfer",
      "offset": [7208, 7279],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5737": {
      "fn": "ERC20._transfer",
      "offset": [7290, 7337],
      "op": "PUSH2",
      "path": "3",
      "statement": 58,
      "value": "0x1673"
    },
    "5740": {
      "fn": "ERC20._transfer",
      "offset": [7311, 7317],
      "op": "DUP4",
      "path": "3"
    },
    "5741": {
      "fn": "ERC20._transfer",
      "offset": [7319, 7328],
      "op": "DUP4",
      "path": "3"
    },
    "5742": {
      "fn": "ERC20._transfer",
      "offset": [7330, 7336],
      "op": "DUP4",
      "path": "3"
    },
    "5743": {
      "fn": "ERC20._transfer",
      "offset": [7290, 7310],
      "op": "PUSH2",
      "path": "3",
      "value": "0xE8F"
    },
    "5746": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [7290, 7337],
      "op": "JUMP",
      "path": "3"
    },
    "5747": {
      "fn": "ERC20._transfer",
      "offset": [7290, 7337],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5748": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH2",
      "path": "3",
      "statement": 59,
      "value": "0x16B0"
    },
    "5751": {
      "fn": "ERC20._transfer",
      "offset": [7390, 7396],
      "op": "DUP2",
      "path": "3"
    },
    "5752": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5754": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "MLOAD",
      "path": "3"
    },
    "5755": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "DUP1",
      "path": "3"
    },
    "5756": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "5758": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "ADD",
      "path": "3"
    },
    "5759": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5761": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "MSTORE",
      "path": "3"
    },
    "5762": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "DUP1",
      "path": "3"
    },
    "5763": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH1",
      "path": "3",
      "value": "0x26"
    },
    "5765": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "DUP2",
      "path": "3"
    },
    "5766": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "MSTORE",
      "path": "3"
    },
    "5767": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5769": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "ADD",
      "path": "3"
    },
    "5770": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH2",
      "path": "3",
      "value": "0x21FE"
    },
    "5773": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "PUSH1",
      "path": "3",
      "value": "0x26"
    },
    "5775": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "SWAP2",
      "path": "3"
    },
    "5776": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "CODECOPY",
      "path": "3"
    },
    "5777": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5779": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5781": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5783": {
      "op": "SHL"
    },
    "5784": {
      "op": "SUB"
    },
    "5785": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "DUP7",
      "path": "3"
    },
    "5786": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "AND",
      "path": "3"
    },
    "5787": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7377],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "5789": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "SWAP1",
      "path": "3"
    },
    "5790": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "DUP2",
      "path": "3"
    },
    "5791": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "MSTORE",
      "path": "3"
    },
    "5792": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5794": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "DUP2",
      "path": "3"
    },
    "5795": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "SWAP1",
      "path": "3"
    },
    "5796": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "MSTORE",
      "path": "3"
    },
    "5797": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5799": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "SWAP1",
      "path": "3"
    },
    "5800": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "KECCAK256",
      "path": "3"
    },
    "5801": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "SLOAD",
      "path": "3"
    },
    "5802": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7385],
      "op": "SWAP2",
      "path": "3"
    },
    "5803": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "SWAP1",
      "path": "3"
    },
    "5804": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7389],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1739"
    },
    "5807": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [7368, 7439],
      "op": "JUMP",
      "path": "3"
    },
    "5808": {
      "fn": "ERC20._transfer",
      "offset": [7368, 7439],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5809": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5811": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5813": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5815": {
      "op": "SHL"
    },
    "5816": {
      "op": "SUB"
    },
    "5817": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "DUP1",
      "path": "3"
    },
    "5818": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "DUP6",
      "path": "3"
    },
    "5819": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "AND",
      "path": "3"
    },
    "5820": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7357],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "5822": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "SWAP1",
      "path": "3"
    },
    "5823": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "DUP2",
      "path": "3"
    },
    "5824": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "MSTORE",
      "path": "3"
    },
    "5825": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5827": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "DUP2",
      "path": "3"
    },
    "5828": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "SWAP1",
      "path": "3"
    },
    "5829": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "MSTORE",
      "path": "3"
    },
    "5830": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5832": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "DUP1",
      "path": "3"
    },
    "5833": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "DUP3",
      "path": "3"
    },
    "5834": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7365],
      "op": "KECCAK256",
      "path": "3"
    },
    "5835": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7439],
      "op": "SWAP4",
      "path": "3"
    },
    "5836": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7439],
      "op": "SWAP1",
      "path": "3"
    },
    "5837": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7439],
      "op": "SWAP4",
      "path": "3"
    },
    "5838": {
      "fn": "ERC20._transfer",
      "offset": [7348, 7439],
      "op": "SSTORE",
      "path": "3"
    },
    "5839": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "SWAP1",
      "path": "3",
      "statement": 60
    },
    "5840": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "DUP5",
      "path": "3"
    },
    "5841": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "AND",
      "path": "3"
    },
    "5842": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "DUP2",
      "path": "3"
    },
    "5843": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "MSTORE",
      "path": "3"
    },
    "5844": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "KECCAK256",
      "path": "3"
    },
    "5845": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7492],
      "op": "SLOAD",
      "path": "3"
    },
    "5846": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7504],
      "op": "PUSH2",
      "path": "3",
      "value": "0x16DF"
    },
    "5849": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7504],
      "op": "SWAP1",
      "path": "3"
    },
    "5850": {
      "fn": "ERC20._transfer",
      "offset": [7497, 7503],
      "op": "DUP3",
      "path": "3"
    },
    "5851": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7496],
      "op": "PUSH2",
      "path": "3",
      "value": "0x18A2"
    },
    "5854": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [7472, 7504],
      "op": "JUMP",
      "path": "3"
    },
    "5855": {
      "fn": "ERC20._transfer",
      "offset": [7472, 7504],
      "op": "JUMPDEST",
      "path": "3"
    },
    "5856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5858": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5860": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5862": {
      "op": "SHL"
    },
    "5863": {
      "op": "SUB"
    },
    "5864": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP1",
      "path": "3"
    },
    "5865": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP5",
      "path": "3"
    },
    "5866": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "AND",
      "path": "3"
    },
    "5867": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7458],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "5869": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP2",
      "path": "3"
    },
    "5870": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP2",
      "path": "3"
    },
    "5871": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "MSTORE",
      "path": "3"
    },
    "5872": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "5874": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP2",
      "path": "3"
    },
    "5875": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP2",
      "path": "3"
    },
    "5876": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "MSTORE",
      "path": "3"
    },
    "5877": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "5879": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "SWAP2",
      "path": "3"
    },
    "5880": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "DUP3",
      "path": "3"
    },
    "5881": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "SWAP1",
      "path": "3"
    },
    "5882": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "KECCAK256",
      "path": "3"
    },
    "5883": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7504],
      "op": "SWAP5",
      "path": "3"
    },
    "5884": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7504],
      "op": "SWAP1",
      "path": "3"
    },
    "5885": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7504],
      "op": "SWAP5",
      "path": "3"
    },
    "5886": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7504],
      "op": "SSTORE",
      "path": "3"
    },
    "5887": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "DUP1",
      "path": "3",
      "statement": 61
    },
    "5888": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "MLOAD",
      "path": "3"
    },
    "5889": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "DUP6",
      "path": "3"
    },
    "5890": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "DUP2",
      "path": "3"
    },
    "5891": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "MSTORE",
      "path": "3"
    },
    "5892": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP1",
      "path": "3"
    },
    "5893": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "MLOAD",
      "path": "3"
    },
    "5894": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "SWAP2",
      "path": "3"
    },
    "5895": {
      "fn": "ERC20._transfer",
      "offset": [7449, 7469],
      "op": "SWAP4",
      "path": "3"
    },
    "5896": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP3",
      "path": "3"
    },
    "5897": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "DUP8",
      "path": "3"
    },
    "5898": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "AND",
      "path": "3"
    },
    "5899": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP3",
      "path": "3"
    },
    "5900": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "PUSH32",
      "path": "3",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "5933": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP3",
      "path": "3"
    },
    "5934": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP2",
      "path": "3"
    },
    "5935": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "DUP3",
      "path": "3"
    },
    "5936": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP1",
      "path": "3"
    },
    "5937": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SUB",
      "path": "3"
    },
    "5938": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "ADD",
      "path": "3"
    },
    "5939": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "SWAP1",
      "path": "3"
    },
    "5940": {
      "fn": "ERC20._transfer",
      "offset": [7519, 7554],
      "op": "LOG3",
      "path": "3"
    },
    "5941": {
      "fn": "ERC20._transfer",
      "offset": [7031, 7561],
      "op": "POP",
      "path": "3"
    },
    "5942": {
      "fn": "ERC20._transfer",
      "offset": [7031, 7561],
      "op": "POP",
      "path": "3"
    },
    "5943": {
      "fn": "ERC20._transfer",
      "offset": [7031, 7561],
      "op": "POP",
      "path": "3"
    },
    "5944": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [7031, 7561],
      "op": "JUMP",
      "path": "3"
    },
    "5945": {
      "fn": "SafeMath.sub",
      "offset": [5432, 5595],
      "op": "JUMPDEST",
      "path": "2"
    },
    "5946": {
      "fn": "SafeMath.sub",
      "offset": [5518, 5525],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "5948": {
      "fn": "SafeMath.sub",
      "offset": [5553, 5565],
      "op": "DUP2",
      "path": "2",
      "statement": 62
    },
    "5949": {
      "fn": "SafeMath.sub",
      "offset": [5545, 5551],
      "op": "DUP5",
      "path": "2"
    },
    "5950": {
      "fn": "SafeMath.sub",
      "offset": [5545, 5551],
      "op": "DUP5",
      "path": "2"
    },
    "5951": {
      "fn": "SafeMath.sub",
      "offset": [5545, 5551],
      "op": "GT",
      "path": "2"
    },
    "5952": {
      "branch": 144,
      "fn": "SafeMath.sub",
      "offset": [5545, 5551],
      "op": "ISZERO",
      "path": "2"
    },
    "5953": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH2",
      "path": "2",
      "value": "0x17C8"
    },
    "5956": {
      "branch": 144,
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPI",
      "path": "2"
    },
    "5957": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "5959": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MLOAD",
      "path": "2"
    },
    "5960": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5964": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5966": {
      "op": "SHL"
    },
    "5967": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "5968": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MSTORE",
      "path": "2"
    },
    "5969": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "5971": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "5972": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "5973": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "5974": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5976": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "5977": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP3",
      "path": "2"
    },
    "5978": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "5979": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SUB",
      "path": "2"
    },
    "5980": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP3",
      "path": "2"
    },
    "5981": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MSTORE",
      "path": "2"
    },
    "5982": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP4",
      "path": "2"
    },
    "5983": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "5984": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "5985": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MLOAD",
      "path": "2"
    },
    "5986": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "5987": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MSTORE",
      "path": "2"
    },
    "5988": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5990": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "5991": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP2",
      "path": "2"
    },
    "5992": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "5993": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "5994": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MLOAD",
      "path": "2"
    },
    "5995": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP1",
      "path": "2"
    },
    "5996": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5998": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "5999": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP1",
      "path": "2"
    },
    "6000": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "6001": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP4",
      "path": "2"
    },
    "6002": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP4",
      "path": "2"
    },
    "6003": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "6005": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPDEST",
      "path": "2"
    },
    "6006": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP4",
      "path": "2"
    },
    "6007": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "6008": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "LT",
      "path": "2"
    },
    "6009": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ISZERO",
      "path": "2"
    },
    "6010": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH2",
      "path": "2",
      "value": "0x178D"
    },
    "6013": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPI",
      "path": "2"
    },
    "6014": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "6015": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "6016": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "6017": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MLOAD",
      "path": "2"
    },
    "6018": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP4",
      "path": "2"
    },
    "6019": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP3",
      "path": "2"
    },
    "6020": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "6021": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MSTORE",
      "path": "2"
    },
    "6022": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "6024": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "6025": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1775"
    },
    "6028": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMP",
      "path": "2"
    },
    "6029": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPDEST",
      "path": "2"
    },
    "6030": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6031": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6032": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6033": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6034": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP1",
      "path": "2"
    },
    "6035": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6036": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP1",
      "path": "2"
    },
    "6037": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "6038": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "6039": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP1",
      "path": "2"
    },
    "6040": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "6042": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "AND",
      "path": "2"
    },
    "6043": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "6044": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ISZERO",
      "path": "2"
    },
    "6045": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH2",
      "path": "2",
      "value": "0x17BA"
    },
    "6048": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPI",
      "path": "2"
    },
    "6049": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "6050": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP3",
      "path": "2"
    },
    "6051": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SUB",
      "path": "2"
    },
    "6052": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "6053": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MLOAD",
      "path": "2"
    },
    "6054": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "6056": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP4",
      "path": "2"
    },
    "6057": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "6059": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SUB",
      "path": "2"
    },
    "6060": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "6063": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "EXP",
      "path": "2"
    },
    "6064": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SUB",
      "path": "2"
    },
    "6065": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "NOT",
      "path": "2"
    },
    "6066": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "AND",
      "path": "2"
    },
    "6067": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP2",
      "path": "2"
    },
    "6068": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MSTORE",
      "path": "2"
    },
    "6069": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "6071": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "ADD",
      "path": "2"
    },
    "6072": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP2",
      "path": "2"
    },
    "6073": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6074": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPDEST",
      "path": "2"
    },
    "6075": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6076": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP3",
      "path": "2"
    },
    "6077": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6078": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6079": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "POP",
      "path": "2"
    },
    "6080": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "6082": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "MLOAD",
      "path": "2"
    },
    "6083": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "DUP1",
      "path": "2"
    },
    "6084": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP2",
      "path": "2"
    },
    "6085": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SUB",
      "path": "2"
    },
    "6086": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "SWAP1",
      "path": "2"
    },
    "6087": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "REVERT",
      "path": "2"
    },
    "6088": {
      "fn": "SafeMath.sub",
      "offset": [5537, 5566],
      "op": "JUMPDEST",
      "path": "2"
    },
    "6089": {
      "op": "POP"
    },
    "6090": {
      "op": "POP"
    },
    "6091": {
      "op": "POP"
    },
    "6092": {
      "fn": "SafeMath.sub",
      "offset": [5583, 5588],
      "op": "SWAP1",
      "path": "2",
      "statement": 63
    },
    "6093": {
      "fn": "SafeMath.sub",
      "offset": [5583, 5588],
      "op": "SUB",
      "path": "2"
    },
    "6094": {
      "fn": "SafeMath.sub",
      "offset": [5583, 5588],
      "op": "SWAP1",
      "path": "2"
    },
    "6095": {
      "fn": "SafeMath.sub",
      "jump": "o",
      "offset": [5432, 5595],
      "op": "JUMP",
      "path": "2"
    },
    "6096": {
      "fn": "AccessControl._grantRole",
      "offset": [7025, 7209],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6097": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6099": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "DUP3",
      "path": "0"
    },
    "6100": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "DUP2",
      "path": "0"
    },
    "6101": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "MSTORE",
      "path": "0"
    },
    "6102": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7104],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "6104": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "6106": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "MSTORE",
      "path": "0"
    },
    "6107": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6109": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "SWAP1",
      "path": "0"
    },
    "6110": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7110],
      "op": "KECCAK256",
      "path": "0"
    },
    "6111": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7131],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17E8"
    },
    "6114": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7131],
      "op": "SWAP1",
      "path": "0"
    },
    "6115": {
      "fn": "AccessControl._grantRole",
      "offset": [7123, 7130],
      "op": "DUP3",
      "path": "0"
    },
    "6116": {
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7122],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D9"
    },
    "6119": {
      "fn": "AccessControl._grantRole",
      "jump": "i",
      "offset": [7098, 7131],
      "op": "JUMP",
      "path": "0"
    },
    "6120": {
      "branch": 131,
      "fn": "AccessControl._grantRole",
      "offset": [7098, 7131],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6121": {
      "fn": "AccessControl._grantRole",
      "offset": [7094, 7203],
      "op": "ISZERO",
      "path": "0"
    },
    "6122": {
      "fn": "AccessControl._grantRole",
      "offset": [7094, 7203],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9A0"
    },
    "6125": {
      "branch": 131,
      "fn": "AccessControl._grantRole",
      "offset": [7094, 7203],
      "op": "JUMPI",
      "path": "0"
    },
    "6126": {
      "fn": "AccessControl._grantRole",
      "offset": [7179, 7191],
      "op": "PUSH2",
      "path": "0",
      "statement": 64,
      "value": "0x17F5"
    },
    "6129": {
      "fn": "AccessControl._grantRole",
      "offset": [7179, 7189],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14EE"
    },
    "6132": {
      "fn": "AccessControl._grantRole",
      "jump": "i",
      "offset": [7179, 7191],
      "op": "JUMP",
      "path": "0"
    },
    "6133": {
      "fn": "AccessControl._grantRole",
      "offset": [7179, 7191],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6134": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6138": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6140": {
      "op": "SHL"
    },
    "6141": {
      "op": "SUB"
    },
    "6142": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "AND",
      "path": "0"
    },
    "6143": {
      "fn": "AccessControl._grantRole",
      "offset": [7170, 7177],
      "op": "DUP2",
      "path": "0"
    },
    "6144": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6146": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6148": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6150": {
      "op": "SHL"
    },
    "6151": {
      "op": "SUB"
    },
    "6152": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "AND",
      "path": "0"
    },
    "6153": {
      "fn": "AccessControl._grantRole",
      "offset": [7164, 7168],
      "op": "DUP4",
      "path": "0"
    },
    "6154": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "PUSH32",
      "path": "0",
      "value": "0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
    },
    "6187": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6189": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "MLOAD",
      "path": "0"
    },
    "6190": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6192": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "MLOAD",
      "path": "0"
    },
    "6193": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "DUP1",
      "path": "0"
    },
    "6194": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "SWAP2",
      "path": "0"
    },
    "6195": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "SUB",
      "path": "0"
    },
    "6196": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "SWAP1",
      "path": "0"
    },
    "6197": {
      "fn": "AccessControl._grantRole",
      "offset": [7152, 7192],
      "op": "LOG4",
      "path": "0"
    },
    "6198": {
      "fn": "AccessControl._grantRole",
      "offset": [7025, 7209],
      "op": "POP",
      "path": "0"
    },
    "6199": {
      "fn": "AccessControl._grantRole",
      "offset": [7025, 7209],
      "op": "POP",
      "path": "0"
    },
    "6200": {
      "fn": "AccessControl._grantRole",
      "jump": "o",
      "offset": [7025, 7209],
      "op": "JUMP",
      "path": "0"
    },
    "6201": {
      "fn": "AccessControl._revokeRole",
      "offset": [7215, 7403],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6202": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6204": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "DUP3",
      "path": "0"
    },
    "6205": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "DUP2",
      "path": "0"
    },
    "6206": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "MSTORE",
      "path": "0"
    },
    "6207": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7295],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "6209": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "6211": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "MSTORE",
      "path": "0"
    },
    "6212": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6214": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "SWAP1",
      "path": "0"
    },
    "6215": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7301],
      "op": "KECCAK256",
      "path": "0"
    },
    "6216": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7325],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1851"
    },
    "6219": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7325],
      "op": "SWAP1",
      "path": "0"
    },
    "6220": {
      "fn": "AccessControl._revokeRole",
      "offset": [7317, 7324],
      "op": "DUP3",
      "path": "0"
    },
    "6221": {
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7316],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D34"
    },
    "6224": {
      "fn": "AccessControl._revokeRole",
      "jump": "i",
      "offset": [7289, 7325],
      "op": "JUMP",
      "path": "0"
    },
    "6225": {
      "branch": 132,
      "fn": "AccessControl._revokeRole",
      "offset": [7289, 7325],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6226": {
      "fn": "AccessControl._revokeRole",
      "offset": [7285, 7397],
      "op": "ISZERO",
      "path": "0"
    },
    "6227": {
      "fn": "AccessControl._revokeRole",
      "offset": [7285, 7397],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9A0"
    },
    "6230": {
      "branch": 132,
      "fn": "AccessControl._revokeRole",
      "offset": [7285, 7397],
      "op": "JUMPI",
      "path": "0"
    },
    "6231": {
      "fn": "AccessControl._revokeRole",
      "offset": [7373, 7385],
      "op": "PUSH2",
      "path": "0",
      "statement": 65,
      "value": "0x185E"
    },
    "6234": {
      "fn": "AccessControl._revokeRole",
      "offset": [7373, 7383],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14EE"
    },
    "6237": {
      "fn": "AccessControl._revokeRole",
      "jump": "i",
      "offset": [7373, 7385],
      "op": "JUMP",
      "path": "0"
    },
    "6238": {
      "fn": "AccessControl._revokeRole",
      "offset": [7373, 7385],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6243": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6245": {
      "op": "SHL"
    },
    "6246": {
      "op": "SUB"
    },
    "6247": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "AND",
      "path": "0"
    },
    "6248": {
      "fn": "AccessControl._revokeRole",
      "offset": [7364, 7371],
      "op": "DUP2",
      "path": "0"
    },
    "6249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6255": {
      "op": "SHL"
    },
    "6256": {
      "op": "SUB"
    },
    "6257": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "AND",
      "path": "0"
    },
    "6258": {
      "fn": "AccessControl._revokeRole",
      "offset": [7358, 7362],
      "op": "DUP4",
      "path": "0"
    },
    "6259": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "PUSH32",
      "path": "0",
      "value": "0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
    },
    "6292": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6294": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "MLOAD",
      "path": "0"
    },
    "6295": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6297": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "MLOAD",
      "path": "0"
    },
    "6298": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "DUP1",
      "path": "0"
    },
    "6299": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "SWAP2",
      "path": "0"
    },
    "6300": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "SUB",
      "path": "0"
    },
    "6301": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "SWAP1",
      "path": "0"
    },
    "6302": {
      "fn": "AccessControl._revokeRole",
      "offset": [7346, 7386],
      "op": "LOG4",
      "path": "0"
    },
    "6303": {
      "fn": "AccessControl._revokeRole",
      "offset": [7215, 7403],
      "op": "POP",
      "path": "0"
    },
    "6304": {
      "fn": "AccessControl._revokeRole",
      "offset": [7215, 7403],
      "op": "POP",
      "path": "0"
    },
    "6305": {
      "fn": "AccessControl._revokeRole",
      "jump": "o",
      "offset": [7215, 7403],
      "op": "JUMP",
      "path": "0"
    },
    "6306": {
      "fn": "SafeMath.add",
      "offset": [2690, 2865],
      "op": "JUMPDEST",
      "path": "2"
    },
    "6307": {
      "fn": "SafeMath.add",
      "offset": [2748, 2755],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "6309": {
      "fn": "SafeMath.add",
      "offset": [2779, 2784],
      "op": "DUP3",
      "path": "2"
    },
    "6310": {
      "fn": "SafeMath.add",
      "offset": [2779, 2784],
      "op": "DUP3",
      "path": "2"
    },
    "6311": {
      "fn": "SafeMath.add",
      "offset": [2779, 2784],
      "op": "ADD",
      "path": "2"
    },
    "6312": {
      "fn": "SafeMath.add",
      "offset": [2802, 2808],
      "op": "DUP4",
      "path": "2",
      "statement": 66
    },
    "6313": {
      "fn": "SafeMath.add",
      "offset": [2802, 2808],
      "op": "DUP2",
      "path": "2"
    },
    "6314": {
      "fn": "SafeMath.add",
      "offset": [2802, 2808],
      "op": "LT",
      "path": "2"
    },
    "6315": {
      "branch": 145,
      "fn": "SafeMath.add",
      "offset": [2802, 2808],
      "op": "ISZERO",
      "path": "2"
    },
    "6316": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED2"
    },
    "6319": {
      "branch": 145,
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "JUMPI",
      "path": "2"
    },
    "6320": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "6322": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "DUP1",
      "path": "2"
    },
    "6323": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "MLOAD",
      "path": "2"
    },
    "6324": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6328": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6330": {
      "op": "SHL"
    },
    "6331": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "DUP2",
      "path": "2"
    },
    "6332": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "MSTORE",
      "path": "2"
    },
    "6333": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "6335": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "6337": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "DUP3",
      "path": "2"
    },
    "6338": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "ADD",
      "path": "2"
    },
    "6339": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "MSTORE",
      "path": "2"
    },
    "6340": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1B"
    },
    "6342": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "6344": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "DUP3",
      "path": "2"
    },
    "6345": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "ADD",
      "path": "2"
    },
    "6346": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "MSTORE",
      "path": "2"
    },
    "6347": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH32",
      "path": "2",
      "value": "0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
    },
    "6380": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "6382": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "DUP3",
      "path": "2"
    },
    "6383": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "ADD",
      "path": "2"
    },
    "6384": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "MSTORE",
      "path": "2"
    },
    "6385": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "SWAP1",
      "path": "2"
    },
    "6386": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "MLOAD",
      "path": "2"
    },
    "6387": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "SWAP1",
      "path": "2"
    },
    "6388": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "DUP2",
      "path": "2"
    },
    "6389": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "SWAP1",
      "path": "2"
    },
    "6390": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "SUB",
      "path": "2"
    },
    "6391": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "6393": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "ADD",
      "path": "2"
    },
    "6394": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "SWAP1",
      "path": "2"
    },
    "6395": {
      "fn": "SafeMath.add",
      "offset": [2794, 2840],
      "op": "REVERT",
      "path": "2"
    },
    "6396": {
      "fn": "ERC20._mint",
      "offset": [7832, 8202],
      "op": "JUMPDEST",
      "path": "3"
    },
    "6397": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6401": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6403": {
      "op": "SHL"
    },
    "6404": {
      "op": "SUB"
    },
    "6405": {
      "fn": "ERC20._mint",
      "offset": [7915, 7936],
      "op": "DUP3",
      "path": "3",
      "statement": 67
    },
    "6406": {
      "branch": 137,
      "fn": "ERC20._mint",
      "offset": [7915, 7936],
      "op": "AND",
      "path": "3"
    },
    "6407": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1957"
    },
    "6410": {
      "branch": 137,
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "JUMPI",
      "path": "3"
    },
    "6411": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "6413": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "DUP1",
      "path": "3"
    },
    "6414": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "MLOAD",
      "path": "3"
    },
    "6415": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6419": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6421": {
      "op": "SHL"
    },
    "6422": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "DUP2",
      "path": "3"
    },
    "6423": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "MSTORE",
      "path": "3"
    },
    "6424": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "6426": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "6428": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "DUP3",
      "path": "3"
    },
    "6429": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "ADD",
      "path": "3"
    },
    "6430": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "MSTORE",
      "path": "3"
    },
    "6431": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "6433": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x24"
    },
    "6435": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "DUP3",
      "path": "3"
    },
    "6436": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "ADD",
      "path": "3"
    },
    "6437": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "MSTORE",
      "path": "3"
    },
    "6438": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH32",
      "path": "3",
      "value": "0x45524332303A206D696E7420746F20746865207A65726F206164647265737300"
    },
    "6471": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x44"
    },
    "6473": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "DUP3",
      "path": "3"
    },
    "6474": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "ADD",
      "path": "3"
    },
    "6475": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "MSTORE",
      "path": "3"
    },
    "6476": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "SWAP1",
      "path": "3"
    },
    "6477": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "MLOAD",
      "path": "3"
    },
    "6478": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "SWAP1",
      "path": "3"
    },
    "6479": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "DUP2",
      "path": "3"
    },
    "6480": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "SWAP1",
      "path": "3"
    },
    "6481": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "SUB",
      "path": "3"
    },
    "6482": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "PUSH1",
      "path": "3",
      "value": "0x64"
    },
    "6484": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "ADD",
      "path": "3"
    },
    "6485": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "SWAP1",
      "path": "3"
    },
    "6486": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "REVERT",
      "path": "3"
    },
    "6487": {
      "fn": "ERC20._mint",
      "offset": [7907, 7972],
      "op": "JUMPDEST",
      "path": "3"
    },
    "6488": {
      "fn": "ERC20._mint",
      "offset": [7983, 8032],
      "op": "PUSH2",
      "path": "3",
      "statement": 68,
      "value": "0x1963"
    },
    "6491": {
      "fn": "ERC20._mint",
      "offset": [8012, 8013],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "6493": {
      "fn": "ERC20._mint",
      "offset": [8016, 8023],
      "op": "DUP4",
      "path": "3"
    },
    "6494": {
      "fn": "ERC20._mint",
      "offset": [8025, 8031],
      "op": "DUP4",
      "path": "3"
    },
    "6495": {
      "fn": "ERC20._mint",
      "offset": [7983, 8003],
      "op": "PUSH2",
      "path": "3",
      "value": "0xE8F"
    },
    "6498": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [7983, 8032],
      "op": "JUMP",
      "path": "3"
    },
    "6499": {
      "fn": "ERC20._mint",
      "offset": [7983, 8032],
      "op": "JUMPDEST",
      "path": "3"
    },
    "6500": {
      "fn": "ERC20._mint",
      "offset": [8058, 8070],
      "op": "PUSH1",
      "path": "3",
      "statement": 69,
      "value": "0x2"
    },
    "6502": {
      "fn": "ERC20._mint",
      "offset": [8058, 8070],
      "op": "SLOAD",
      "path": "3"
    },
    "6503": {
      "fn": "ERC20._mint",
      "offset": [8058, 8082],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1970"
    },
    "6506": {
      "fn": "ERC20._mint",
      "offset": [8058, 8082],
      "op": "SWAP1",
      "path": "3"
    },
    "6507": {
      "fn": "ERC20._mint",
      "offset": [8075, 8081],
      "op": "DUP3",
      "path": "3"
    },
    "6508": {
      "fn": "ERC20._mint",
      "offset": [8058, 8074],
      "op": "PUSH2",
      "path": "3",
      "value": "0x18A2"
    },
    "6511": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [8058, 8082],
      "op": "JUMP",
      "path": "3"
    },
    "6512": {
      "fn": "ERC20._mint",
      "offset": [8058, 8082],
      "op": "JUMPDEST",
      "path": "3"
    },
    "6513": {
      "fn": "ERC20._mint",
      "offset": [8043, 8055],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "6515": {
      "fn": "ERC20._mint",
      "offset": [8043, 8082],
      "op": "SSTORE",
      "path": "3"
    },
    "6516": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6518": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6520": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6522": {
      "op": "SHL"
    },
    "6523": {
      "op": "SUB"
    },
    "6524": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "DUP3",
      "path": "3",
      "statement": 70
    },
    "6525": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "AND",
      "path": "3"
    },
    "6526": {
      "fn": "ERC20._mint",
      "offset": [8113, 8122],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "6528": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "SWAP1",
      "path": "3"
    },
    "6529": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "DUP2",
      "path": "3"
    },
    "6530": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "MSTORE",
      "path": "3"
    },
    "6531": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "6533": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "DUP2",
      "path": "3"
    },
    "6534": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "SWAP1",
      "path": "3"
    },
    "6535": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "MSTORE",
      "path": "3"
    },
    "6536": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "6538": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "SWAP1",
      "path": "3"
    },
    "6539": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "KECCAK256",
      "path": "3"
    },
    "6540": {
      "fn": "ERC20._mint",
      "offset": [8113, 8131],
      "op": "SLOAD",
      "path": "3"
    },
    "6541": {
      "fn": "ERC20._mint",
      "offset": [8113, 8143],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1996"
    },
    "6544": {
      "fn": "ERC20._mint",
      "offset": [8113, 8143],
      "op": "SWAP1",
      "path": "3"
    },
    "6545": {
      "fn": "ERC20._mint",
      "offset": [8136, 8142],
      "op": "DUP3",
      "path": "3"
    },
    "6546": {
      "fn": "ERC20._mint",
      "offset": [8113, 8135],
      "op": "PUSH2",
      "path": "3",
      "value": "0x18A2"
    },
    "6549": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [8113, 8143],
      "op": "JUMP",
      "path": "3"
    },
    "6550": {
      "fn": "ERC20._mint",
      "offset": [8113, 8143],
      "op": "JUMPDEST",
      "path": "3"
    },
    "6551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6553": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6555": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6557": {
      "op": "SHL"
    },
    "6558": {
      "op": "SUB"
    },
    "6559": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP4",
      "path": "3"
    },
    "6560": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "AND",
      "path": "3"
    },
    "6561": {
      "fn": "ERC20._mint",
      "offset": [8092, 8101],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "6563": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP2",
      "path": "3"
    },
    "6564": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP2",
      "path": "3"
    },
    "6565": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "MSTORE",
      "path": "3"
    },
    "6566": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "6568": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP2",
      "path": "3"
    },
    "6569": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP2",
      "path": "3"
    },
    "6570": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "MSTORE",
      "path": "3"
    },
    "6571": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "6573": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP1",
      "path": "3"
    },
    "6574": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "DUP4",
      "path": "3"
    },
    "6575": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "KECCAK256",
      "path": "3"
    },
    "6576": {
      "fn": "ERC20._mint",
      "offset": [8092, 8143],
      "op": "SWAP5",
      "path": "3"
    },
    "6577": {
      "fn": "ERC20._mint",
      "offset": [8092, 8143],
      "op": "SWAP1",
      "path": "3"
    },
    "6578": {
      "fn": "ERC20._mint",
      "offset": [8092, 8143],
      "op": "SWAP5",
      "path": "3"
    },
    "6579": {
      "fn": "ERC20._mint",
      "offset": [8092, 8143],
      "op": "SSTORE",
      "path": "3"
    },
    "6580": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "DUP4",
      "path": "3",
      "statement": 71
    },
    "6581": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "MLOAD",
      "path": "3"
    },
    "6582": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "DUP6",
      "path": "3"
    },
    "6583": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "DUP2",
      "path": "3"
    },
    "6584": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "MSTORE",
      "path": "3"
    },
    "6585": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SWAP4",
      "path": "3"
    },
    "6586": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "MLOAD",
      "path": "3"
    },
    "6587": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "SWAP3",
      "path": "3"
    },
    "6588": {
      "fn": "ERC20._mint",
      "offset": [8092, 8110],
      "op": "SWAP4",
      "path": "3"
    },
    "6589": {
      "fn": "ERC20._mint",
      "offset": [8092, 8101],
      "op": "SWAP2",
      "path": "3"
    },
    "6590": {
      "fn": "ERC20._mint",
      "offset": [8092, 8101],
      "op": "SWAP3",
      "path": "3"
    },
    "6591": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "PUSH32",
      "path": "3",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "6624": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SWAP3",
      "path": "3"
    },
    "6625": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "DUP2",
      "path": "3"
    },
    "6626": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SWAP1",
      "path": "3"
    },
    "6627": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SUB",
      "path": "3"
    },
    "6628": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SWAP1",
      "path": "3"
    },
    "6629": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SWAP2",
      "path": "3"
    },
    "6630": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "ADD",
      "path": "3"
    },
    "6631": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "SWAP1",
      "path": "3"
    },
    "6632": {
      "fn": "ERC20._mint",
      "offset": [8158, 8195],
      "op": "LOG3",
      "path": "3"
    },
    "6633": {
      "fn": "ERC20._mint",
      "offset": [7832, 8202],
      "op": "POP",
      "path": "3"
    },
    "6634": {
      "fn": "ERC20._mint",
      "offset": [7832, 8202],
      "op": "POP",
      "path": "3"
    },
    "6635": {
      "fn": "ERC20._mint",
      "jump": "o",
      "offset": [7832, 8202],
      "op": "JUMP",
      "path": "3"
    },
    "6636": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7486, 8415],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6637": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7591, 7597],
      "op": "DUP2",
      "path": "15"
    },
    "6638": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6640": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6642": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6644": {
      "op": "SHL"
    },
    "6645": {
      "op": "SUB"
    },
    "6646": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7597],
      "op": "AND",
      "path": "15"
    },
    "6647": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7587],
      "op": "DUP4",
      "path": "15"
    },
    "6648": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6650": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6652": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6654": {
      "op": "SHL"
    },
    "6655": {
      "op": "SUB"
    },
    "6656": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7597],
      "op": "AND",
      "path": "15"
    },
    "6657": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7597],
      "op": "EQ",
      "path": "15"
    },
    "6658": {
      "branch": 119,
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7597],
      "op": "ISZERO",
      "path": "15"
    },
    "6659": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7611],
      "op": "DUP1",
      "path": "15"
    },
    "6660": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7611],
      "op": "ISZERO",
      "path": "15"
    },
    "6661": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7611],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1A0E"
    },
    "6664": {
      "branch": 119,
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7611],
      "op": "JUMPI",
      "path": "15"
    },
    "6665": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7611],
      "op": "POP",
      "path": "15"
    },
    "6666": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7610, 7611],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6668": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7601, 7607],
      "op": "DUP2",
      "path": "15"
    },
    "6669": {
      "branch": 120,
      "fn": "NerveToken._moveDelegates",
      "offset": [7601, 7611],
      "op": "GT",
      "path": "15"
    },
    "6670": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7581, 7611],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6671": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7577, 8409],
      "op": "ISZERO",
      "path": "15"
    },
    "6672": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7577, 8409],
      "op": "PUSH2",
      "path": "15",
      "value": "0xE8F"
    },
    "6675": {
      "branch": 120,
      "fn": "NerveToken._moveDelegates",
      "offset": [7577, 8409],
      "op": "JUMPI",
      "path": "15"
    },
    "6676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6678": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6680": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6682": {
      "op": "SHL"
    },
    "6683": {
      "op": "SUB"
    },
    "6684": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7631, 7651],
      "op": "DUP4",
      "path": "15"
    },
    "6685": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7631, 7651],
      "op": "AND",
      "path": "15"
    },
    "6686": {
      "branch": 121,
      "fn": "NerveToken._moveDelegates",
      "offset": [7631, 7651],
      "op": "ISZERO",
      "path": "15"
    },
    "6687": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7627, 8006],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1AA0"
    },
    "6690": {
      "branch": 121,
      "fn": "NerveToken._moveDelegates",
      "offset": [7627, 8006],
      "op": "JUMPI",
      "path": "15"
    },
    "6691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6695": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6697": {
      "op": "SHL"
    },
    "6698": {
      "op": "SUB"
    },
    "6699": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "DUP4",
      "path": "15"
    },
    "6700": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "AND",
      "path": "15"
    },
    "6701": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7718, 7734],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6703": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "SWAP1",
      "path": "15"
    },
    "6704": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "DUP2",
      "path": "15"
    },
    "6705": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "MSTORE",
      "path": "15"
    },
    "6706": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7751],
      "op": "PUSH1",
      "path": "15",
      "value": "0x9"
    },
    "6708": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "6710": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "MSTORE",
      "path": "15"
    },
    "6711": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "6713": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "DUP2",
      "path": "15"
    },
    "6714": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "KECCAK256",
      "path": "15"
    },
    "6715": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "SLOAD",
      "path": "15"
    },
    "6716": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "6721": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "AND",
      "path": "15"
    },
    "6722": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7737, 7759],
      "op": "SWAP1",
      "path": "15"
    },
    "6723": {
      "branch": 122,
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7810],
      "op": "DUP2",
      "path": "15"
    },
    "6724": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7857],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1A4E"
    },
    "6727": {
      "branch": 122,
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7857],
      "op": "JUMPI",
      "path": "15"
    },
    "6728": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7856, 7857],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6730": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7857],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1A80"
    },
    "6733": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7857],
      "op": "JUMP",
      "path": "15"
    },
    "6734": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7857],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6739": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6741": {
      "op": "SHL"
    },
    "6742": {
      "op": "SUB"
    },
    "6743": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "DUP6",
      "path": "15"
    },
    "6744": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "AND",
      "path": "15"
    },
    "6745": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6747": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "SWAP1",
      "path": "15"
    },
    "6748": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "DUP2",
      "path": "15"
    },
    "6749": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "MSTORE",
      "path": "15"
    },
    "6750": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7824],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "6752": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "6754": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "SWAP1",
      "path": "15"
    },
    "6755": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "DUP2",
      "path": "15"
    },
    "6756": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "MSTORE",
      "path": "15"
    },
    "6757": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "6759": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "DUP1",
      "path": "15"
    },
    "6760": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "DUP4",
      "path": "15"
    },
    "6761": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7832],
      "op": "KECCAK256",
      "path": "15"
    },
    "6762": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "6767": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6769": {
      "op": "NOT"
    },
    "6770": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7833, 7846],
      "op": "DUP8",
      "path": "15"
    },
    "6771": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7833, 7846],
      "op": "ADD",
      "path": "15"
    },
    "6772": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "AND",
      "path": "15"
    },
    "6773": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "DUP5",
      "path": "15"
    },
    "6774": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "MSTORE",
      "path": "15"
    },
    "6775": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "SWAP1",
      "path": "15"
    },
    "6776": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "SWAP2",
      "path": "15"
    },
    "6777": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "MSTORE",
      "path": "15"
    },
    "6778": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "SWAP1",
      "path": "15"
    },
    "6779": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7847],
      "op": "KECCAK256",
      "path": "15"
    },
    "6780": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7845, 7846],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "6782": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7853],
      "op": "ADD",
      "path": "15"
    },
    "6783": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7813, 7853],
      "op": "SLOAD",
      "path": "15"
    },
    "6784": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7797, 7857],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6785": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7777, 7857],
      "op": "SWAP1",
      "path": "15"
    },
    "6786": {
      "op": "POP"
    },
    "6787": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7875, 7892],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6789": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7895, 7916],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1A8E"
    },
    "6792": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7777, 7857],
      "op": "DUP3",
      "path": "15"
    },
    "6793": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7909, 7915],
      "op": "DUP6",
      "path": "15"
    },
    "6794": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7895, 7908],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1D49"
    },
    "6797": {
      "fn": "NerveToken._moveDelegates",
      "jump": "i",
      "offset": [7895, 7916],
      "op": "JUMP",
      "path": "15"
    },
    "6798": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7895, 7916],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6799": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7875, 7916],
      "op": "SWAP1",
      "path": "15"
    },
    "6800": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7875, 7916],
      "op": "POP",
      "path": "15"
    },
    "6801": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7934, 7991],
      "op": "PUSH2",
      "path": "15",
      "statement": 72,
      "value": "0x1A9C"
    },
    "6804": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7951, 7957],
      "op": "DUP7",
      "path": "15"
    },
    "6805": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7959, 7968],
      "op": "DUP5",
      "path": "15"
    },
    "6806": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7970, 7979],
      "op": "DUP5",
      "path": "15"
    },
    "6807": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7981, 7990],
      "op": "DUP5",
      "path": "15"
    },
    "6808": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7934, 7950],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1DA6"
    },
    "6811": {
      "fn": "NerveToken._moveDelegates",
      "jump": "i",
      "offset": [7934, 7991],
      "op": "JUMP",
      "path": "15"
    },
    "6812": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7934, 7991],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6813": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7627, 8006],
      "op": "POP",
      "path": "15"
    },
    "6814": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7627, 8006],
      "op": "POP",
      "path": "15"
    },
    "6815": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7627, 8006],
      "op": "POP",
      "path": "15"
    },
    "6816": {
      "fn": "NerveToken._moveDelegates",
      "offset": [7627, 8006],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6817": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6819": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6821": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6823": {
      "op": "SHL"
    },
    "6824": {
      "op": "SUB"
    },
    "6825": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8024, 8044],
      "op": "DUP3",
      "path": "15"
    },
    "6826": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8024, 8044],
      "op": "AND",
      "path": "15"
    },
    "6827": {
      "branch": 123,
      "fn": "NerveToken._moveDelegates",
      "offset": [8024, 8044],
      "op": "ISZERO",
      "path": "15"
    },
    "6828": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8020, 8399],
      "op": "PUSH2",
      "path": "15",
      "value": "0xE8F"
    },
    "6831": {
      "branch": 123,
      "fn": "NerveToken._moveDelegates",
      "offset": [8020, 8399],
      "op": "JUMPI",
      "path": "15"
    },
    "6832": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6834": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6836": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6838": {
      "op": "SHL"
    },
    "6839": {
      "op": "SUB"
    },
    "6840": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "DUP3",
      "path": "15"
    },
    "6841": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "AND",
      "path": "15"
    },
    "6842": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8111, 8127],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6844": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "SWAP1",
      "path": "15"
    },
    "6845": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "DUP2",
      "path": "15"
    },
    "6846": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "MSTORE",
      "path": "15"
    },
    "6847": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8144],
      "op": "PUSH1",
      "path": "15",
      "value": "0x9"
    },
    "6849": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "6851": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "MSTORE",
      "path": "15"
    },
    "6852": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "6854": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "DUP2",
      "path": "15"
    },
    "6855": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "KECCAK256",
      "path": "15"
    },
    "6856": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "SLOAD",
      "path": "15"
    },
    "6857": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "6862": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "AND",
      "path": "15"
    },
    "6863": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8130, 8152],
      "op": "SWAP1",
      "path": "15"
    },
    "6864": {
      "branch": 124,
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8203],
      "op": "DUP2",
      "path": "15"
    },
    "6865": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8250],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1ADB"
    },
    "6868": {
      "branch": 124,
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8250],
      "op": "JUMPI",
      "path": "15"
    },
    "6869": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8249, 8250],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6871": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8250],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1B0D"
    },
    "6874": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8250],
      "op": "JUMP",
      "path": "15"
    },
    "6875": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8250],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6876": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6878": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6880": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6882": {
      "op": "SHL"
    },
    "6883": {
      "op": "SUB"
    },
    "6884": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "DUP5",
      "path": "15"
    },
    "6885": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "AND",
      "path": "15"
    },
    "6886": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6888": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "SWAP1",
      "path": "15"
    },
    "6889": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "DUP2",
      "path": "15"
    },
    "6890": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "MSTORE",
      "path": "15"
    },
    "6891": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8217],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "6893": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "6895": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "SWAP1",
      "path": "15"
    },
    "6896": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "DUP2",
      "path": "15"
    },
    "6897": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "MSTORE",
      "path": "15"
    },
    "6898": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "6900": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "DUP1",
      "path": "15"
    },
    "6901": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "DUP4",
      "path": "15"
    },
    "6902": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8225],
      "op": "KECCAK256",
      "path": "15"
    },
    "6903": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "6908": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6910": {
      "op": "NOT"
    },
    "6911": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8226, 8239],
      "op": "DUP8",
      "path": "15"
    },
    "6912": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8226, 8239],
      "op": "ADD",
      "path": "15"
    },
    "6913": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "AND",
      "path": "15"
    },
    "6914": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "DUP5",
      "path": "15"
    },
    "6915": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "MSTORE",
      "path": "15"
    },
    "6916": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "SWAP1",
      "path": "15"
    },
    "6917": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "SWAP2",
      "path": "15"
    },
    "6918": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "MSTORE",
      "path": "15"
    },
    "6919": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "SWAP1",
      "path": "15"
    },
    "6920": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8240],
      "op": "KECCAK256",
      "path": "15"
    },
    "6921": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8238, 8239],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "6923": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8246],
      "op": "ADD",
      "path": "15"
    },
    "6924": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8206, 8246],
      "op": "SLOAD",
      "path": "15"
    },
    "6925": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8190, 8250],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6926": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8170, 8250],
      "op": "SWAP1",
      "path": "15"
    },
    "6927": {
      "op": "POP"
    },
    "6928": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8268, 8285],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "6930": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8288, 8309],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1B1B"
    },
    "6933": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8170, 8250],
      "op": "DUP3",
      "path": "15"
    },
    "6934": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8302, 8308],
      "op": "DUP6",
      "path": "15"
    },
    "6935": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8288, 8301],
      "op": "PUSH2",
      "path": "15",
      "value": "0x18A2"
    },
    "6938": {
      "fn": "NerveToken._moveDelegates",
      "jump": "i",
      "offset": [8288, 8309],
      "op": "JUMP",
      "path": "15"
    },
    "6939": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8288, 8309],
      "op": "JUMPDEST",
      "path": "15"
    },
    "6940": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8268, 8309],
      "op": "SWAP1",
      "path": "15"
    },
    "6941": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8268, 8309],
      "op": "POP",
      "path": "15"
    },
    "6942": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8327, 8384],
      "op": "PUSH2",
      "path": "15",
      "statement": 73,
      "value": "0x12A1"
    },
    "6945": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8344, 8350],
      "op": "DUP6",
      "path": "15"
    },
    "6946": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8352, 8361],
      "op": "DUP5",
      "path": "15"
    },
    "6947": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8363, 8372],
      "op": "DUP5",
      "path": "15"
    },
    "6948": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8374, 8383],
      "op": "DUP5",
      "path": "15"
    },
    "6949": {
      "fn": "NerveToken._moveDelegates",
      "offset": [8327, 8343],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1DA6"
    },
    "6952": {
      "fn": "NerveToken._moveDelegates",
      "jump": "i",
      "offset": [8327, 8384],
      "op": "JUMP",
      "path": "15"
    },
    "6953": {
      "fn": "ERC20._burn",
      "offset": [8522, 8932],
      "op": "JUMPDEST",
      "path": "3"
    },
    "6954": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6956": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6958": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6960": {
      "op": "SHL"
    },
    "6961": {
      "op": "SUB"
    },
    "6962": {
      "fn": "ERC20._burn",
      "offset": [8605, 8626],
      "op": "DUP3",
      "path": "3",
      "statement": 74
    },
    "6963": {
      "branch": 138,
      "fn": "ERC20._burn",
      "offset": [8605, 8626],
      "op": "AND",
      "path": "3"
    },
    "6964": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1B6E"
    },
    "6967": {
      "branch": 138,
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "JUMPI",
      "path": "3"
    },
    "6968": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "6970": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "MLOAD",
      "path": "3"
    },
    "6971": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6975": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6977": {
      "op": "SHL"
    },
    "6978": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP2",
      "path": "3"
    },
    "6979": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "MSTORE",
      "path": "3"
    },
    "6980": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "6982": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "ADD",
      "path": "3"
    },
    "6983": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP1",
      "path": "3"
    },
    "6984": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP1",
      "path": "3"
    },
    "6985": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "6987": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "ADD",
      "path": "3"
    },
    "6988": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP3",
      "path": "3"
    },
    "6989": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP2",
      "path": "3"
    },
    "6990": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "SUB",
      "path": "3"
    },
    "6991": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP3",
      "path": "3"
    },
    "6992": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "MSTORE",
      "path": "3"
    },
    "6993": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x21"
    },
    "6995": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP2",
      "path": "3"
    },
    "6996": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "MSTORE",
      "path": "3"
    },
    "6997": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "6999": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "ADD",
      "path": "3"
    },
    "7000": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP1",
      "path": "3"
    },
    "7001": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH2",
      "path": "3",
      "value": "0x230B"
    },
    "7004": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x21"
    },
    "7006": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "SWAP2",
      "path": "3"
    },
    "7007": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "CODECOPY",
      "path": "3"
    },
    "7008": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "7010": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "ADD",
      "path": "3"
    },
    "7011": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "SWAP2",
      "path": "3"
    },
    "7012": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "POP",
      "path": "3"
    },
    "7013": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "POP",
      "path": "3"
    },
    "7014": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "7016": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "MLOAD",
      "path": "3"
    },
    "7017": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "DUP1",
      "path": "3"
    },
    "7018": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "SWAP2",
      "path": "3"
    },
    "7019": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "SUB",
      "path": "3"
    },
    "7020": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "SWAP1",
      "path": "3"
    },
    "7021": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "REVERT",
      "path": "3"
    },
    "7022": {
      "fn": "ERC20._burn",
      "offset": [8597, 8664],
      "op": "JUMPDEST",
      "path": "3"
    },
    "7023": {
      "fn": "ERC20._burn",
      "offset": [8675, 8724],
      "op": "PUSH2",
      "path": "3",
      "statement": 75,
      "value": "0x1B7A"
    },
    "7026": {
      "fn": "ERC20._burn",
      "offset": [8696, 8703],
      "op": "DUP3",
      "path": "3"
    },
    "7027": {
      "fn": "ERC20._burn",
      "offset": [8713, 8714],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "7029": {
      "fn": "ERC20._burn",
      "offset": [8717, 8723],
      "op": "DUP4",
      "path": "3"
    },
    "7030": {
      "fn": "ERC20._burn",
      "offset": [8675, 8695],
      "op": "PUSH2",
      "path": "3",
      "value": "0xE8F"
    },
    "7033": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [8675, 8724],
      "op": "JUMP",
      "path": "3"
    },
    "7034": {
      "fn": "ERC20._burn",
      "offset": [8675, 8724],
      "op": "JUMPDEST",
      "path": "3"
    },
    "7035": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH2",
      "path": "3",
      "statement": 76,
      "value": "0x1BB7"
    },
    "7038": {
      "fn": "ERC20._burn",
      "offset": [8779, 8785],
      "op": "DUP2",
      "path": "3"
    },
    "7039": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "7041": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "MLOAD",
      "path": "3"
    },
    "7042": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "DUP1",
      "path": "3"
    },
    "7043": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "7045": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "ADD",
      "path": "3"
    },
    "7046": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "7048": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "MSTORE",
      "path": "3"
    },
    "7049": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "DUP1",
      "path": "3"
    },
    "7050": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH1",
      "path": "3",
      "value": "0x22"
    },
    "7052": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "DUP2",
      "path": "3"
    },
    "7053": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "MSTORE",
      "path": "3"
    },
    "7054": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "7056": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "ADD",
      "path": "3"
    },
    "7057": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2161"
    },
    "7060": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "PUSH1",
      "path": "3",
      "value": "0x22"
    },
    "7062": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "SWAP2",
      "path": "3"
    },
    "7063": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "CODECOPY",
      "path": "3"
    },
    "7064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7068": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7070": {
      "op": "SHL"
    },
    "7071": {
      "op": "SUB"
    },
    "7072": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "DUP6",
      "path": "3"
    },
    "7073": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "AND",
      "path": "3"
    },
    "7074": {
      "fn": "ERC20._burn",
      "offset": [8756, 8765],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "7076": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "SWAP1",
      "path": "3"
    },
    "7077": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "DUP2",
      "path": "3"
    },
    "7078": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "MSTORE",
      "path": "3"
    },
    "7079": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "7081": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "DUP2",
      "path": "3"
    },
    "7082": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "SWAP1",
      "path": "3"
    },
    "7083": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "MSTORE",
      "path": "3"
    },
    "7084": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "7086": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "SWAP1",
      "path": "3"
    },
    "7087": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "KECCAK256",
      "path": "3"
    },
    "7088": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "SLOAD",
      "path": "3"
    },
    "7089": {
      "fn": "ERC20._burn",
      "offset": [8756, 8774],
      "op": "SWAP2",
      "path": "3"
    },
    "7090": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "SWAP1",
      "path": "3"
    },
    "7091": {
      "fn": "ERC20._burn",
      "offset": [8756, 8778],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1739"
    },
    "7094": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [8756, 8824],
      "op": "JUMP",
      "path": "3"
    },
    "7095": {
      "fn": "ERC20._burn",
      "offset": [8756, 8824],
      "op": "JUMPDEST",
      "path": "3"
    },
    "7096": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7098": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7100": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7102": {
      "op": "SHL"
    },
    "7103": {
      "op": "SUB"
    },
    "7104": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "DUP4",
      "path": "3"
    },
    "7105": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "AND",
      "path": "3"
    },
    "7106": {
      "fn": "ERC20._burn",
      "offset": [8735, 8744],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "7108": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "SWAP1",
      "path": "3"
    },
    "7109": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "DUP2",
      "path": "3"
    },
    "7110": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "MSTORE",
      "path": "3"
    },
    "7111": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "7113": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "DUP2",
      "path": "3"
    },
    "7114": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "SWAP1",
      "path": "3"
    },
    "7115": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "MSTORE",
      "path": "3"
    },
    "7116": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "7118": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "SWAP1",
      "path": "3"
    },
    "7119": {
      "fn": "ERC20._burn",
      "offset": [8735, 8753],
      "op": "KECCAK256",
      "path": "3"
    },
    "7120": {
      "fn": "ERC20._burn",
      "offset": [8735, 8824],
      "op": "SSTORE",
      "path": "3"
    },
    "7121": {
      "fn": "ERC20._burn",
      "offset": [8849, 8861],
      "op": "PUSH1",
      "path": "3",
      "statement": 77,
      "value": "0x2"
    },
    "7123": {
      "fn": "ERC20._burn",
      "offset": [8849, 8861],
      "op": "SLOAD",
      "path": "3"
    },
    "7124": {
      "fn": "ERC20._burn",
      "offset": [8849, 8873],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1BDD"
    },
    "7127": {
      "fn": "ERC20._burn",
      "offset": [8849, 8873],
      "op": "SWAP1",
      "path": "3"
    },
    "7128": {
      "fn": "ERC20._burn",
      "offset": [8866, 8872],
      "op": "DUP3",
      "path": "3"
    },
    "7129": {
      "fn": "ERC20._burn",
      "offset": [8849, 8865],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1D49"
    },
    "7132": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [8849, 8873],
      "op": "JUMP",
      "path": "3"
    },
    "7133": {
      "fn": "ERC20._burn",
      "offset": [8849, 8873],
      "op": "JUMPDEST",
      "path": "3"
    },
    "7134": {
      "fn": "ERC20._burn",
      "offset": [8834, 8846],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "7136": {
      "fn": "ERC20._burn",
      "offset": [8834, 8873],
      "op": "SSTORE",
      "path": "3"
    },
    "7137": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "PUSH1",
      "path": "3",
      "statement": 78,
      "value": "0x40"
    },
    "7139": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "DUP1",
      "path": "3"
    },
    "7140": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "MLOAD",
      "path": "3"
    },
    "7141": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "DUP3",
      "path": "3"
    },
    "7142": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "DUP2",
      "path": "3"
    },
    "7143": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "MSTORE",
      "path": "3"
    },
    "7144": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "SWAP1",
      "path": "3"
    },
    "7145": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "MLOAD",
      "path": "3"
    },
    "7146": {
      "fn": "ERC20._burn",
      "offset": [8914, 8915],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "7148": {
      "fn": "ERC20._burn",
      "offset": [8914, 8915],
      "op": "SWAP2",
      "path": "3"
    },
    "7149": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7151": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7153": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7155": {
      "op": "SHL"
    },
    "7156": {
      "op": "SUB"
    },
    "7157": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "DUP6",
      "path": "3"
    },
    "7158": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "AND",
      "path": "3"
    },
    "7159": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "SWAP2",
      "path": "3"
    },
    "7160": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "PUSH32",
      "path": "3",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "7193": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "SWAP2",
      "path": "3"
    },
    "7194": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "DUP2",
      "path": "3"
    },
    "7195": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "SWAP1",
      "path": "3"
    },
    "7196": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "SUB",
      "path": "3"
    },
    "7197": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "7199": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "ADD",
      "path": "3"
    },
    "7200": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "SWAP1",
      "path": "3"
    },
    "7201": {
      "fn": "ERC20._burn",
      "offset": [8888, 8925],
      "op": "LOG3",
      "path": "3"
    },
    "7202": {
      "fn": "ERC20._burn",
      "offset": [8522, 8932],
      "op": "POP",
      "path": "3"
    },
    "7203": {
      "fn": "ERC20._burn",
      "offset": [8522, 8932],
      "op": "POP",
      "path": "3"
    },
    "7204": {
      "fn": "ERC20._burn",
      "jump": "o",
      "offset": [8522, 8932],
      "op": "JUMP",
      "path": "3"
    },
    "7205": {
      "fn": "NerveToken._delegate",
      "offset": [7053, 7480],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7208": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7210": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7212": {
      "op": "SHL"
    },
    "7213": {
      "op": "SUB"
    },
    "7214": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "DUP1",
      "path": "15"
    },
    "7215": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "DUP4",
      "path": "15"
    },
    "7216": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "AND",
      "path": "15"
    },
    "7217": {
      "fn": "NerveToken._delegate",
      "offset": [7141, 7164],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "7219": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "SWAP1",
      "path": "15"
    },
    "7220": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "DUP2",
      "path": "15"
    },
    "7221": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "MSTORE",
      "path": "15"
    },
    "7222": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7177],
      "op": "PUSH1",
      "path": "15",
      "value": "0x7"
    },
    "7224": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7226": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "MSTORE",
      "path": "15"
    },
    "7227": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "7229": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "DUP2",
      "path": "15"
    },
    "7230": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "KECCAK256",
      "path": "15"
    },
    "7231": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "SLOAD",
      "path": "15"
    },
    "7232": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "SWAP1",
      "path": "15"
    },
    "7233": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "SWAP2",
      "path": "15"
    },
    "7234": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "AND",
      "path": "15"
    },
    "7235": {
      "fn": "NerveToken._delegate",
      "offset": [7167, 7188],
      "op": "SWAP1",
      "path": "15"
    },
    "7236": {
      "fn": "NerveToken._delegate",
      "offset": [7225, 7245],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1C4C"
    },
    "7239": {
      "fn": "NerveToken._delegate",
      "offset": [7178, 7187],
      "op": "DUP5",
      "path": "15"
    },
    "7240": {
      "fn": "NerveToken._delegate",
      "offset": [7225, 7234],
      "op": "PUSH2",
      "path": "15",
      "value": "0xB53"
    },
    "7243": {
      "fn": "NerveToken._delegate",
      "jump": "i",
      "offset": [7225, 7245],
      "op": "JUMP",
      "path": "15"
    },
    "7244": {
      "fn": "NerveToken._delegate",
      "offset": [7225, 7245],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7245": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7247": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7249": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7251": {
      "op": "SHL"
    },
    "7252": {
      "op": "SUB"
    },
    "7253": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "DUP6",
      "path": "15",
      "statement": 79
    },
    "7254": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "DUP2",
      "path": "15"
    },
    "7255": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "AND",
      "path": "15"
    },
    "7256": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "7258": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "DUP2",
      "path": "15"
    },
    "7259": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "DUP2",
      "path": "15"
    },
    "7260": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "MSTORE",
      "path": "15"
    },
    "7261": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7309],
      "op": "PUSH1",
      "path": "15",
      "value": "0x7"
    },
    "7263": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7265": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "MSTORE",
      "path": "15"
    },
    "7266": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "7268": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "DUP1",
      "path": "15"
    },
    "7269": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "DUP3",
      "path": "15"
    },
    "7270": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "KECCAK256",
      "path": "15"
    },
    "7271": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "DUP1",
      "path": "15"
    },
    "7272": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "SLOAD",
      "path": "15"
    },
    "7273": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7277": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7279": {
      "op": "SHL"
    },
    "7280": {
      "op": "SUB"
    },
    "7281": {
      "op": "NOT"
    },
    "7282": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "AND",
      "path": "15"
    },
    "7283": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "DUP10",
      "path": "15"
    },
    "7284": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "DUP7",
      "path": "15"
    },
    "7285": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "AND",
      "path": "15"
    },
    "7286": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "SWAP1",
      "path": "15"
    },
    "7287": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "DUP2",
      "path": "15"
    },
    "7288": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "OR",
      "path": "15"
    },
    "7289": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "SWAP1",
      "path": "15"
    },
    "7290": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "SWAP2",
      "path": "15"
    },
    "7291": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "SSTORE",
      "path": "15"
    },
    "7292": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "SWAP1",
      "path": "15",
      "statement": 80
    },
    "7293": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "MLOAD",
      "path": "15"
    },
    "7294": {
      "fn": "NerveToken._delegate",
      "offset": [7198, 7245],
      "op": "SWAP5",
      "path": "15"
    },
    "7295": {
      "fn": "NerveToken._delegate",
      "offset": [7198, 7245],
      "op": "SWAP6",
      "path": "15"
    },
    "7296": {
      "op": "POP"
    },
    "7297": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7332],
      "op": "SWAP4",
      "path": "15"
    },
    "7298": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "SWAP3",
      "path": "15"
    },
    "7299": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "DUP7",
      "path": "15"
    },
    "7300": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "AND",
      "path": "15"
    },
    "7301": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "SWAP3",
      "path": "15"
    },
    "7302": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "PUSH32",
      "path": "15",
      "value": "0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F"
    },
    "7335": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "SWAP2",
      "path": "15"
    },
    "7336": {
      "fn": "NerveToken._delegate",
      "offset": [7299, 7320],
      "op": "SWAP1",
      "path": "15"
    },
    "7337": {
      "fn": "NerveToken._delegate",
      "offset": [7348, 7402],
      "op": "LOG4",
      "path": "15"
    },
    "7338": {
      "fn": "NerveToken._delegate",
      "offset": [7413, 7473],
      "op": "PUSH2",
      "path": "15",
      "statement": 81,
      "value": "0x1CB4"
    },
    "7341": {
      "fn": "NerveToken._delegate",
      "offset": [7428, 7443],
      "op": "DUP3",
      "path": "15"
    },
    "7342": {
      "fn": "NerveToken._delegate",
      "offset": [7445, 7454],
      "op": "DUP5",
      "path": "15"
    },
    "7343": {
      "fn": "NerveToken._delegate",
      "offset": [7456, 7472],
      "op": "DUP4",
      "path": "15"
    },
    "7344": {
      "fn": "NerveToken._delegate",
      "offset": [7413, 7427],
      "op": "PUSH2",
      "path": "15",
      "value": "0x19EC"
    },
    "7347": {
      "fn": "NerveToken._delegate",
      "jump": "i",
      "offset": [7413, 7473],
      "op": "JUMP",
      "path": "15"
    },
    "7348": {
      "fn": "NerveToken._delegate",
      "offset": [7413, 7473],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7349": {
      "fn": "NerveToken._delegate",
      "offset": [7053, 7480],
      "op": "POP",
      "path": "15"
    },
    "7350": {
      "fn": "NerveToken._delegate",
      "offset": [7053, 7480],
      "op": "POP",
      "path": "15"
    },
    "7351": {
      "fn": "NerveToken._delegate",
      "offset": [7053, 7480],
      "op": "POP",
      "path": "15"
    },
    "7352": {
      "fn": "NerveToken._delegate",
      "offset": [7053, 7480],
      "op": "POP",
      "path": "15"
    },
    "7353": {
      "fn": "NerveToken._delegate",
      "jump": "o",
      "offset": [7053, 7480],
      "op": "JUMP",
      "path": "15"
    },
    "7354": {
      "fn": "EnumerableSet.at",
      "offset": [7677, 7833],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7355": {
      "fn": "EnumerableSet.at",
      "offset": [7751, 7758],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7357": {
      "fn": "EnumerableSet.at",
      "offset": [7801, 7823],
      "op": "PUSH2",
      "path": "9",
      "statement": 82,
      "value": "0xED2"
    },
    "7360": {
      "fn": "EnumerableSet.at",
      "offset": [7805, 7808],
      "op": "DUP4",
      "path": "9"
    },
    "7361": {
      "fn": "EnumerableSet.at",
      "offset": [7817, 7822],
      "op": "DUP4",
      "path": "9"
    },
    "7362": {
      "fn": "EnumerableSet.at",
      "offset": [7801, 7804],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F0B"
    },
    "7365": {
      "fn": "EnumerableSet.at",
      "jump": "i",
      "offset": [7801, 7823],
      "op": "JUMP",
      "path": "9"
    },
    "7366": {
      "fn": "EnumerableSet.contains",
      "offset": [6984, 7149],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7367": {
      "fn": "EnumerableSet.contains",
      "offset": [7064, 7068],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7369": {
      "fn": "EnumerableSet.contains",
      "offset": [7087, 7142],
      "op": "PUSH2",
      "path": "9",
      "statement": 83,
      "value": "0xED2"
    },
    "7372": {
      "fn": "EnumerableSet.contains",
      "offset": [7097, 7100],
      "op": "DUP4",
      "path": "9"
    },
    "7373": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7377": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7379": {
      "op": "SHL"
    },
    "7380": {
      "op": "SUB"
    },
    "7381": {
      "fn": "EnumerableSet.contains",
      "offset": [7117, 7140],
      "op": "DUP5",
      "path": "9"
    },
    "7382": {
      "fn": "EnumerableSet.contains",
      "offset": [7117, 7140],
      "op": "AND",
      "path": "9"
    },
    "7383": {
      "fn": "EnumerableSet.contains",
      "offset": [7087, 7096],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F6F"
    },
    "7386": {
      "fn": "EnumerableSet.contains",
      "jump": "i",
      "offset": [7087, 7142],
      "op": "JUMP",
      "path": "9"
    },
    "7387": {
      "fn": "NerveToken.getChainId",
      "offset": [9276, 9425],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7388": {
      "fn": "NerveToken.getChainId",
      "offset": [9384, 9393],
      "op": "CHAINID",
      "path": "15"
    },
    "7389": {
      "fn": "NerveToken.getChainId",
      "offset": [9276, 9425],
      "op": "SWAP1",
      "path": "15"
    },
    "7390": {
      "fn": "NerveToken.getChainId",
      "jump": "o",
      "offset": [9276, 9425],
      "op": "JUMP",
      "path": "15"
    },
    "7391": {
      "fn": "EnumerableSet.length",
      "offset": [7230, 7345],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7392": {
      "fn": "EnumerableSet.length",
      "offset": [7293, 7300],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7394": {
      "fn": "EnumerableSet.length",
      "offset": [7319, 7338],
      "op": "PUSH2",
      "path": "9",
      "statement": 84,
      "value": "0x86C"
    },
    "7397": {
      "fn": "EnumerableSet.length",
      "offset": [7327, 7330],
      "op": "DUP3",
      "path": "9"
    },
    "7398": {
      "fn": "EnumerableSet.length",
      "offset": [7319, 7326],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F87"
    },
    "7401": {
      "fn": "EnumerableSet.length",
      "jump": "i",
      "offset": [7319, 7338],
      "op": "JUMP",
      "path": "9"
    },
    "7402": {
      "fn": "EnumerableSet._add",
      "offset": [1640, 2044],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7403": {
      "fn": "EnumerableSet._add",
      "offset": [1703, 1707],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7405": {
      "fn": "EnumerableSet._add",
      "offset": [1724, 1745],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1CF6"
    },
    "7408": {
      "fn": "EnumerableSet._add",
      "offset": [1734, 1737],
      "op": "DUP4",
      "path": "9"
    },
    "7409": {
      "fn": "EnumerableSet._add",
      "offset": [1739, 1744],
      "op": "DUP4",
      "path": "9"
    },
    "7410": {
      "fn": "EnumerableSet._add",
      "offset": [1724, 1733],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F6F"
    },
    "7413": {
      "fn": "EnumerableSet._add",
      "jump": "i",
      "offset": [1724, 1745],
      "op": "JUMP",
      "path": "9"
    },
    "7414": {
      "branch": 139,
      "fn": "EnumerableSet._add",
      "offset": [1724, 1745],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7415": {
      "fn": "EnumerableSet._add",
      "offset": [1719, 2038],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1D2C"
    },
    "7418": {
      "branch": 139,
      "fn": "EnumerableSet._add",
      "offset": [1719, 2038],
      "op": "JUMPI",
      "path": "9"
    },
    "7419": {
      "op": "POP"
    },
    "7420": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP2",
      "path": "9",
      "statement": 85
    },
    "7421": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "SLOAD",
      "path": "9"
    },
    "7422": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "7424": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP2",
      "path": "9"
    },
    "7425": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP2",
      "path": "9"
    },
    "7426": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "ADD",
      "path": "9"
    },
    "7427": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP5",
      "path": "9"
    },
    "7428": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "SSTORE",
      "path": "9"
    },
    "7429": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1772],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7431": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP5",
      "path": "9"
    },
    "7432": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP2",
      "path": "9"
    },
    "7433": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "MSTORE",
      "path": "9"
    },
    "7434": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "7436": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP1",
      "path": "9"
    },
    "7437": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP3",
      "path": "9"
    },
    "7438": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "KECCAK256",
      "path": "9"
    },
    "7439": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "SWAP1",
      "path": "9"
    },
    "7440": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "SWAP4",
      "path": "9"
    },
    "7441": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "ADD",
      "path": "9"
    },
    "7442": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "DUP5",
      "path": "9"
    },
    "7443": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "SWAP1",
      "path": "9"
    },
    "7444": {
      "fn": "EnumerableSet._add",
      "offset": [1761, 1784],
      "op": "SSTORE",
      "path": "9"
    },
    "7445": {
      "fn": "EnumerableSet._add",
      "offset": [1941, 1959],
      "op": "DUP5",
      "path": "9",
      "statement": 86
    },
    "7446": {
      "fn": "EnumerableSet._add",
      "offset": [1941, 1959],
      "op": "SLOAD",
      "path": "9"
    },
    "7447": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "DUP5",
      "path": "9"
    },
    "7448": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "DUP3",
      "path": "9"
    },
    "7449": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "MSTORE",
      "path": "9"
    },
    "7450": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1931],
      "op": "DUP3",
      "path": "9"
    },
    "7451": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1931],
      "op": "DUP7",
      "path": "9"
    },
    "7452": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1931],
      "op": "ADD",
      "path": "9"
    },
    "7453": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "SWAP1",
      "path": "9"
    },
    "7454": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "SWAP4",
      "path": "9"
    },
    "7455": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "MSTORE",
      "path": "9"
    },
    "7456": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7458": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "SWAP1",
      "path": "9"
    },
    "7459": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1938],
      "op": "KECCAK256",
      "path": "9"
    },
    "7460": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1959],
      "op": "SWAP2",
      "path": "9"
    },
    "7461": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1959],
      "op": "SWAP1",
      "path": "9"
    },
    "7462": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1959],
      "op": "SWAP2",
      "path": "9"
    },
    "7463": {
      "fn": "EnumerableSet._add",
      "offset": [1919, 1959],
      "op": "SSTORE",
      "path": "9"
    },
    "7464": {
      "fn": "EnumerableSet._add",
      "offset": [1973, 1984],
      "op": "PUSH2",
      "path": "9",
      "statement": 87,
      "value": "0x86C"
    },
    "7467": {
      "fn": "EnumerableSet._add",
      "offset": [1973, 1984],
      "op": "JUMP",
      "path": "9"
    },
    "7468": {
      "fn": "EnumerableSet._add",
      "offset": [1719, 2038],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7469": {
      "op": "POP"
    },
    "7470": {
      "fn": "EnumerableSet._add",
      "offset": [2022, 2027],
      "op": "PUSH1",
      "path": "9",
      "statement": 88,
      "value": "0x0"
    },
    "7472": {
      "fn": "EnumerableSet._add",
      "offset": [2015, 2027],
      "op": "PUSH2",
      "path": "9",
      "value": "0x86C"
    },
    "7475": {
      "fn": "EnumerableSet._add",
      "offset": [2015, 2027],
      "op": "JUMP",
      "path": "9"
    },
    "7476": {
      "fn": "EnumerableSet.remove",
      "offset": [6747, 6903],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7477": {
      "fn": "EnumerableSet.remove",
      "offset": [6820, 6824],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7479": {
      "fn": "EnumerableSet.remove",
      "offset": [6843, 6896],
      "op": "PUSH2",
      "path": "9",
      "statement": 89,
      "value": "0xED2"
    },
    "7482": {
      "fn": "EnumerableSet.remove",
      "offset": [6851, 6854],
      "op": "DUP4",
      "path": "9"
    },
    "7483": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7485": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7487": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7489": {
      "op": "SHL"
    },
    "7490": {
      "op": "SUB"
    },
    "7491": {
      "fn": "EnumerableSet.remove",
      "offset": [6871, 6894],
      "op": "DUP5",
      "path": "9"
    },
    "7492": {
      "fn": "EnumerableSet.remove",
      "offset": [6871, 6894],
      "op": "AND",
      "path": "9"
    },
    "7493": {
      "fn": "EnumerableSet.remove",
      "offset": [6843, 6850],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F8B"
    },
    "7496": {
      "fn": "EnumerableSet.remove",
      "jump": "i",
      "offset": [6843, 6896],
      "op": "JUMP",
      "path": "9"
    },
    "7497": {
      "fn": "SafeMath.sub",
      "offset": [3136, 3291],
      "op": "JUMPDEST",
      "path": "2"
    },
    "7498": {
      "fn": "SafeMath.sub",
      "offset": [3194, 3201],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "7500": {
      "fn": "SafeMath.sub",
      "offset": [3226, 3227],
      "op": "DUP3",
      "path": "2",
      "statement": 90
    },
    "7501": {
      "fn": "SafeMath.sub",
      "offset": [3221, 3222],
      "op": "DUP3",
      "path": "2"
    },
    "7502": {
      "fn": "SafeMath.sub",
      "offset": [3221, 3227],
      "op": "GT",
      "path": "2"
    },
    "7503": {
      "branch": 146,
      "fn": "SafeMath.sub",
      "offset": [3221, 3227],
      "op": "ISZERO",
      "path": "2"
    },
    "7504": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1DA0"
    },
    "7507": {
      "branch": 146,
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "JUMPI",
      "path": "2"
    },
    "7508": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "7510": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "DUP1",
      "path": "2"
    },
    "7511": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "MLOAD",
      "path": "2"
    },
    "7512": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7516": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7518": {
      "op": "SHL"
    },
    "7519": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "DUP2",
      "path": "2"
    },
    "7520": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "MSTORE",
      "path": "2"
    },
    "7521": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "7523": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "7525": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "DUP3",
      "path": "2"
    },
    "7526": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "ADD",
      "path": "2"
    },
    "7527": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "MSTORE",
      "path": "2"
    },
    "7528": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1E"
    },
    "7530": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "7532": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "DUP3",
      "path": "2"
    },
    "7533": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "ADD",
      "path": "2"
    },
    "7534": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "MSTORE",
      "path": "2"
    },
    "7535": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH32",
      "path": "2",
      "value": "0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
    },
    "7568": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "7570": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "DUP3",
      "path": "2"
    },
    "7571": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "ADD",
      "path": "2"
    },
    "7572": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "MSTORE",
      "path": "2"
    },
    "7573": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "SWAP1",
      "path": "2"
    },
    "7574": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "MLOAD",
      "path": "2"
    },
    "7575": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "SWAP1",
      "path": "2"
    },
    "7576": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "DUP2",
      "path": "2"
    },
    "7577": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "SWAP1",
      "path": "2"
    },
    "7578": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "SUB",
      "path": "2"
    },
    "7579": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "7581": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "ADD",
      "path": "2"
    },
    "7582": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "SWAP1",
      "path": "2"
    },
    "7583": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "REVERT",
      "path": "2"
    },
    "7584": {
      "fn": "SafeMath.sub",
      "offset": [3213, 3262],
      "op": "JUMPDEST",
      "path": "2"
    },
    "7585": {
      "op": "POP"
    },
    "7586": {
      "fn": "SafeMath.sub",
      "offset": [3279, 3284],
      "op": "SWAP1",
      "path": "2",
      "statement": 91
    },
    "7587": {
      "fn": "SafeMath.sub",
      "offset": [3279, 3284],
      "op": "SUB",
      "path": "2"
    },
    "7588": {
      "fn": "SafeMath.sub",
      "offset": [3279, 3284],
      "op": "SWAP1",
      "path": "2"
    },
    "7589": {
      "fn": "SafeMath.sub",
      "jump": "o",
      "offset": [3136, 3291],
      "op": "JUMP",
      "path": "2"
    },
    "7590": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8421, 9106],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7591": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8592, 8610],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "7593": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1DCA"
    },
    "7596": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8620, 8632],
      "op": "NUMBER",
      "path": "15"
    },
    "7597": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "7599": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "MLOAD",
      "path": "15"
    },
    "7600": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "DUP1",
      "path": "15"
    },
    "7601": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "7603": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "ADD",
      "path": "15"
    },
    "7604": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "7606": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "MSTORE",
      "path": "15"
    },
    "7607": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "DUP1",
      "path": "15"
    },
    "7608": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH1",
      "path": "15",
      "value": "0x33"
    },
    "7610": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "DUP2",
      "path": "15"
    },
    "7611": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "MSTORE",
      "path": "15"
    },
    "7612": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7614": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "ADD",
      "path": "15"
    },
    "7615": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2183"
    },
    "7618": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "PUSH1",
      "path": "15",
      "value": "0x33"
    },
    "7620": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "SWAP2",
      "path": "15"
    },
    "7621": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "CODECOPY",
      "path": "15"
    },
    "7622": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8619],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2051"
    },
    "7625": {
      "fn": "NerveToken._writeCheckpoint",
      "jump": "i",
      "offset": [8613, 8688],
      "op": "JUMP",
      "path": "15"
    },
    "7626": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8613, 8688],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7627": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8592, 8688],
      "op": "SWAP1",
      "path": "15"
    },
    "7628": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8592, 8688],
      "op": "POP",
      "path": "15"
    },
    "7629": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8718, 8719],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "7631": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8715],
      "op": "DUP5",
      "path": "15"
    },
    "7632": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8719],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "7637": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8719],
      "op": "AND",
      "path": "15"
    },
    "7638": {
      "branch": 125,
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8719],
      "op": "GT",
      "path": "15"
    },
    "7639": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8788],
      "op": "DUP1",
      "path": "15"
    },
    "7640": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8788],
      "op": "ISZERO",
      "path": "15"
    },
    "7641": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8788],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1E13"
    },
    "7644": {
      "branch": 125,
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8788],
      "op": "JUMPI",
      "path": "15"
    },
    "7645": {
      "op": "POP"
    },
    "7646": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7648": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7650": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7652": {
      "op": "SHL"
    },
    "7653": {
      "op": "SUB"
    },
    "7654": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "DUP6",
      "path": "15"
    },
    "7655": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "AND",
      "path": "15"
    },
    "7656": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "7658": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "SWAP1",
      "path": "15"
    },
    "7659": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "DUP2",
      "path": "15"
    },
    "7660": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "MSTORE",
      "path": "15"
    },
    "7661": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8734],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "7663": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7665": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "SWAP1",
      "path": "15"
    },
    "7666": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "DUP2",
      "path": "15"
    },
    "7667": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "MSTORE",
      "path": "15"
    },
    "7668": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "7670": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "DUP1",
      "path": "15"
    },
    "7671": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "DUP4",
      "path": "15"
    },
    "7672": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8745],
      "op": "KECCAK256",
      "path": "15"
    },
    "7673": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8788],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "7678": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7680": {
      "op": "NOT"
    },
    "7681": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8746, 8762],
      "op": "DUP10",
      "path": "15"
    },
    "7682": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8746, 8762],
      "op": "ADD",
      "path": "15"
    },
    "7683": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "DUP2",
      "path": "15"
    },
    "7684": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "AND",
      "path": "15"
    },
    "7685": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "DUP6",
      "path": "15"
    },
    "7686": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "MSTORE",
      "path": "15"
    },
    "7687": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "SWAP3",
      "path": "15"
    },
    "7688": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "MSTORE",
      "path": "15"
    },
    "7689": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "SWAP1",
      "path": "15"
    },
    "7690": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "SWAP2",
      "path": "15"
    },
    "7691": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8763],
      "op": "KECCAK256",
      "path": "15"
    },
    "7692": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8773],
      "op": "SLOAD",
      "path": "15"
    },
    "7693": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8788],
      "op": "DUP3",
      "path": "15"
    },
    "7694": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8788],
      "op": "DUP3",
      "path": "15"
    },
    "7695": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8788],
      "op": "AND",
      "path": "15"
    },
    "7696": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8773],
      "op": "SWAP2",
      "path": "15"
    },
    "7697": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8773],
      "op": "AND",
      "path": "15"
    },
    "7698": {
      "branch": 126,
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8723, 8788],
      "op": "EQ",
      "path": "15"
    },
    "7699": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8703, 8788],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7700": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "ISZERO",
      "path": "15"
    },
    "7701": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1E50"
    },
    "7704": {
      "branch": 126,
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "JUMPI",
      "path": "15"
    },
    "7705": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7707": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7709": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7711": {
      "op": "SHL"
    },
    "7712": {
      "op": "SUB"
    },
    "7713": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "DUP6",
      "path": "15",
      "statement": 92
    },
    "7714": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "AND",
      "path": "15"
    },
    "7715": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "7717": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "SWAP1",
      "path": "15"
    },
    "7718": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "DUP2",
      "path": "15"
    },
    "7719": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "MSTORE",
      "path": "15"
    },
    "7720": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8815],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "7722": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7724": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "SWAP1",
      "path": "15"
    },
    "7725": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "DUP2",
      "path": "15"
    },
    "7726": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "MSTORE",
      "path": "15"
    },
    "7727": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "7729": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "DUP1",
      "path": "15"
    },
    "7730": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "DUP4",
      "path": "15"
    },
    "7731": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8826],
      "op": "KECCAK256",
      "path": "15"
    },
    "7732": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "7737": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7739": {
      "op": "NOT"
    },
    "7740": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8827, 8843],
      "op": "DUP10",
      "path": "15"
    },
    "7741": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8827, 8843],
      "op": "ADD",
      "path": "15"
    },
    "7742": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "AND",
      "path": "15"
    },
    "7743": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "DUP5",
      "path": "15"
    },
    "7744": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "MSTORE",
      "path": "15"
    },
    "7745": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "SWAP1",
      "path": "15"
    },
    "7746": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "SWAP2",
      "path": "15"
    },
    "7747": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "MSTORE",
      "path": "15"
    },
    "7748": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "SWAP1",
      "path": "15"
    },
    "7749": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8844],
      "op": "KECCAK256",
      "path": "15"
    },
    "7750": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8842, 8843],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "7752": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8850],
      "op": "ADD",
      "path": "15"
    },
    "7753": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8861],
      "op": "DUP3",
      "path": "15"
    },
    "7754": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8861],
      "op": "SWAP1",
      "path": "15"
    },
    "7755": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8804, 8861],
      "op": "SSTORE",
      "path": "15"
    },
    "7756": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1EC1"
    },
    "7759": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "JUMP",
      "path": "15"
    },
    "7760": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7761": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "PUSH1",
      "path": "15",
      "statement": 93,
      "value": "0x40"
    },
    "7763": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP1",
      "path": "15"
    },
    "7764": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "MLOAD",
      "path": "15"
    },
    "7765": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP1",
      "path": "15"
    },
    "7766": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP3",
      "path": "15"
    },
    "7767": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "ADD",
      "path": "15"
    },
    "7768": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP3",
      "path": "15"
    },
    "7769": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "MSTORE",
      "path": "15"
    },
    "7770": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFFFFFFFF"
    },
    "7775": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP1",
      "path": "15"
    },
    "7776": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP5",
      "path": "15"
    },
    "7777": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "AND",
      "path": "15"
    },
    "7778": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP3",
      "path": "15"
    },
    "7779": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "MSTORE",
      "path": "15"
    },
    "7780": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7782": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP1",
      "path": "15"
    },
    "7783": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP4",
      "path": "15"
    },
    "7784": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "ADD",
      "path": "15"
    },
    "7785": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP7",
      "path": "15"
    },
    "7786": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "DUP2",
      "path": "15"
    },
    "7787": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8931, 8964],
      "op": "MSTORE",
      "path": "15"
    },
    "7788": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7790": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7792": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7794": {
      "op": "SHL"
    },
    "7795": {
      "op": "SUB"
    },
    "7796": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "DUP11",
      "path": "15"
    },
    "7797": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "AND",
      "path": "15"
    },
    "7798": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7800": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "DUP2",
      "path": "15"
    },
    "7801": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "DUP2",
      "path": "15"
    },
    "7802": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "MSTORE",
      "path": "15"
    },
    "7803": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8903],
      "op": "PUSH1",
      "path": "15",
      "value": "0x8"
    },
    "7805": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "DUP5",
      "path": "15"
    },
    "7806": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "MSTORE",
      "path": "15"
    },
    "7807": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "DUP7",
      "path": "15"
    },
    "7808": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "DUP2",
      "path": "15"
    },
    "7809": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8914],
      "op": "KECCAK256",
      "path": "15"
    },
    "7810": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "DUP12",
      "path": "15"
    },
    "7811": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "DUP7",
      "path": "15"
    },
    "7812": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "AND",
      "path": "15"
    },
    "7813": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "DUP3",
      "path": "15"
    },
    "7814": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "MSTORE",
      "path": "15"
    },
    "7815": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "DUP5",
      "path": "15"
    },
    "7816": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "MSTORE",
      "path": "15"
    },
    "7817": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "DUP7",
      "path": "15"
    },
    "7818": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "DUP2",
      "path": "15"
    },
    "7819": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8928],
      "op": "KECCAK256",
      "path": "15"
    },
    "7820": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SWAP6",
      "path": "15"
    },
    "7821": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "MLOAD",
      "path": "15"
    },
    "7822": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "DUP7",
      "path": "15"
    },
    "7823": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SLOAD",
      "path": "15"
    },
    "7824": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SWAP1",
      "path": "15"
    },
    "7825": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "DUP7",
      "path": "15"
    },
    "7826": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "AND",
      "path": "15"
    },
    "7827": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "7832": {
      "op": "NOT"
    },
    "7833": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SWAP2",
      "path": "15"
    },
    "7834": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "DUP3",
      "path": "15"
    },
    "7835": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "AND",
      "path": "15"
    },
    "7836": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "OR",
      "path": "15"
    },
    "7837": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "DUP8",
      "path": "15"
    },
    "7838": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SSTORE",
      "path": "15"
    },
    "7839": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SWAP3",
      "path": "15"
    },
    "7840": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "MLOAD",
      "path": "15"
    },
    "7841": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1"
    },
    "7843": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SWAP7",
      "path": "15"
    },
    "7844": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "DUP8",
      "path": "15"
    },
    "7845": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "ADD",
      "path": "15"
    },
    "7846": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8892, 8964],
      "op": "SSTORE",
      "path": "15"
    },
    "7847": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "SWAP1",
      "path": "15",
      "statement": 94
    },
    "7848": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "DUP2",
      "path": "15"
    },
    "7849": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "MSTORE",
      "path": "15"
    },
    "7850": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 8992],
      "op": "PUSH1",
      "path": "15",
      "value": "0x9"
    },
    "7852": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "SWAP1",
      "path": "15"
    },
    "7853": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "SWAP3",
      "path": "15"
    },
    "7854": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "MSTORE",
      "path": "15"
    },
    "7855": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "SWAP4",
      "path": "15"
    },
    "7856": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "SWAP1",
      "path": "15"
    },
    "7857": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9003],
      "op": "KECCAK256",
      "path": "15"
    },
    "7858": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "DUP1",
      "path": "15"
    },
    "7859": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SLOAD",
      "path": "15"
    },
    "7860": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9006, 9022],
      "op": "SWAP3",
      "path": "15"
    },
    "7861": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9006, 9022],
      "op": "DUP9",
      "path": "15"
    },
    "7862": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9006, 9022],
      "op": "ADD",
      "path": "15"
    },
    "7863": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SWAP1",
      "path": "15"
    },
    "7864": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SWAP2",
      "path": "15"
    },
    "7865": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "AND",
      "path": "15"
    },
    "7866": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SWAP2",
      "path": "15"
    },
    "7867": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SWAP1",
      "path": "15"
    },
    "7868": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SWAP3",
      "path": "15"
    },
    "7869": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "AND",
      "path": "15"
    },
    "7870": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "OR",
      "path": "15"
    },
    "7871": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SWAP1",
      "path": "15"
    },
    "7872": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8978, 9022],
      "op": "SSTORE",
      "path": "15"
    },
    "7873": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8699, 9033],
      "op": "JUMPDEST",
      "path": "15"
    },
    "7874": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "PUSH1",
      "path": "15",
      "statement": 95,
      "value": "0x40"
    },
    "7876": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP1",
      "path": "15"
    },
    "7877": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "MLOAD",
      "path": "15"
    },
    "7878": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP5",
      "path": "15"
    },
    "7879": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP2",
      "path": "15"
    },
    "7880": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "MSTORE",
      "path": "15"
    },
    "7881": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "7883": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP2",
      "path": "15"
    },
    "7884": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "ADD",
      "path": "15"
    },
    "7885": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP5",
      "path": "15"
    },
    "7886": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "SWAP1",
      "path": "15"
    },
    "7887": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "MSTORE",
      "path": "15"
    },
    "7888": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP2",
      "path": "15"
    },
    "7889": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "MLOAD",
      "path": "15"
    },
    "7890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7894": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7896": {
      "op": "SHL"
    },
    "7897": {
      "op": "SUB"
    },
    "7898": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP9",
      "path": "15"
    },
    "7899": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "AND",
      "path": "15"
    },
    "7900": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "SWAP3",
      "path": "15"
    },
    "7901": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "PUSH32",
      "path": "15",
      "value": "0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724"
    },
    "7934": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "SWAP3",
      "path": "15"
    },
    "7935": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "DUP3",
      "path": "15"
    },
    "7936": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "SWAP1",
      "path": "15"
    },
    "7937": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "SUB",
      "path": "15"
    },
    "7938": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "ADD",
      "path": "15"
    },
    "7939": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "SWAP1",
      "path": "15"
    },
    "7940": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [9048, 9099],
      "op": "LOG2",
      "path": "15"
    },
    "7941": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8421, 9106],
      "op": "POP",
      "path": "15"
    },
    "7942": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8421, 9106],
      "op": "POP",
      "path": "15"
    },
    "7943": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8421, 9106],
      "op": "POP",
      "path": "15"
    },
    "7944": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8421, 9106],
      "op": "POP",
      "path": "15"
    },
    "7945": {
      "fn": "NerveToken._writeCheckpoint",
      "offset": [8421, 9106],
      "op": "POP",
      "path": "15"
    },
    "7946": {
      "fn": "NerveToken._writeCheckpoint",
      "jump": "o",
      "offset": [8421, 9106],
      "op": "JUMP",
      "path": "15"
    },
    "7947": {
      "fn": "EnumerableSet._at",
      "offset": [4452, 4653],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7948": {
      "fn": "EnumerableSet._at",
      "offset": [4546, 4564],
      "op": "DUP2",
      "path": "9",
      "statement": 96
    },
    "7949": {
      "fn": "EnumerableSet._at",
      "offset": [4546, 4564],
      "op": "SLOAD",
      "path": "9"
    },
    "7950": {
      "fn": "EnumerableSet._at",
      "offset": [4519, 4526],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7952": {
      "fn": "EnumerableSet._at",
      "offset": [4519, 4526],
      "op": "SWAP1",
      "path": "9"
    },
    "7953": {
      "branch": 140,
      "fn": "EnumerableSet._at",
      "offset": [4546, 4572],
      "op": "DUP3",
      "path": "9"
    },
    "7954": {
      "op": "LT"
    },
    "7955": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F4D"
    },
    "7958": {
      "branch": 140,
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "JUMPI",
      "path": "9"
    },
    "7959": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7961": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "MLOAD",
      "path": "9"
    },
    "7962": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7966": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7968": {
      "op": "SHL"
    },
    "7969": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP2",
      "path": "9"
    },
    "7970": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "MSTORE",
      "path": "9"
    },
    "7971": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "7973": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "ADD",
      "path": "9"
    },
    "7974": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP1",
      "path": "9"
    },
    "7975": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP1",
      "path": "9"
    },
    "7976": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "7978": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "ADD",
      "path": "9"
    },
    "7979": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP3",
      "path": "9"
    },
    "7980": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP2",
      "path": "9"
    },
    "7981": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "SUB",
      "path": "9"
    },
    "7982": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP3",
      "path": "9"
    },
    "7983": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "MSTORE",
      "path": "9"
    },
    "7984": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x22"
    },
    "7986": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP2",
      "path": "9"
    },
    "7987": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "MSTORE",
      "path": "9"
    },
    "7988": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "7990": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "ADD",
      "path": "9"
    },
    "7991": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP1",
      "path": "9"
    },
    "7992": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH2",
      "path": "9",
      "value": "0x20C7"
    },
    "7995": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x22"
    },
    "7997": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "SWAP2",
      "path": "9"
    },
    "7998": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "CODECOPY",
      "path": "9"
    },
    "7999": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8001": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "ADD",
      "path": "9"
    },
    "8002": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "SWAP2",
      "path": "9"
    },
    "8003": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "POP",
      "path": "9"
    },
    "8004": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "POP",
      "path": "9"
    },
    "8005": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8007": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "MLOAD",
      "path": "9"
    },
    "8008": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "DUP1",
      "path": "9"
    },
    "8009": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "SWAP2",
      "path": "9"
    },
    "8010": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "SUB",
      "path": "9"
    },
    "8011": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "SWAP1",
      "path": "9"
    },
    "8012": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "REVERT",
      "path": "9"
    },
    "8013": {
      "fn": "EnumerableSet._at",
      "offset": [4538, 4611],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8014": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4631],
      "op": "DUP3",
      "path": "9",
      "statement": 97
    },
    "8015": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4639],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8017": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4639],
      "op": "ADD",
      "path": "9"
    },
    "8018": {
      "fn": "EnumerableSet._at",
      "offset": [4640, 4645],
      "op": "DUP3",
      "path": "9"
    },
    "8019": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "DUP2",
      "path": "9"
    },
    "8020": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "SLOAD",
      "path": "9"
    },
    "8021": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "DUP2",
      "path": "9"
    },
    "8022": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "LT",
      "path": "9"
    },
    "8023": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F5C"
    },
    "8026": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "JUMPI",
      "path": "9"
    },
    "8027": {
      "dev": "Index out of range",
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "INVALID",
      "path": "9"
    },
    "8028": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8029": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "SWAP1",
      "path": "9"
    },
    "8030": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8032": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "MSTORE",
      "path": "9"
    },
    "8033": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8035": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8037": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "KECCAK256",
      "path": "9"
    },
    "8038": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "ADD",
      "path": "9"
    },
    "8039": {
      "fn": "EnumerableSet._at",
      "offset": [4628, 4646],
      "op": "SLOAD",
      "path": "9"
    },
    "8040": {
      "fn": "EnumerableSet._at",
      "offset": [4621, 4646],
      "op": "SWAP1",
      "path": "9"
    },
    "8041": {
      "fn": "EnumerableSet._at",
      "offset": [4621, 4646],
      "op": "POP",
      "path": "9"
    },
    "8042": {
      "fn": "EnumerableSet._at",
      "offset": [4452, 4653],
      "op": "SWAP3",
      "path": "9"
    },
    "8043": {
      "fn": "EnumerableSet._at",
      "offset": [4452, 4653],
      "op": "SWAP2",
      "path": "9"
    },
    "8044": {
      "fn": "EnumerableSet._at",
      "offset": [4452, 4653],
      "op": "POP",
      "path": "9"
    },
    "8045": {
      "fn": "EnumerableSet._at",
      "offset": [4452, 4653],
      "op": "POP",
      "path": "9"
    },
    "8046": {
      "fn": "EnumerableSet._at",
      "jump": "o",
      "offset": [4452, 4653],
      "op": "JUMP",
      "path": "9"
    },
    "8047": {
      "fn": "EnumerableSet._contains",
      "offset": [3805, 3932],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8048": {
      "fn": "EnumerableSet._contains",
      "offset": [3878, 3882],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8050": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "SWAP1",
      "path": "9",
      "statement": 98
    },
    "8051": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "DUP2",
      "path": "9"
    },
    "8052": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "MSTORE",
      "path": "9"
    },
    "8053": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3913],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "8055": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3913],
      "op": "SWAP2",
      "path": "9"
    },
    "8056": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3913],
      "op": "SWAP1",
      "path": "9"
    },
    "8057": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3913],
      "op": "SWAP2",
      "path": "9"
    },
    "8058": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3913],
      "op": "ADD",
      "path": "9"
    },
    "8059": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8061": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "MSTORE",
      "path": "9"
    },
    "8062": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8064": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "SWAP1",
      "path": "9"
    },
    "8065": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "KECCAK256",
      "path": "9"
    },
    "8066": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3920],
      "op": "SLOAD",
      "path": "9"
    },
    "8067": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3925],
      "op": "ISZERO",
      "path": "9"
    },
    "8068": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3925],
      "op": "ISZERO",
      "path": "9"
    },
    "8069": {
      "fn": "EnumerableSet._contains",
      "offset": [3901, 3925],
      "op": "SWAP1",
      "path": "9"
    },
    "8070": {
      "fn": "EnumerableSet._contains",
      "jump": "o",
      "offset": [3805, 3932],
      "op": "JUMP",
      "path": "9"
    },
    "8071": {
      "fn": "EnumerableSet._length",
      "offset": [4013, 4120],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8072": {
      "fn": "EnumerableSet._length",
      "offset": [4095, 4113],
      "op": "SLOAD",
      "path": "9",
      "statement": 99
    },
    "8073": {
      "fn": "EnumerableSet._length",
      "offset": [4095, 4113],
      "op": "SWAP1",
      "path": "9"
    },
    "8074": {
      "fn": "EnumerableSet._length",
      "jump": "o",
      "offset": [4013, 4120],
      "op": "JUMP",
      "path": "9"
    },
    "8075": {
      "fn": "EnumerableSet._remove",
      "offset": [2212, 3724],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8076": {
      "fn": "EnumerableSet._remove",
      "offset": [2278, 2282],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8078": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "DUP2",
      "path": "9"
    },
    "8079": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "DUP2",
      "path": "9"
    },
    "8080": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "MSTORE",
      "path": "9"
    },
    "8081": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2427],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "8083": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2427],
      "op": "DUP4",
      "path": "9"
    },
    "8084": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2427],
      "op": "ADD",
      "path": "9"
    },
    "8085": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8087": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "MSTORE",
      "path": "9"
    },
    "8088": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8090": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "DUP2",
      "path": "9"
    },
    "8091": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "KECCAK256",
      "path": "9"
    },
    "8092": {
      "fn": "EnumerableSet._remove",
      "offset": [2415, 2434],
      "op": "SLOAD",
      "path": "9"
    },
    "8093": {
      "fn": "EnumerableSet._remove",
      "offset": [2449, 2464],
      "op": "DUP1",
      "path": "9"
    },
    "8094": {
      "branch": 141,
      "fn": "EnumerableSet._remove",
      "offset": [2449, 2464],
      "op": "ISZERO",
      "path": "9"
    },
    "8095": {
      "fn": "EnumerableSet._remove",
      "offset": [2445, 3718],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2047"
    },
    "8098": {
      "branch": 141,
      "fn": "EnumerableSet._remove",
      "offset": [2445, 3718],
      "op": "JUMPI",
      "path": "9"
    },
    "8099": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2896],
      "op": "DUP4",
      "path": "9"
    },
    "8100": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2896],
      "op": "SLOAD",
      "path": "9"
    },
    "8101": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8103": {
      "op": "NOT"
    },
    "8104": {
      "fn": "EnumerableSet._remove",
      "offset": [2830, 2844],
      "op": "DUP1",
      "path": "9"
    },
    "8105": {
      "fn": "EnumerableSet._remove",
      "offset": [2830, 2844],
      "op": "DUP4",
      "path": "9"
    },
    "8106": {
      "fn": "EnumerableSet._remove",
      "offset": [2830, 2844],
      "op": "ADD",
      "path": "9"
    },
    "8107": {
      "fn": "EnumerableSet._remove",
      "offset": [2830, 2844],
      "op": "SWAP2",
      "path": "9"
    },
    "8108": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2900],
      "op": "SWAP1",
      "path": "9"
    },
    "8109": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2900],
      "op": "DUP2",
      "path": "9"
    },
    "8110": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2900],
      "op": "ADD",
      "path": "9"
    },
    "8111": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2900],
      "op": "SWAP1",
      "path": "9"
    },
    "8112": {
      "fn": "EnumerableSet._remove",
      "offset": [2806, 2827],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8114": {
      "fn": "EnumerableSet._remove",
      "offset": [2806, 2827],
      "op": "SWAP1",
      "path": "9"
    },
    "8115": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2881],
      "op": "DUP8",
      "path": "9"
    },
    "8116": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2881],
      "op": "SWAP1",
      "path": "9"
    },
    "8117": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2900],
      "op": "DUP4",
      "path": "9"
    },
    "8118": {
      "fn": "EnumerableSet._remove",
      "offset": [2878, 2900],
      "op": "SWAP1",
      "path": "9"
    },
    "8119": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "DUP2",
      "path": "9"
    },
    "8120": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "LT",
      "path": "9"
    },
    "8121": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1FBE"
    },
    "8124": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "JUMPI",
      "path": "9"
    },
    "8125": {
      "dev": "Index out of range",
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "INVALID",
      "path": "9"
    },
    "8126": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8127": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "SWAP1",
      "path": "9"
    },
    "8128": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8130": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "MSTORE",
      "path": "9"
    },
    "8131": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8133": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8135": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "KECCAK256",
      "path": "9"
    },
    "8136": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "ADD",
      "path": "9"
    },
    "8137": {
      "fn": "EnumerableSet._remove",
      "offset": [3160, 3182],
      "op": "SLOAD",
      "path": "9"
    },
    "8138": {
      "fn": "EnumerableSet._remove",
      "offset": [3140, 3182],
      "op": "SWAP1",
      "path": "9"
    },
    "8139": {
      "fn": "EnumerableSet._remove",
      "offset": [3140, 3182],
      "op": "POP",
      "path": "9"
    },
    "8140": {
      "fn": "EnumerableSet._remove",
      "offset": [3303, 3312],
      "op": "DUP1",
      "path": "9",
      "statement": 100
    },
    "8141": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3277],
      "op": "DUP8",
      "path": "9"
    },
    "8142": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3285],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8144": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3285],
      "op": "ADD",
      "path": "9"
    },
    "8145": {
      "fn": "EnumerableSet._remove",
      "offset": [3286, 3299],
      "op": "DUP5",
      "path": "9"
    },
    "8146": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "DUP2",
      "path": "9"
    },
    "8147": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "SLOAD",
      "path": "9"
    },
    "8148": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "DUP2",
      "path": "9"
    },
    "8149": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "LT",
      "path": "9"
    },
    "8150": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1FDB"
    },
    "8153": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "JUMPI",
      "path": "9"
    },
    "8154": {
      "dev": "Index out of range",
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "INVALID",
      "path": "9"
    },
    "8155": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8156": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8158": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "SWAP2",
      "path": "9"
    },
    "8159": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "DUP3",
      "path": "9"
    },
    "8160": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "MSTORE",
      "path": "9"
    },
    "8161": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8163": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "DUP1",
      "path": "9"
    },
    "8164": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "DUP4",
      "path": "9"
    },
    "8165": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "KECCAK256",
      "path": "9"
    },
    "8166": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "SWAP1",
      "path": "9"
    },
    "8167": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "SWAP2",
      "path": "9"
    },
    "8168": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3300],
      "op": "ADD",
      "path": "9"
    },
    "8169": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3312],
      "op": "SWAP3",
      "path": "9"
    },
    "8170": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3312],
      "op": "SWAP1",
      "path": "9"
    },
    "8171": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3312],
      "op": "SWAP3",
      "path": "9"
    },
    "8172": {
      "fn": "EnumerableSet._remove",
      "offset": [3274, 3312],
      "op": "SSTORE",
      "path": "9"
    },
    "8173": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "DUP3",
      "path": "9",
      "statement": 101
    },
    "8174": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "DUP2",
      "path": "9"
    },
    "8175": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "MSTORE",
      "path": "9"
    },
    "8176": {
      "fn": "EnumerableSet._remove",
      "offset": [3420, 3421],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "8178": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3390],
      "op": "DUP10",
      "path": "9"
    },
    "8179": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3390],
      "op": "DUP2",
      "path": "9"
    },
    "8180": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3390],
      "op": "ADD",
      "path": "9"
    },
    "8181": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "SWAP1",
      "path": "9"
    },
    "8182": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "SWAP3",
      "path": "9"
    },
    "8183": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "MSTORE",
      "path": "9"
    },
    "8184": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8186": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "SWAP1",
      "path": "9"
    },
    "8187": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3401],
      "op": "KECCAK256",
      "path": "9"
    },
    "8188": {
      "fn": "EnumerableSet._remove",
      "offset": [3404, 3421],
      "op": "SWAP1",
      "path": "9"
    },
    "8189": {
      "fn": "EnumerableSet._remove",
      "offset": [3404, 3421],
      "op": "DUP5",
      "path": "9"
    },
    "8190": {
      "fn": "EnumerableSet._remove",
      "offset": [3404, 3421],
      "op": "ADD",
      "path": "9"
    },
    "8191": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3421],
      "op": "SWAP1",
      "path": "9"
    },
    "8192": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3421],
      "op": "SSTORE",
      "path": "9"
    },
    "8193": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "DUP7",
      "path": "9",
      "statement": 102
    },
    "8194": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SLOAD",
      "path": "9"
    },
    "8195": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3381],
      "op": "DUP8",
      "path": "9"
    },
    "8196": {
      "fn": "EnumerableSet._remove",
      "offset": [3378, 3381],
      "op": "SWAP1",
      "path": "9"
    },
    "8197": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "DUP1",
      "path": "9"
    },
    "8198": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "PUSH2",
      "path": "9",
      "value": "0x200B"
    },
    "8201": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "JUMPI",
      "path": "9"
    },
    "8202": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "INVALID",
      "path": "9"
    },
    "8203": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8204": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "8206": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SWAP1",
      "path": "9"
    },
    "8207": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SUB",
      "path": "9"
    },
    "8208": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "DUP2",
      "path": "9"
    },
    "8209": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "DUP2",
      "path": "9"
    },
    "8210": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SWAP1",
      "path": "9"
    },
    "8211": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8213": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "MSTORE",
      "path": "9"
    },
    "8214": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8216": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8218": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "KECCAK256",
      "path": "9"
    },
    "8219": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "ADD",
      "path": "9"
    },
    "8220": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8222": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SWAP1",
      "path": "9"
    },
    "8223": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SSTORE",
      "path": "9"
    },
    "8224": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SWAP1",
      "path": "9"
    },
    "8225": {
      "fn": "EnumerableSet._remove",
      "offset": [3527, 3544],
      "op": "SSTORE",
      "path": "9"
    },
    "8226": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3622],
      "op": "DUP7",
      "path": "9",
      "statement": 103
    },
    "8227": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3631],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "8229": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3631],
      "op": "ADD",
      "path": "9"
    },
    "8230": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8232": {
      "fn": "EnumerableSet._remove",
      "offset": [3632, 3637],
      "op": "DUP8",
      "path": "9"
    },
    "8233": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "DUP2",
      "path": "9"
    },
    "8234": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "MSTORE",
      "path": "9"
    },
    "8235": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8237": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "ADD",
      "path": "9"
    },
    "8238": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "SWAP1",
      "path": "9"
    },
    "8239": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "DUP2",
      "path": "9"
    },
    "8240": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "MSTORE",
      "path": "9"
    },
    "8241": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8243": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "ADD",
      "path": "9"
    },
    "8244": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8246": {
      "fn": "EnumerableSet._remove",
      "offset": [3619, 3638],
      "op": "KECCAK256",
      "path": "9"
    },
    "8247": {
      "fn": "EnumerableSet._remove",
      "offset": [3612, 3638],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8249": {
      "fn": "EnumerableSet._remove",
      "offset": [3612, 3638],
      "op": "SWAP1",
      "path": "9"
    },
    "8250": {
      "fn": "EnumerableSet._remove",
      "offset": [3612, 3638],
      "op": "SSTORE",
      "path": "9"
    },
    "8251": {
      "fn": "EnumerableSet._remove",
      "offset": [3660, 3664],
      "op": "PUSH1",
      "path": "9",
      "statement": 104,
      "value": "0x1"
    },
    "8253": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "SWAP5",
      "path": "9"
    },
    "8254": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "POP",
      "path": "9"
    },
    "8255": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "POP",
      "path": "9"
    },
    "8256": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "POP",
      "path": "9"
    },
    "8257": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "POP",
      "path": "9"
    },
    "8258": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "POP",
      "path": "9"
    },
    "8259": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "PUSH2",
      "path": "9",
      "value": "0x86C"
    },
    "8262": {
      "fn": "EnumerableSet._remove",
      "offset": [3653, 3664],
      "op": "JUMP",
      "path": "9"
    },
    "8263": {
      "fn": "EnumerableSet._remove",
      "offset": [2445, 3718],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8264": {
      "fn": "EnumerableSet._remove",
      "offset": [3702, 3707],
      "op": "PUSH1",
      "path": "9",
      "statement": 105,
      "value": "0x0"
    },
    "8266": {
      "fn": "EnumerableSet._remove",
      "offset": [3695, 3707],
      "op": "SWAP2",
      "path": "9"
    },
    "8267": {
      "fn": "EnumerableSet._remove",
      "offset": [3695, 3707],
      "op": "POP",
      "path": "9"
    },
    "8268": {
      "fn": "EnumerableSet._remove",
      "offset": [3695, 3707],
      "op": "POP",
      "path": "9"
    },
    "8269": {
      "fn": "EnumerableSet._remove",
      "offset": [3695, 3707],
      "op": "PUSH2",
      "path": "9",
      "value": "0x86C"
    },
    "8272": {
      "fn": "EnumerableSet._remove",
      "offset": [3695, 3707],
      "op": "JUMP",
      "path": "9"
    },
    "8273": {
      "fn": "NerveToken.safe32",
      "offset": [9112, 9270],
      "op": "JUMPDEST",
      "path": "15"
    },
    "8274": {
      "fn": "NerveToken.safe32",
      "offset": [9187, 9193],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "8276": {
      "fn": "NerveToken.safe32",
      "offset": [9224, 9236],
      "op": "DUP2",
      "path": "15",
      "statement": 106
    },
    "8277": {
      "fn": "NerveToken.safe32",
      "offset": [9217, 9222],
      "op": "PUSH5",
      "path": "15",
      "value": "0x100000000"
    },
    "8283": {
      "fn": "NerveToken.safe32",
      "offset": [9213, 9222],
      "op": "DUP5",
      "path": "15"
    },
    "8284": {
      "branch": 127,
      "fn": "NerveToken.safe32",
      "offset": [9213, 9222],
      "op": "LT",
      "path": "15"
    },
    "8285": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH2",
      "path": "15",
      "value": "0x20A7"
    },
    "8288": {
      "branch": 127,
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "JUMPI",
      "path": "15"
    },
    "8289": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "8291": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MLOAD",
      "path": "15"
    },
    "8292": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8296": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8298": {
      "op": "SHL"
    },
    "8299": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP2",
      "path": "15"
    },
    "8300": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MSTORE",
      "path": "15"
    },
    "8301": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "8303": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "8305": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP3",
      "path": "15"
    },
    "8306": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8307": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP2",
      "path": "15"
    },
    "8308": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP2",
      "path": "15"
    },
    "8309": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MSTORE",
      "path": "15"
    },
    "8310": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8311": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MLOAD",
      "path": "15"
    },
    "8312": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x24"
    },
    "8314": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP5",
      "path": "15"
    },
    "8315": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8316": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MSTORE",
      "path": "15"
    },
    "8317": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8318": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MLOAD",
      "path": "15"
    },
    "8319": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP1",
      "path": "15"
    },
    "8320": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP3",
      "path": "15"
    },
    "8321": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8322": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP3",
      "path": "15"
    },
    "8323": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x44"
    },
    "8325": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP1",
      "path": "15"
    },
    "8326": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP2",
      "path": "15"
    },
    "8327": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8328": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP2",
      "path": "15"
    },
    "8329": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP1",
      "path": "15"
    },
    "8330": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP6",
      "path": "15"
    },
    "8331": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8332": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "SWAP1",
      "path": "15"
    },
    "8333": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP1",
      "path": "15"
    },
    "8334": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8335": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8336": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "8338": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8339": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ISZERO",
      "path": "15"
    },
    "8340": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH2",
      "path": "15",
      "value": "0x178D"
    },
    "8343": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "JUMPI",
      "path": "15"
    },
    "8344": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP2",
      "path": "15"
    },
    "8345": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP2",
      "path": "15"
    },
    "8346": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8347": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MLOAD",
      "path": "15"
    },
    "8348": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP4",
      "path": "15"
    },
    "8349": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "DUP3",
      "path": "15"
    },
    "8350": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8351": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "MSTORE",
      "path": "15"
    },
    "8352": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "8354": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "ADD",
      "path": "15"
    },
    "8355": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1775"
    },
    "8358": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "JUMP",
      "path": "15"
    },
    "8359": {
      "fn": "NerveToken.safe32",
      "offset": [9205, 9237],
      "op": "JUMPDEST",
      "path": "15"
    },
    "8360": {
      "op": "POP"
    },
    "8361": {
      "fn": "NerveToken.safe32",
      "offset": [9261, 9262],
      "op": "SWAP2",
      "path": "15",
      "statement": 107
    },
    "8362": {
      "fn": "NerveToken.safe32",
      "offset": [9261, 9262],
      "op": "SWAP3",
      "path": "15"
    },
    "8363": {
      "fn": "NerveToken.safe32",
      "offset": [9112, 9270],
      "op": "SWAP2",
      "path": "15"
    },
    "8364": {
      "op": "POP"
    },
    "8365": {
      "op": "POP"
    },
    "8366": {
      "fn": "NerveToken.safe32",
      "jump": "o",
      "offset": [9112, 9270],
      "op": "JUMP",
      "path": "15"
    },
    "8367": {
      "op": "JUMPDEST"
    },
    "8368": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8370": {
      "op": "DUP1"
    },
    "8371": {
      "op": "MLOAD"
    },
    "8372": {
      "op": "DUP1"
    },
    "8373": {
      "op": "DUP3"
    },
    "8374": {
      "op": "ADD"
    },
    "8375": {
      "op": "SWAP1"
    },
    "8376": {
      "op": "SWAP2"
    },
    "8377": {
      "op": "MSTORE"
    },
    "8378": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8380": {
      "op": "DUP1"
    },
    "8381": {
      "op": "DUP3"
    },
    "8382": {
      "op": "MSTORE"
    },
    "8383": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8385": {
      "op": "DUP3"
    },
    "8386": {
      "op": "ADD"
    },
    "8387": {
      "op": "MSTORE"
    },
    "8388": {
      "op": "SWAP1"
    },
    "8389": {
      "op": "JUMP"
    }
  },
  "sha1": "f3ec2c6e41d8ff7343e117c4256013c316011744",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol';\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20Burnable.sol';\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/Ownable.sol';\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/AccessControl.sol';\n\n\n// NerveToken with Governance.\ncontract NerveToken is ERC20, ERC20Burnable, Ownable, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() public ERC20(\"Nerve\", \"NRV\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n\n    /// @notice Creates `_amount` token to `_to`. Must only be called by MINTER_ROLE addresses.\n    function mint(address _to, uint256 _amount) public{\n         // Check that the calling account has the minter role\n        require(hasRole(MINTER_ROLE, msg.sender), \"Caller is not a minter\");\n        _mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @dev A record of each accounts delegate\n    mapping (address => address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n      /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator)\n        external\n        view\n        returns (address)\n    {\n        return _delegates[delegator];\n    }\n\n   /**\n    * @notice Delegate votes from `msg.sender` to `delegatee`\n    * @param delegatee The address to delegate votes to\n    */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n    {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name())),\n                getChainId(),\n                address(this)\n            )\n        );\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                DELEGATION_TYPEHASH,\n                delegatee,\n                nonce,\n                expiry\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                structHash\n            )\n        );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"NRV::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"NRV::delegateBySig: invalid nonce\");\n        require(now <= expiry, \"NRV::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber)\n        external\n        view\n        returns (uint256)\n    {\n        require(blockNumber < block.number, \"NRV::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee)\n        internal\n    {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying NRVs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    )\n        internal\n    {\n        uint32 blockNumber = safe32(block.number, \"NRV::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}\n",
  "sourceMap": "435:8992:15:-:0;;;578:102;;;;;;;;;;1958:145:3;;;;;;;;;;;;;-1:-1:-1;;;1958:145:3;;;;;;;;;;;;;;;;-1:-1:-1;;;1958:145:3;;;2040:5;2032;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2055:17:3;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;2082:9:3;:14;;-1:-1:-1;;2082:14:3;2094:2;2082:14;;;-1:-1:-1;2082:9:3;904:12:1;:10;:12::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:1;;-1:-1:-1;;;;;926:18:1;;;;;;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:1;-1:-1:-1;;959:43:1;;-1:-1:-1;;959:43:1;-1:-1:-1;631:42:15::1;1772:4:0;662:10:15;631;:42::i;:::-;435:8992:::0;;598:104:8;685:10;598:104;:::o;6588:110:0:-;6666:25;6677:4;6683:7;6666:10;:25::i;:::-;6588:110;;:::o;7025:184::-;7098:12;;;;:6;:12;;;;;;;;:33;;7123:7;;7098:24;;;;;:33;;:::i;:::-;7094:109;;;7179:12;:10;:12::i;:::-;-1:-1:-1;;;;;7152:40:0;7170:7;-1:-1:-1;;;;;7152:40:0;7164:4;7152:40;;;;;;;;;;7025:184;;:::o;6429:150:9:-;6499:4;6522:50;6527:3;-1:-1:-1;;;;;6547:23:9;;6522:4;:50::i;:::-;6515:57;;6429:150;;;;;:::o;1640:404::-;1703:4;1724:21;1734:3;1739:5;1724:9;:21::i;:::-;1719:319;;-1:-1:-1;1761:23:9;;;;;;;;:11;:23;;;;;;;;;;;;;1941:18;;1919:19;;;:12;;;:19;;;;;;:40;;;;1973:11;;1719:319;-1:-1:-1;2022:5:9;2015:12;;3805:127;3878:4;3901:19;;;:12;;;;;:19;;;;;;:24;;;3805:127::o;435:8992:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;435:8992:15;;;-1:-1:-1;435:8992:15;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/NerveToken.sol",
  "type": "contract"
}
