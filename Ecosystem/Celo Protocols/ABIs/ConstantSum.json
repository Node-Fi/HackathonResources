{
  "address": "0xd84fcdBA6995592BE73Ff6be888028ee49A79978",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decimals",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lpTokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "soldId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "boughtId",
          "type": "uint128"
        }
      ],
      "name": "TokenSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc9071339d9d9332a581bd5dae5eb0c9af7b52a6d88d985312232de2cb281be2",
  "receipt": {
    "to": null,
    "from": "0x4ea77424Da100ac856ece3DDfAbd8B528570Ca0d",
    "contractAddress": "0xd84fcdBA6995592BE73Ff6be888028ee49A79978",
    "transactionIndex": 4,
    "gasUsed": "3304026",
    "logsBloom": "0x
    "blockHash": "0x8dfbbf24345bcd3fdee041f391e804c37010b8ff79300f0af868350824cca801",
    "transactionHash": "0xbc9071339d9d9332a581bd5dae5eb0c9af7b52a6d88d985312232de2cb281be2",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 10271369,
        "transactionHash": "0xbc9071339d9d9332a581bd5dae5eb0c9af7b52a6d88d985312232de2cb281be2",
        "address": "0xd84fcdBA6995592BE73Ff6be888028ee49A79978",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ea77424da100ac856ece3ddfabd8b528570ca0d"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x8dfbbf24345bcd3fdee041f391e804c37010b8ff79300f0af868350824cca801"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 10271369,
        "transactionHash": "0xbc9071339d9d9332a581bd5dae5eb0c9af7b52a6d88d985312232de2cb281be2",
        "address": "0x5921A10cBb421cA13bEa0232Dc705AC39575AE8D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d84fcdba6995592be73ff6be888028ee49a79978"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x8dfbbf24345bcd3fdee041f391e804c37010b8ff79300f0af868350824cca801"
      }
    ],
    "blockNumber": 10271369,
    "cumulativeGasUsed": "4665088",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ["0x122013fd7dF1C6F636a5bb8f03108E876548b455", "0xE919F65739c26a42616b7b8eedC6b5524d1e3aC4"],
    ["18", "18"],
    "OpenSum wETH v1/v2 LP",
    "OSlp"
  ],
  "solcInputHash": "210da34fb2958e1fe9eef44d5ec99f6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lpTokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"soldId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"boughtId\",\"type\":\"uint128\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[],uint256)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"_0\":\"amount of LP token user received\"}},\"calculateRemoveLiquidity(uint256)\":{\"params\":{\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(uint256,address)\":{\"params\":{\"tokenAmount\":\"the amount of LP token to burn\",\"tokenOut\":\"address of which token will be withdrawn\"},\"returns\":{\"availableTokenAmount\":\"calculated amount of underlying token available to withdraw\"}},\"getBalances()\":{\"returns\":{\"_0\":\"current balances of all tokens in pool\"}},\"getLpToken()\":{\"returns\":{\"_0\":\"address of lp token\"}},\"getToken(uint8)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"_0\":\"address of the token at given index\"}},\"getTokenBalance(uint8)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"_0\":\"current balance of the pooled token at given index with token's native precision\"}},\"getTokenIndex(address)\":{\"params\":{\"tokenAddress\":\"address of the token\"},\"returns\":{\"_0\":\"the index of the given token address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeLiquidity(uint256,uint256[],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation\"},\"returns\":{\"_0\":\"amounts of tokens user received\"}},\"removeLiquidityOneToken(uint256,address,uint256)\":{\"params\":{\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"tokenAmount\":\"the amount of the lp tokens to burn\",\"tokenOut\":\"the address of the token you want to receive\"},\"returns\":{\"_0\":\"amount chosen token that user received\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swap(address,address,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"the amount of tokens the user wants to swap from\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmountOut\":\"the min amount the user would like to receive, or revert.\",\"tokenFrom\":\"the token the user wants to swap from\",\"tokenTo\":\"the token the user wants to swap to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[],uint256)\":{\"notice\":\"Add liquidity to the pool\"},\"calculateRemoveLiquidity(uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(uint256,address)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"getBalances()\":{\"notice\":\"Return balances of pooled tokens\"},\"getLpToken()\":{\"notice\":\"Returns address of lp token\"},\"getToken(uint8)\":{\"notice\":\"Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\"},\"getTokenBalance(uint8)\":{\"notice\":\"Return current balance of the pooled token at given index\"},\"getTokenIndex(address)\":{\"notice\":\"Return the index of the given token address. Reverts if no matching token is found.\"},\"pause()\":{\"notice\":\"Pause the contract. Revert if already paused.\"},\"removeLiquidity(uint256,uint256[],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityOneToken(uint256,address,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"swap(address,address,uint256,uint256,uint256)\":{\"notice\":\"Swap two tokens using this pool\"},\"unpause()\":{\"notice\":\"Unpause the contract. Revert if already unpaused.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swap.sol\":\"Swap\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf5c24bf041db896602e865b967918933b9f4281922852141f955c78a4cfa2149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n */\\ncontract LPToken is ERC20Burnable, Ownable {\\n  using SafeMath for uint256;\\n\\n  uint8 _decimals;\\n\\n  /**\\n   * @notice Deploys LPToken contract with given name, symbol, and decimals\\n   * @dev the caller of this constructor will become the owner of this contract\\n   * @param name_ name of this token\\n   * @param symbol_ symbol of this token\\n   * @param decimals_ number of decimals this token will be based on\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) ERC20(name_, symbol_) {\\n    _decimals = decimals_;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @notice Mints the given amount of LPToken to the recipient.\\n   * @dev only owner can call this mint function\\n   * @param recipient address of account to receive the tokens\\n   * @param amount amount of tokens to mint\\n   */\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"amount == 0\\\");\\n    _mint(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xc8928c16a766bc4197e12cb63484d345adaf2a03dd14a2f9654f3c31aea4784c\",\"license\":\"MIT\"},\"contracts/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/**\\n * @title OwnerPausable\\n * @notice An ownable contract allows the owner to pause and unpause the\\n * contract without a delay.\\n * @dev Only methods using the provided modifiers will be paused.\\n */\\ncontract OwnerPausable is Ownable, Pausable {\\n  /**\\n   * @notice Pause the contract. Revert if already paused.\\n   */\\n  function pause() external onlyOwner {\\n    Pausable._pause();\\n  }\\n\\n  /**\\n   * @notice Unpause the contract. Revert if already unpaused.\\n   */\\n  function unpause() external onlyOwner {\\n    Pausable._unpause();\\n  }\\n}\\n\",\"keccak256\":\"0xf82eed9ae9dfab5b8eb7e035d0b26ab456752ec8b33644e43a7785fe28cf7fb4\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./OwnerPausable.sol\\\";\\nimport \\\"./LPToken.sol\\\";\\n\\n// A constant-sum swap contract\\ncontract Swap is OwnerPausable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n  IERC20[] tokens;\\n  uint256[] decimals;\\n  uint256[] balances;\\n\\n  LPToken lpToken;\\n  uint256[] precisionMultipliers;\\n  uint8 constant LP_PRECISION_DECIMALS = 18;\\n\\n  mapping(address => uint8) private tokenIndexes;\\n\\n  constructor(\\n    IERC20[] memory _tokens,\\n    uint256[] memory _decimals,\\n    string memory _lpTokenName,\\n    string memory _lpTokenSymbol\\n  ) {\\n    require(_tokens.length > 1, \\\"number of tokens must exceed 1\\\");\\n    require(\\n      _tokens.length == _decimals.length,\\n      \\\"Tokens array must be the same shape as decimals array\\\"\\n    );\\n\\n    precisionMultipliers = new uint256[](_decimals.length);\\n\\n    for (uint8 i = 0; i < _tokens.length; i++) {\\n      precisionMultipliers[i] =\\n        10**uint256(LP_PRECISION_DECIMALS).sub(uint256(_decimals[i]));\\n      tokenIndexes[address(_tokens[i])] = i;\\n    }\\n\\n    tokens = _tokens;\\n    decimals = _decimals;\\n    balances = new uint256[](_tokens.length);\\n    lpToken = new LPToken(_lpTokenName, _lpTokenSymbol, LP_PRECISION_DECIMALS);\\n  }\\n\\n  /*** EVENTS ***/\\n  event TokenSwap(\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n\\n  /*** MODIFIERS ***/\\n\\n  /**\\n   * @notice Modifier to check deadline against current timestamp\\n   * @param deadline latest timestamp to accept this transaction\\n   */\\n  modifier deadlineCheck(uint256 deadline) {\\n    require(block.timestamp <= deadline, \\\"Deadline not met\\\");\\n    _;\\n  }\\n\\n  /*** VIEW FUNCTIONS ***/\\n\\n  /**\\n   * @notice Return the index of the given token address. Reverts if no matching\\n   * token is found.\\n   * @param tokenAddress address of the token\\n   * @return the index of the given token address\\n   */\\n  function _getTokenIndex(address tokenAddress) internal view returns (uint8) {\\n    uint8 index = tokenIndexes[tokenAddress];\\n    require(address(getToken(index)) == tokenAddress, \\\"Token does not exist\\\");\\n    return index;\\n  }\\n\\n  /**\\n   * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\\n   * @param index the index of the token\\n   * @return address of the token at given index\\n   */\\n  function getToken(uint8 index) public view returns (IERC20) {\\n    require(index < tokens.length, \\\"Out of range\\\");\\n    return tokens[index];\\n  }\\n\\n  /**\\n   * @notice Return the index of the given token address. Reverts if no matching\\n   * token is found.\\n   * @param tokenAddress address of the token\\n   * @return the index of the given token address\\n   */\\n  function getTokenIndex(address tokenAddress) external view returns (uint8) {\\n    return _getTokenIndex(tokenAddress);\\n  }\\n\\n  /**\\n   * @notice Return current balance of the pooled token at given index\\n   * @param index the index of the token\\n   * @return current balance of the pooled token at given index with token's native precision\\n   */\\n  function getTokenBalance(uint8 index) external view returns (uint256) {\\n    require(index < tokens.length, \\\"Index out of range\\\");\\n    return balances[index];\\n  }\\n\\n  /**\\n   * @notice Return balances of pooled tokens\\n   * @return current balances of all tokens in pool\\n   */\\n  function getBalances() external view returns (uint256[] memory) {\\n    return balances;\\n  }\\n\\n  /**\\n        @notice Returns address of lp token\\n        @return address of lp token\\n     */\\n  function getLpToken() external view returns (address) {\\n    return address(lpToken);\\n  }\\n\\n  function _calculateRemoveLiquidity(uint256 amount)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory expectedOut = new uint256[](tokens.length);\\n    uint256 lpTotalBalance = lpToken.totalSupply();\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      expectedOut[i] = balances[i].mul(amount).div(lpTotalBalance);\\n    }\\n    return expectedOut;\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of LP tokens\\n   * @param amount the amount of LP tokens that would be burned on withdrawal\\n   * @return array of token balances that the user will receive\\n   */\\n  function calculateRemoveLiquidity(uint256 amount)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    return _calculateRemoveLiquidity(amount);\\n  }\\n\\n  function _calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    address tokenOut\\n  ) internal view returns (uint256 availableTokenAmount) {\\n    uint8 tokenIndex = _getTokenIndex(tokenOut);\\n    uint256 scaledAmount = tokenAmount.div(precisionMultipliers[tokenIndex]);\\n\\n    if (balances[tokenIndex] < scaledAmount) {\\n      return balances[tokenIndex];\\n    }\\n    return scaledAmount;\\n  }\\n\\n  /**\\n   * @notice Calculate the amount of underlying token available to withdraw\\n   * when withdrawing via only single token\\n   * @param tokenAmount the amount of LP token to burn\\n   * @param tokenOut address of which token will be withdrawn\\n   * @return availableTokenAmount calculated amount of underlying token\\n   * available to withdraw\\n   */\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    address tokenOut\\n  ) external view returns (uint256 availableTokenAmount) {\\n    return _calculateRemoveLiquidityOneToken(tokenAmount, tokenOut);\\n  }\\n\\n  function _calculateSwap(\\n    address tokenFrom,\\n    address tokenTo,\\n    uint256 amountIn\\n  ) internal view returns (uint256) {\\n    uint8 tokenIndexFrom = _getTokenIndex(tokenFrom);\\n    uint8 tokenIndexTo = _getTokenIndex(tokenTo);\\n    uint256 scaledAmount = amountIn\\n      .mul(precisionMultipliers[tokenIndexFrom])\\n      .div(precisionMultipliers[tokenIndexTo]);\\n    if (scaledAmount > balances[tokenIndexTo]) {\\n      return balances[tokenIndexTo];\\n    }\\n    return scaledAmount;\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive on swap\\n   * @param tokenFrom the token the user wants to sell\\n   * @param tokenTo the token the user wants to buy\\n   * @param amountIn the amount of tokens the user wants to sell. If the token charges\\n   * a fee on transfers, use the amount that gets transferred after the fee.\\n   * @return amount of tokens the user will receive\\n   */\\n  function calculateSwap(\\n    address tokenFrom,\\n    address tokenTo,\\n    uint256 amountIn\\n  ) internal view returns (uint256) {\\n    return _calculateSwap(tokenFrom, tokenTo, amountIn);\\n  }\\n\\n  /*** STATE MODIFYING FUNCTIONS ***/\\n\\n  /**\\n   * @notice Swap two tokens using this pool\\n   * @param tokenFrom the token the user wants to swap from\\n   * @param tokenTo the token the user wants to swap to\\n   * @param amountIn the amount of tokens the user wants to swap from\\n   * @param minAmountOut the min amount the user would like to receive, or revert.\\n   * @param deadline latest timestamp to accept this transaction\\n   */\\n  function swap(\\n    address tokenFrom,\\n    address tokenTo,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  )\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    deadlineCheck(deadline)\\n    returns (uint256)\\n  {\\n    uint8 tokenIndexFrom = _getTokenIndex(tokenFrom);\\n    uint8 tokenIndexTo = _getTokenIndex(tokenTo);\\n    uint256 amountOut = _calculateSwap(tokenFrom, tokenTo, amountIn);\\n    require(\\n      amountOut < balances[tokenIndexTo],\\n      \\\"Not enough liquidity for trade\\\"\\n    );\\n    require(amountOut >= minAmountOut, \\\"Minimum amount out was not met\\\");\\n\\n    tokens[tokenIndexFrom].safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      amountIn\\n    );\\n    tokens[tokenIndexTo].safeTransfer(msg.sender, amountOut);\\n\\n    balances[tokenIndexFrom] = balances[tokenIndexFrom].add(amountIn);\\n    balances[tokenIndexTo] = balances[tokenIndexTo].sub(amountOut);\\n\\n    emit TokenSwap(\\n      msg.sender,\\n      amountIn,\\n      amountOut,\\n      tokenIndexFrom,\\n      tokenIndexTo\\n    );\\n    return amountOut;\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * @return amount of LP token user received\\n   */\\n  function addLiquidity(uint256[] memory amounts, uint256 minToMint)\\n    external\\n    returns (uint256)\\n  {\\n    uint256 toMint = 0;\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      toMint = toMint.add(amounts[i].mul(precisionMultipliers[i]));\\n      balances[i] = balances[i].add(amounts[i]);\\n      tokens[i].safeTransferFrom(msg.sender, address(this), amounts[i]);\\n    }\\n    require(toMint >= minToMint, \\\"Not enough lp tokens would have been minted\\\");\\n    lpToken.mint(msg.sender, toMint);\\n\\n    emit AddLiquidity(msg.sender, amounts, lpToken.totalSupply() + toMint);\\n    return toMint;\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   *        acceptable for this burn. Useful as a front-running mitigation\\n   * @param deadline latest timestamp to accept this transaction\\n   * @return amounts of tokens user received\\n   */\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\\n    uint256[] memory amounts = _calculateRemoveLiquidity(amount);\\n\\n    for (uint8 i = 0; i < tokens.length; i++) {\\n      require(amounts[i] >= minAmounts[i], \\\"Not enough received!\\\");\\n      balances[i] = balances[i].sub(amounts[i]);\\n      tokens[i].safeTransfer(msg.sender, balances[i]);\\n    }\\n    lpToken.burnFrom(msg.sender, amount);\\n    emit RemoveLiquidity(msg.sender, amounts, lpToken.totalSupply());\\n\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param tokenAmount the amount of the lp tokens to burn\\n   * @param tokenOut the address of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @return amount chosen token that user received\\n   */\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    address tokenOut,\\n    uint256 minAmount\\n  ) external returns (uint256) {\\n    uint8 tokenIndex = _getTokenIndex(tokenOut);\\n    uint256 amountOut = _calculateRemoveLiquidityOneToken(\\n      tokenAmount,\\n      tokenOut\\n    );\\n    require(amountOut >= minAmount, \\\"Not enough liquidity to remove\\\");\\n\\n    balances[tokenIndex] = balances[tokenIndex].sub(amountOut);\\n    tokens[tokenIndex].safeTransfer(msg.sender, amountOut);\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    emit RemoveLiquidityOne(\\n      msg.sender,\\n      tokenAmount,\\n      lpToken.totalSupply(),\\n      tokenIndex,\\n      amountOut\\n    );\\n\\n    return amountOut;\\n  }\\n}\\n\",\"keccak256\":\"0xa4cb8754f5e63c3301d5361dc353b8f4788d6a7db31be16a15952abdff5209c5\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003fbf38038062003fbf833981016040819052620000349162000547565b62000048620000426200032b565b6200032f565b6000805460ff60a01b191690556001808055845111620000855760405162461bcd60e51b81526004016200007c90620006d9565b60405180910390fd5b8251845114620000a95760405162461bcd60e51b81526004016200007c9062000710565b82516001600160401b03811115620000d157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015620000fb578160200160208202803683370190505b508051620001129160069160209091019062000394565b5060005b84518160ff1610156200022b576200016c848260ff16815181106200014b57634e487b7160e01b600052603260045260246000fd5b6020026020010151601260ff166200037f60201b620010181790919060201c565b6200017990600a6200080c565b60068260ff16815481106200019e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055508060076000878460ff1681518110620001d557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080620002229062000941565b91505062000116565b50835162000241906002906020870190620003e4565b5082516200025790600390602086019062000394565b5083516001600160401b038111156200028057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015620002aa578160200160208202803683370190505b508051620002c19160049160209091019062000394565b5081816012604051620002d4906200043c565b620002e2939291906200069c565b604051809103906000f080158015620002ff573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200099092505050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006200038d8284620008f4565b9392505050565b828054828255906000526020600020908101928215620003d2579160200282015b82811115620003d2578251825591602001919060010190620003b5565b50620003e09291506200044a565b5090565b828054828255906000526020600020908101928215620003d2579160200282015b82811115620003d257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000405565b6114fd8062002ac283390190565b5b80821115620003e057600081556001016200044b565b600082601f83011262000472578081fd5b815160206200048b620004858362000799565b6200076d565b8281528181019085830183850287018401881015620004a8578586fd5b855b85811015620004c857815184529284019290840190600101620004aa565b5090979650505050505050565b600082601f830112620004e6578081fd5b81516001600160401b038111156200050257620005026200097a565b62000517601f8201601f19166020016200076d565b8181528460208386010111156200052c578283fd5b6200053f8260208301602087016200090e565b949350505050565b600080600080608085870312156200055d578384fd5b84516001600160401b038082111562000574578586fd5b818701915087601f83011262000588578586fd5b815160206200059b620004858362000799565b82815281810190858301838502870184018d1015620005b8578a8bfd5b8a96505b84871015620005f15780516001600160a01b0381168114620005dc578b8cfd5b835260019690960195918301918301620005bc565b50918a01519198509093505050808211156200060b578485fd5b620006198883890162000461565b945060408701519150808211156200062f578384fd5b6200063d88838901620004d5565b9350606087015191508082111562000653578283fd5b506200066287828801620004d5565b91505092959194509250565b60008151808452620006888160208601602086016200090e565b601f01601f19169290920160200192915050565b600060608252620006b160608301866200066e565b8281036020840152620006c581866200066e565b91505060ff83166040830152949350505050565b6020808252601e908201527f6e756d626572206f6620746f6b656e73206d7573742065786365656420310000604082015260600190565b60208082526035908201527f546f6b656e73206172726179206d757374206265207468652073616d6520736860408201527f61706520617320646563696d616c732061727261790000000000000000000000606082015260800190565b6040518181016001600160401b03811182821017156200079157620007916200097a565b604052919050565b60006001600160401b03821115620007b557620007b56200097a565b5060209081020190565b80825b6001808611620007d3575062000803565b818704821115620007e857620007e862000964565b80861615620007f657918102915b9490941c938002620007c2565b94509492505050565b60006200038d600019848460008262000828575060016200038d565b8162000837575060006200038d565b81600181146200085057600281146200085b576200088f565b60019150506200038d565b60ff8411156200086f576200086f62000964565b6001841b91508482111562000888576200088862000964565b506200038d565b5060208310610133831016604e8410600b8410161715620008c7575081810a83811115620008c157620008c162000964565b6200038d565b620008d68484846001620007bf565b808604821115620008eb57620008eb62000964565b02949350505050565b60008282101562000909576200090962000964565b500390565b60005b838110156200092b57818101518382015260200162000911565b838111156200093b576000848401525b50505050565b600060ff821660ff8114156200095b576200095b62000964565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61212280620009a06000396000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e01c80638214f5a4116100b257806391ceb3eb11610081578063c5bb316811610066578063c5bb316814610228578063f2fad2b61461023b578063f2fde38b1461024e5761011a565b806391ceb3eb14610202578063a571135f146102155761011a565b80638214f5a4146101ca57806382b86600146101df5780638456cb59146101f25780638da5cb5b146101fa5761011a565b806366c0bd24116100ee57806366c0bd241461016f578063715018a61461018f5780637a950f9914610197578063805d2766146101b75761011a565b8062113e081461011f57806331cd52b01461013d5780633f4ba83a146101505780635c975abb1461015a575b600080fd5b610127610261565b6040516101349190611ae8565b60405180910390f35b61012761014b3660046119a1565b6102b9565b61015861061a565b005b610162610663565b6040516101349190611b1d565b61018261017d3660046117cc565b610684565b6040516101349190611fa1565b610158610697565b6101aa6101a53660046117e6565b6106e0565b6040516101349190611f59565b6101aa6101c5366004611942565b610972565b6101d2610987565b6040516101349190611a97565b6101d26101ed366004611a20565b610996565b6101586109fc565b6101d2610a43565b6101aa610210366004611a20565b610a52565b6101aa61022336600461196d565b610aaf565b6101aa610236366004611832565b610cc9565b610127610249366004611912565b610f9c565b61015861025c3660046117cc565b610fa7565b606060048054806020026020016040519081016040528092919081815260200182805480156102af57602002820191906000526020600020905b81548152602001906001019080831161029b575b5050505050905090565b6060600260015414156102e75760405162461bcd60e51b81526004016102de90611f22565b60405180910390fd5b6002600155814281101561030d5760405162461bcd60e51b81526004016102de90611de9565b600061031887611024565b905060005b60025460ff821610156104bf5786868260ff1681811061034d57634e487b7160e01b600052603260045260246000fd5b90506020020135828260ff168151811061037757634e487b7160e01b600052603260045260246000fd5b6020026020010151101561039d5760405162461bcd60e51b81526004016102de90611d20565b610408828260ff16815181106103c357634e487b7160e01b600052603260045260246000fd5b602002602001015160048360ff16815481106103ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461101890919063ffffffff16565b60048260ff168154811061042c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506104ad3360048360ff168154811061046257634e487b7160e01b600052603260045260246000fd5b906000526020600020015460028460ff168154811061049157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906111a4565b806104b7816120a0565b91505061031d565b506005546040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906379cc67909061050b9033908b90600401611acf565b600060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b5050600554604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290513394507f88d38ed598fdd809c2bf01ee49cd24b7fdabf379a83d29567952b60324d58cef935085926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f6919061192a565b604051610604929190611afb565b60405180910390a2600180559695505050505050565b61062261124a565b6001600160a01b0316610633610a43565b6001600160a01b0316146106595760405162461bcd60e51b81526004016102de90611d57565b61066161124e565b565b60005474010000000000000000000000000000000000000000900460ff1690565b600061068f826112da565b90505b919050565b61069f61124a565b6001600160a01b03166106b0610a43565b6001600160a01b0316146106d65760405162461bcd60e51b81526004016102de90611d57565b610661600061132a565b6000600260015414156107055760405162461bcd60e51b81526004016102de90611f22565b6002600155610712610663565b1561072f5760405162461bcd60e51b81526004016102de90611cb2565b81804211156107505760405162461bcd60e51b81526004016102de90611de9565b600061075b886112da565b90506000610768886112da565b905060006107778a8a8a611392565b905060048260ff168154811061079d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015481106107c65760405162461bcd60e51b81526004016102de90611b79565b868110156107e65760405162461bcd60e51b81526004016102de90611ce9565b61082d33308a60028760ff168154811061081057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692919061149d565b610856338260028560ff168154811061049157634e487b7160e01b600052603260045260246000fd5b6108978860048560ff168154811061087e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546114c490919063ffffffff16565b60048460ff16815481106108bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506108f18160048460ff16815481106103ef57634e487b7160e01b600052603260045260246000fd5b60048360ff168154811061091557634e487b7160e01b600052603260045260246000fd5b60009182526020909120015560405133907fc6c1e0630dbe9130cc068028486c0d118ddcea348550819defd5cb8c257f8a3890610959908b90859088908890611f80565b60405180910390a2600180559998505050505050505050565b600061097e83836114d0565b90505b92915050565b6005546001600160a01b031690565b60025460009060ff8316106109bd5760405162461bcd60e51b81526004016102de90611e20565b60028260ff16815481106109e157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b610a0461124a565b6001600160a01b0316610a15610a43565b6001600160a01b031614610a3b5760405162461bcd60e51b81526004016102de90611d57565b610661611599565b6000546001600160a01b031690565b60025460009060ff831610610a795760405162461bcd60e51b81526004016102de90611e57565b60048260ff1681548110610a9d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600080610abb846112da565b90506000610ac986866114d0565b905083811015610aeb5760405162461bcd60e51b81526004016102de90611c7b565b610b138160048460ff16815481106103ef57634e487b7160e01b600052603260045260246000fd5b60048360ff1681548110610b3757634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550610b6e338260028560ff168154811061049157634e487b7160e01b600052603260045260246000fd5b6005546040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906379cc679090610bb99033908a90600401611acf565b600060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b5050600554604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290513394507f43fb02998f4e03da2e0e6fff53fdbf0c40a9f45f145dc377fc30615d7d7a8a6493508a926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca4919061192a565b8585604051610cb69493929190611f62565b60405180910390a29150505b9392505050565b600080805b600254811015610e2457610d47610d4060068381548110610cff57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154878481518110610d2a57634e487b7160e01b600052603260045260246000fd5b602002602001015161162690919063ffffffff16565b83906114c4565b9150610d95858281518110610d6c57634e487b7160e01b600052603260045260246000fd5b60200260200101516004838154811061087e57634e487b7160e01b600052603260045260246000fd5b60048281548110610db657634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550610e123330878481518110610de957634e487b7160e01b600052603260045260246000fd5b60200260200101516002858154811061081057634e487b7160e01b600052603260045260246000fd5b80610e1c81612067565b915050610cce565b5082811015610e455760405162461bcd60e51b81526004016102de90611d8c565b6005546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906340c10f1990610e909033908590600401611acf565b600060405180830381600087803b158015610eaa57600080fd5b505af1158015610ebe573d6000803e3d6000fd5b50505050336001600160a01b03167fdf21883620cd435343a655a765cce604ee5e962b399aed0ebbbd63a9c7e570c48583600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f75919061192a565b610f7f9190611faf565b604051610f8d929190611afb565b60405180910390a29392505050565b606061068f82611024565b610faf61124a565b6001600160a01b0316610fc0610a43565b6001600160a01b031614610fe65760405162461bcd60e51b81526004016102de90611d57565b6001600160a01b03811661100c5760405162461bcd60e51b81526004016102de90611be7565b6110158161132a565b50565b600061097e8284612024565b60025460609060009067ffffffffffffffff81111561105357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561107c578160200160208202803683370190505b5090506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611107919061192a565b905060005b60025481101561119b5761115e82611158876004858154811061113f57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461162690919063ffffffff16565b90611632565b83828151811061117e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061119381612067565b91505061110c565b50909392505050565b6112458363a9059cbb60e01b84846040516024016111c3929190611acf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261163e565b505050565b3390565b611256610663565b6112725760405162461bcd60e51b81526004016102de90611bb0565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6112c361124a565b6040516112d09190611a97565b60405180910390a1565b6001600160a01b038116600081815260076020526040812054909160ff9091169061130482610996565b6001600160a01b03161461068f5760405162461bcd60e51b81526004016102de90611c44565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008061139e856112da565b905060006113ab856112da565b9050600061142260068360ff16815481106113d657634e487b7160e01b600052603260045260246000fd5b906000526020600020015461115860068660ff168154811061140857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548861162690919063ffffffff16565b905060048260ff168154811061144857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548111156114935760048260ff168154811061147e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549350505050610cc2565b9695505050505050565b6114be846323b872dd60e01b8585856040516024016111c393929190611aab565b50505050565b600061097e8284611faf565b6000806114dc836112da565b9050600061152160068360ff168154811061150757634e487b7160e01b600052603260045260246000fd5b90600052602060002001548661163290919063ffffffff16565b90508060048360ff168154811061154857634e487b7160e01b600052603260045260246000fd5b906000526020600020015410156115915760048260ff168154811061157d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015492505050610981565b949350505050565b6115a1610663565b156115be5760405162461bcd60e51b81526004016102de90611cb2565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112c361124a565b600061097e8284611fe7565b600061097e8284611fc7565b6000611693826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116cd9092919063ffffffff16565b80519091501561124557808060200190518101906116b191906118f2565b6112455760405162461bcd60e51b81526004016102de90611ec5565b60606115918484600085856116e185611776565b6116fd5760405162461bcd60e51b81526004016102de90611e8e565b600080866001600160a01b031685876040516117199190611a7b565b60006040518083038185875af1925050503d8060008114611756576040519150601f19603f3d011682016040523d82523d6000602084013e61175b565b606091505b509150915061176b82828661177c565b979650505050505050565b3b151590565b6060831561178b575081610cc2565b82511561179b5782518084602001fd5b8160405162461bcd60e51b81526004016102de9190611b28565b80356001600160a01b038116811461069257600080fd5b6000602082840312156117dd578081fd5b61097e826117b5565b600080600080600060a086880312156117fd578081fd5b611806866117b5565b9450611814602087016117b5565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215611844578182fd5b823567ffffffffffffffff8082111561185b578384fd5b818501915085601f83011261186e578384fd5b8135602082821115611882576118826120d6565b808202604051828282010181811086821117156118a1576118a16120d6565b604052838152828101945085830182870184018b10156118bf578889fd5b8896505b848710156118e15780358652600196909601959483019483016118c3565b509997909101359750505050505050565b600060208284031215611903578081fd5b81518015158114610cc2578182fd5b600060208284031215611923578081fd5b5035919050565b60006020828403121561193b578081fd5b5051919050565b60008060408385031215611954578182fd5b82359150611964602084016117b5565b90509250929050565b600080600060608486031215611981578283fd5b83359250611991602085016117b5565b9150604084013590509250925092565b600080600080606085870312156119b6578384fd5b84359350602085013567ffffffffffffffff808211156119d4578485fd5b818701915087601f8301126119e7578485fd5b8135818111156119f5578586fd5b8860208083028501011115611a08578586fd5b95986020929092019750949560400135945092505050565b600060208284031215611a31578081fd5b813560ff81168114610cc2578182fd5b6000815180845260208085019450808401835b83811015611a7057815187529582019590820190600101611a54565b509495945050505050565b60008251611a8d81846020870161203b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825261097e6020830184611a41565b600060408252611b0e6040830185611a41565b90508260208301529392505050565b901515815260200190565b6000602082528251806020840152611b4781604085016020870161203b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601e908201527f4e6f7420656e6f756768206c697175696469747920666f722074726164650000604082015260600190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f546f6b656e20646f6573206e6f74206578697374000000000000000000000000604082015260600190565b6020808252601e908201527f4e6f7420656e6f756768206c697175696469747920746f2072656d6f76650000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252601e908201527f4d696e696d756d20616d6f756e74206f757420776173206e6f74206d65740000604082015260600190565b60208082526014908201527f4e6f7420656e6f75676820726563656976656421000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f4e6f7420656e6f756768206c7020746f6b656e7320776f756c6420686176652060408201527f6265656e206d696e746564000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604082015260600190565b6020808252600c908201527f4f7574206f662072616e67650000000000000000000000000000000000000000604082015260600190565b60208082526012908201527f496e646578206f7574206f662072616e67650000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b938452602084019290925260ff166040830152606082015260800190565b938452602084019290925260ff908116604084015216606082015260800190565b60ff91909116815260200190565b60008219821115611fc257611fc26120c0565b500190565b600082611fe257634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561201f5761201f6120c0565b500290565b600082821015612036576120366120c0565b500390565b60005b8381101561205657818101518382015260200161203e565b838111156114be5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612099576120996120c0565b5060010190565b600060ff821660ff8114156120b7576120b76120c0565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f7088042e3decc70235093cfac2865a8505490eca3d03a9c35e76294be1b984364736f6c6343000800003360806040523480156200001157600080fd5b50604051620014fd380380620014fd83398101604081905262000034916200024e565b8251839083906200004d906003906020850190620000fd565b50805162000063906004906020840190620000fd565b505050620000806200007a620000a760201b60201c565b620000ab565b6005805460ff909216600160a01b0260ff60a01b1990921691909117905550620003229050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010b90620002cf565b90600052602060002090601f0160209004810192826200012f57600085556200017a565b82601f106200014a57805160ff19168380011785556200017a565b828001600101855582156200017a579182015b828111156200017a5782518255916020019190600101906200015d565b50620001889291506200018c565b5090565b5b808211156200018857600081556001016200018d565b600082601f830112620001b4578081fd5b81516001600160401b0380821115620001d157620001d16200030c565b6040516020601f8401601f1916820181018381118382101715620001f957620001f96200030c565b604052838252858401810187101562000210578485fd5b8492505b8383101562000233578583018101518284018201529182019162000214565b838311156200024457848185840101525b5095945050505050565b60008060006060848603121562000263578283fd5b83516001600160401b03808211156200027a578485fd5b6200028887838801620001a3565b945060208601519150808211156200029e578384fd5b50620002ad86828701620001a3565b925050604084015160ff81168114620002c4578182fd5b809150509250925092565b600281046001821680620002e457607f821691505b602082108114156200030657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6111cb80620003326000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806370a08231116100b257806395d89b4111610081578063a9059cbb11610066578063a9059cbb14610234578063dd62ed3e14610247578063f2fde38b1461025a5761011b565b806395d89b4114610219578063a457c2d7146102215761011b565b806370a08231146101d6578063715018a6146101e957806379cc6790146101f15780638da5cb5b146102045761011b565b8063313ce567116100ee578063313ce56714610186578063395093511461019b57806340c10f19146101ae57806342966c68146101c35761011b565b806306fdde0314610120578063095ea7b31461013e57806318160ddd1461015e57806323b872dd14610173575b600080fd5b61012861026d565b6040516101359190610bb9565b60405180910390f35b61015161014c366004610b59565b6102ff565b6040516101359190610bae565b61016661031c565b60405161013591906110cc565b610151610181366004610b1e565b610322565b61018e6103bb565b60405161013591906110d5565b6101516101a9366004610b59565b6103dc565b6101c16101bc366004610b59565b610430565b005b6101c16101d1366004610b82565b61049a565b6101666101e4366004610acb565b6104ae565b6101c16104cd565b6101c16101ff366004610b59565b610518565b61020c61056b565b6040516101359190610b9a565b61012861057a565b61015161022f366004610b59565b610589565b610151610242366004610b59565b610602565b610166610255366004610aec565b610616565b6101c1610268366004610acb565b610641565b60606003805461027c90611112565b80601f01602080910402602001604051908101604052809291908181526020018280546102a890611112565b80156102f55780601f106102ca576101008083540402835291602001916102f5565b820191906000526020600020905b8154815290600101906020018083116102d857829003601f168201915b5050505050905090565b600061031361030c6106af565b84846106b3565b50600192915050565b60025490565b600061032f848484610767565b6001600160a01b0384166000908152600160205260408120816103506106af565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508281101561039c5760405162461bcd60e51b815260040161039390610e32565b60405180910390fd5b6103b0856103a86106af565b8584036106b3565b506001949350505050565b60055474010000000000000000000000000000000000000000900460ff1690565b60006103136103e96106af565b8484600160006103f76106af565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461042b91906110e3565b6106b3565b6104386106af565b6001600160a01b031661044961056b565b6001600160a01b03161461046f5760405162461bcd60e51b815260040161039390610e8f565b8061048c5760405162461bcd60e51b815260040161039390610dfb565b6104968282610891565b5050565b6104ab6104a56106af565b82610959565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b6104d56106af565b6001600160a01b03166104e661056b565b6001600160a01b03161461050c5760405162461bcd60e51b815260040161039390610e8f565b6105166000610a4a565b565b6000610526836102556106af565b9050818110156105485760405162461bcd60e51b815260040161039390610ec4565b61055c836105546106af565b8484036106b3565b6105668383610959565b505050565b6005546001600160a01b031690565b60606004805461027c90611112565b600080600160006105986106af565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156105e45760405162461bcd60e51b815260040161039390611038565b6105f86105ef6106af565b858584036106b3565b5060019392505050565b600061031361060f6106af565b8484610767565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106496106af565b6001600160a01b031661065a61056b565b6001600160a01b0316146106805760405162461bcd60e51b815260040161039390610e8f565b6001600160a01b0381166106a65760405162461bcd60e51b815260040161039390610ce4565b6104ab81610a4a565b3390565b6001600160a01b0383166106d95760405162461bcd60e51b815260040161039390610fdb565b6001600160a01b0382166106ff5760405162461bcd60e51b815260040161039390610d41565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061075a9085906110cc565b60405180910390a3505050565b6001600160a01b03831661078d5760405162461bcd60e51b815260040161039390610f7e565b6001600160a01b0382166107b35760405162461bcd60e51b815260040161039390610c2a565b6107be838383610566565b6001600160a01b038316600090815260208190526040902054818110156107f75760405162461bcd60e51b815260040161039390610d9e565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061082e9084906110e3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161087891906110cc565b60405180910390a361088b848484610566565b50505050565b6001600160a01b0382166108b75760405162461bcd60e51b815260040161039390611095565b6108c360008383610566565b80600260008282546108d591906110e3565b90915550506001600160a01b038216600090815260208190526040812080548392906109029084906110e3565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109459085906110cc565b60405180910390a361049660008383610566565b6001600160a01b03821661097f5760405162461bcd60e51b815260040161039390610f21565b61098b82600083610566565b6001600160a01b038216600090815260208190526040902054818110156109c45760405162461bcd60e51b815260040161039390610c87565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109f39084906110fb565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a369086906110cc565b60405180910390a361056683600084610566565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146104c857600080fd5b600060208284031215610adc578081fd5b610ae582610ab4565b9392505050565b60008060408385031215610afe578081fd5b610b0783610ab4565b9150610b1560208401610ab4565b90509250929050565b600080600060608486031215610b32578081fd5b610b3b84610ab4565b9250610b4960208501610ab4565b9150604084013590509250925092565b60008060408385031215610b6b578182fd5b610b7483610ab4565b946020939093013593505050565b600060208284031215610b93578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b81811015610be557858101830151858201604001528201610bc9565b81811115610bf65783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600b908201527f616d6f756e74203d3d2030000000000000000000000000000000000000000000604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160408201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b600082198211156110f6576110f6611166565b500190565b60008282101561110d5761110d611166565b500390565b60028104600182168061112657607f821691505b60208210811415611160577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220b2b020c4b6ae9010ea569b5a9c322db06b91569eaec2f5f9eca6e414431111f064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011a5760003560e01c80638214f5a4116100b257806391ceb3eb11610081578063c5bb316811610066578063c5bb316814610228578063f2fad2b61461023b578063f2fde38b1461024e5761011a565b806391ceb3eb14610202578063a571135f146102155761011a565b80638214f5a4146101ca57806382b86600146101df5780638456cb59146101f25780638da5cb5b146101fa5761011a565b806366c0bd24116100ee57806366c0bd241461016f578063715018a61461018f5780637a950f9914610197578063805d2766146101b75761011a565b8062113e081461011f57806331cd52b01461013d5780633f4ba83a146101505780635c975abb1461015a575b600080fd5b610127610261565b6040516101349190611ae8565b60405180910390f35b61012761014b3660046119a1565b6102b9565b61015861061a565b005b610162610663565b6040516101349190611b1d565b61018261017d3660046117cc565b610684565b6040516101349190611fa1565b610158610697565b6101aa6101a53660046117e6565b6106e0565b6040516101349190611f59565b6101aa6101c5366004611942565b610972565b6101d2610987565b6040516101349190611a97565b6101d26101ed366004611a20565b610996565b6101586109fc565b6101d2610a43565b6101aa610210366004611a20565b610a52565b6101aa61022336600461196d565b610aaf565b6101aa610236366004611832565b610cc9565b610127610249366004611912565b610f9c565b61015861025c3660046117cc565b610fa7565b606060048054806020026020016040519081016040528092919081815260200182805480156102af57602002820191906000526020600020905b81548152602001906001019080831161029b575b5050505050905090565b6060600260015414156102e75760405162461bcd60e51b81526004016102de90611f22565b60405180910390fd5b6002600155814281101561030d5760405162461bcd60e51b81526004016102de90611de9565b600061031887611024565b905060005b60025460ff821610156104bf5786868260ff1681811061034d57634e487b7160e01b600052603260045260246000fd5b90506020020135828260ff168151811061037757634e487b7160e01b600052603260045260246000fd5b6020026020010151101561039d5760405162461bcd60e51b81526004016102de90611d20565b610408828260ff16815181106103c357634e487b7160e01b600052603260045260246000fd5b602002602001015160048360ff16815481106103ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461101890919063ffffffff16565b60048260ff168154811061042c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506104ad3360048360ff168154811061046257634e487b7160e01b600052603260045260246000fd5b906000526020600020015460028460ff168154811061049157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906111a4565b806104b7816120a0565b91505061031d565b506005546040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906379cc67909061050b9033908b90600401611acf565b600060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b5050600554604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290513394507f88d38ed598fdd809c2bf01ee49cd24b7fdabf379a83d29567952b60324d58cef935085926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f6919061192a565b604051610604929190611afb565b60405180910390a2600180559695505050505050565b61062261124a565b6001600160a01b0316610633610a43565b6001600160a01b0316146106595760405162461bcd60e51b81526004016102de90611d57565b61066161124e565b565b60005474010000000000000000000000000000000000000000900460ff1690565b600061068f826112da565b90505b919050565b61069f61124a565b6001600160a01b03166106b0610a43565b6001600160a01b0316146106d65760405162461bcd60e51b81526004016102de90611d57565b610661600061132a565b6000600260015414156107055760405162461bcd60e51b81526004016102de90611f22565b6002600155610712610663565b1561072f5760405162461bcd60e51b81526004016102de90611cb2565b81804211156107505760405162461bcd60e51b81526004016102de90611de9565b600061075b886112da565b90506000610768886112da565b905060006107778a8a8a611392565b905060048260ff168154811061079d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015481106107c65760405162461bcd60e51b81526004016102de90611b79565b868110156107e65760405162461bcd60e51b81526004016102de90611ce9565b61082d33308a60028760ff168154811061081057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692919061149d565b610856338260028560ff168154811061049157634e487b7160e01b600052603260045260246000fd5b6108978860048560ff168154811061087e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546114c490919063ffffffff16565b60048460ff16815481106108bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506108f18160048460ff16815481106103ef57634e487b7160e01b600052603260045260246000fd5b60048360ff168154811061091557634e487b7160e01b600052603260045260246000fd5b60009182526020909120015560405133907fc6c1e0630dbe9130cc068028486c0d118ddcea348550819defd5cb8c257f8a3890610959908b90859088908890611f80565b60405180910390a2600180559998505050505050505050565b600061097e83836114d0565b90505b92915050565b6005546001600160a01b031690565b60025460009060ff8316106109bd5760405162461bcd60e51b81526004016102de90611e20565b60028260ff16815481106109e157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b610a0461124a565b6001600160a01b0316610a15610a43565b6001600160a01b031614610a3b5760405162461bcd60e51b81526004016102de90611d57565b610661611599565b6000546001600160a01b031690565b60025460009060ff831610610a795760405162461bcd60e51b81526004016102de90611e57565b60048260ff1681548110610a9d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600080610abb846112da565b90506000610ac986866114d0565b905083811015610aeb5760405162461bcd60e51b81526004016102de90611c7b565b610b138160048460ff16815481106103ef57634e487b7160e01b600052603260045260246000fd5b60048360ff1681548110610b3757634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550610b6e338260028560ff168154811061049157634e487b7160e01b600052603260045260246000fd5b6005546040517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906379cc679090610bb99033908a90600401611acf565b600060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b5050600554604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290513394507f43fb02998f4e03da2e0e6fff53fdbf0c40a9f45f145dc377fc30615d7d7a8a6493508a926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca4919061192a565b8585604051610cb69493929190611f62565b60405180910390a29150505b9392505050565b600080805b600254811015610e2457610d47610d4060068381548110610cff57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154878481518110610d2a57634e487b7160e01b600052603260045260246000fd5b602002602001015161162690919063ffffffff16565b83906114c4565b9150610d95858281518110610d6c57634e487b7160e01b600052603260045260246000fd5b60200260200101516004838154811061087e57634e487b7160e01b600052603260045260246000fd5b60048281548110610db657634e487b7160e01b600052603260045260246000fd5b9060005260206000200181905550610e123330878481518110610de957634e487b7160e01b600052603260045260246000fd5b60200260200101516002858154811061081057634e487b7160e01b600052603260045260246000fd5b80610e1c81612067565b915050610cce565b5082811015610e455760405162461bcd60e51b81526004016102de90611d8c565b6005546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906340c10f1990610e909033908590600401611acf565b600060405180830381600087803b158015610eaa57600080fd5b505af1158015610ebe573d6000803e3d6000fd5b50505050336001600160a01b03167fdf21883620cd435343a655a765cce604ee5e962b399aed0ebbbd63a9c7e570c48583600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f75919061192a565b610f7f9190611faf565b604051610f8d929190611afb565b60405180910390a29392505050565b606061068f82611024565b610faf61124a565b6001600160a01b0316610fc0610a43565b6001600160a01b031614610fe65760405162461bcd60e51b81526004016102de90611d57565b6001600160a01b03811661100c5760405162461bcd60e51b81526004016102de90611be7565b6110158161132a565b50565b600061097e8284612024565b60025460609060009067ffffffffffffffff81111561105357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561107c578160200160208202803683370190505b5090506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611107919061192a565b905060005b60025481101561119b5761115e82611158876004858154811061113f57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461162690919063ffffffff16565b90611632565b83828151811061117e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061119381612067565b91505061110c565b50909392505050565b6112458363a9059cbb60e01b84846040516024016111c3929190611acf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261163e565b505050565b3390565b611256610663565b6112725760405162461bcd60e51b81526004016102de90611bb0565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6112c361124a565b6040516112d09190611a97565b60405180910390a1565b6001600160a01b038116600081815260076020526040812054909160ff9091169061130482610996565b6001600160a01b03161461068f5760405162461bcd60e51b81526004016102de90611c44565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008061139e856112da565b905060006113ab856112da565b9050600061142260068360ff16815481106113d657634e487b7160e01b600052603260045260246000fd5b906000526020600020015461115860068660ff168154811061140857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548861162690919063ffffffff16565b905060048260ff168154811061144857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548111156114935760048260ff168154811061147e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549350505050610cc2565b9695505050505050565b6114be846323b872dd60e01b8585856040516024016111c393929190611aab565b50505050565b600061097e8284611faf565b6000806114dc836112da565b9050600061152160068360ff168154811061150757634e487b7160e01b600052603260045260246000fd5b90600052602060002001548661163290919063ffffffff16565b90508060048360ff168154811061154857634e487b7160e01b600052603260045260246000fd5b906000526020600020015410156115915760048260ff168154811061157d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015492505050610981565b949350505050565b6115a1610663565b156115be5760405162461bcd60e51b81526004016102de90611cb2565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112c361124a565b600061097e8284611fe7565b600061097e8284611fc7565b6000611693826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116cd9092919063ffffffff16565b80519091501561124557808060200190518101906116b191906118f2565b6112455760405162461bcd60e51b81526004016102de90611ec5565b60606115918484600085856116e185611776565b6116fd5760405162461bcd60e51b81526004016102de90611e8e565b600080866001600160a01b031685876040516117199190611a7b565b60006040518083038185875af1925050503d8060008114611756576040519150601f19603f3d011682016040523d82523d6000602084013e61175b565b606091505b509150915061176b82828661177c565b979650505050505050565b3b151590565b6060831561178b575081610cc2565b82511561179b5782518084602001fd5b8160405162461bcd60e51b81526004016102de9190611b28565b80356001600160a01b038116811461069257600080fd5b6000602082840312156117dd578081fd5b61097e826117b5565b600080600080600060a086880312156117fd578081fd5b611806866117b5565b9450611814602087016117b5565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215611844578182fd5b823567ffffffffffffffff8082111561185b578384fd5b818501915085601f83011261186e578384fd5b8135602082821115611882576118826120d6565b808202604051828282010181811086821117156118a1576118a16120d6565b604052838152828101945085830182870184018b10156118bf578889fd5b8896505b848710156118e15780358652600196909601959483019483016118c3565b509997909101359750505050505050565b600060208284031215611903578081fd5b81518015158114610cc2578182fd5b600060208284031215611923578081fd5b5035919050565b60006020828403121561193b578081fd5b5051919050565b60008060408385031215611954578182fd5b82359150611964602084016117b5565b90509250929050565b600080600060608486031215611981578283fd5b83359250611991602085016117b5565b9150604084013590509250925092565b600080600080606085870312156119b6578384fd5b84359350602085013567ffffffffffffffff808211156119d4578485fd5b818701915087601f8301126119e7578485fd5b8135818111156119f5578586fd5b8860208083028501011115611a08578586fd5b95986020929092019750949560400135945092505050565b600060208284031215611a31578081fd5b813560ff81168114610cc2578182fd5b6000815180845260208085019450808401835b83811015611a7057815187529582019590820190600101611a54565b509495945050505050565b60008251611a8d81846020870161203b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825261097e6020830184611a41565b600060408252611b0e6040830185611a41565b90508260208301529392505050565b901515815260200190565b6000602082528251806020840152611b4781604085016020870161203b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601e908201527f4e6f7420656e6f756768206c697175696469747920666f722074726164650000604082015260600190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f546f6b656e20646f6573206e6f74206578697374000000000000000000000000604082015260600190565b6020808252601e908201527f4e6f7420656e6f756768206c697175696469747920746f2072656d6f76650000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252601e908201527f4d696e696d756d20616d6f756e74206f757420776173206e6f74206d65740000604082015260600190565b60208082526014908201527f4e6f7420656e6f75676820726563656976656421000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f4e6f7420656e6f756768206c7020746f6b656e7320776f756c6420686176652060408201527f6265656e206d696e746564000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604082015260600190565b6020808252600c908201527f4f7574206f662072616e67650000000000000000000000000000000000000000604082015260600190565b60208082526012908201527f496e646578206f7574206f662072616e67650000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b938452602084019290925260ff166040830152606082015260800190565b938452602084019290925260ff908116604084015216606082015260800190565b60ff91909116815260200190565b60008219821115611fc257611fc26120c0565b500190565b600082611fe257634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561201f5761201f6120c0565b500290565b600082821015612036576120366120c0565b500390565b60005b8381101561205657818101518382015260200161203e565b838111156114be5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612099576120996120c0565b5060010190565b600060ff821660ff8114156120b7576120b76120c0565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f7088042e3decc70235093cfac2865a8505490eca3d03a9c35e76294be1b984364736f6c63430008000033",
  "libraries": {
    "SafeERC20": "0xe3C03e4B4d84b84b877a6C0D007dDAd025a175e0",
    "SafeMath": "0x939925cbDf9597aa761FE1bEF478293C05987938"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256[],uint256)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
        },
        "returns": {
          "_0": "amount of LP token user received"
        }
      },
      "calculateRemoveLiquidity(uint256)": {
        "params": {
          "amount": "the amount of LP tokens that would be burned on withdrawal"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(uint256,address)": {
        "params": {
          "tokenAmount": "the amount of LP token to burn",
          "tokenOut": "address of which token will be withdrawn"
        },
        "returns": {
          "availableTokenAmount": "calculated amount of underlying token available to withdraw"
        }
      },
      "getBalances()": {
        "returns": {
          "_0": "current balances of all tokens in pool"
        }
      },
      "getLpToken()": {
        "returns": {
          "_0": "address of lp token"
        }
      },
      "getToken(uint8)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "_0": "address of the token at given index"
        }
      },
      "getTokenBalance(uint8)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "_0": "current balance of the pooled token at given index with token's native precision"
        }
      },
      "getTokenIndex(address)": {
        "params": {
          "tokenAddress": "address of the token"
        },
        "returns": {
          "_0": "the index of the given token address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "deadline": "latest timestamp to accept this transaction",
          "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation"
        },
        "returns": {
          "_0": "amounts of tokens user received"
        }
      },
      "removeLiquidityOneToken(uint256,address,uint256)": {
        "params": {
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "tokenAmount": "the amount of the lp tokens to burn",
          "tokenOut": "the address of the token you want to receive"
        },
        "returns": {
          "_0": "amount chosen token that user received"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swap(address,address,uint256,uint256,uint256)": {
        "params": {
          "amountIn": "the amount of tokens the user wants to swap from",
          "deadline": "latest timestamp to accept this transaction",
          "minAmountOut": "the min amount the user would like to receive, or revert.",
          "tokenFrom": "the token the user wants to swap from",
          "tokenTo": "the token the user wants to swap to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256[],uint256)": {
        "notice": "Add liquidity to the pool"
      },
      "calculateRemoveLiquidity(uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(uint256,address)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "getBalances()": {
        "notice": "Return balances of pooled tokens"
      },
      "getLpToken()": {
        "notice": "Returns address of lp token"
      },
      "getToken(uint8)": {
        "notice": "Return address of the pooled token at given index. Reverts if tokenIndex is out of range."
      },
      "getTokenBalance(uint8)": {
        "notice": "Return current balance of the pooled token at given index"
      },
      "getTokenIndex(address)": {
        "notice": "Return the index of the given token address. Reverts if no matching token is found."
      },
      "pause()": {
        "notice": "Pause the contract. Revert if already paused."
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool."
      },
      "removeLiquidityOneToken(uint256,address,uint256)": {
        "notice": "Remove liquidity from the pool all in one token."
      },
      "swap(address,address,uint256,uint256,uint256)": {
        "notice": "Swap two tokens using this pool"
      },
      "unpause()": {
        "notice": "Unpause the contract. Revert if already unpaused."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 207,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1927,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(IERC20)860)dyn_storage"
      },
      {
        "astId": 1930,
        "contract": "contracts/Swap.sol:Swap",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1933,
        "contract": "contracts/Swap.sol:Swap",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1936,
        "contract": "contracts/Swap.sol:Swap",
        "label": "lpToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(LPToken)1869"
      },
      {
        "astId": 1939,
        "contract": "contracts/Swap.sol:Swap",
        "label": "precisionMultipliers",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1946,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenIndexes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)860)dyn_storage": {
        "base": "t_contract(IERC20)860",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)860": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)1869": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
